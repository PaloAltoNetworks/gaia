// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// PCTokenVerifierIdentity represents the Identity of the object.
var PCTokenVerifierIdentity = elemental.Identity{
	Name:     "pctokenverifier",
	Category: "pctokenverifiers",
	Package:  "larl",
	Private:  true,
}

// PCTokenVerifiersList represents a list of PCTokenVerifiers
type PCTokenVerifiersList []*PCTokenVerifier

// Identity returns the identity of the objects in the list.
func (o PCTokenVerifiersList) Identity() elemental.Identity {

	return PCTokenVerifierIdentity
}

// Copy returns a pointer to a copy the PCTokenVerifiersList.
func (o PCTokenVerifiersList) Copy() elemental.Identifiables {

	copy := append(PCTokenVerifiersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the PCTokenVerifiersList.
func (o PCTokenVerifiersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PCTokenVerifiersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*PCTokenVerifier))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PCTokenVerifiersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PCTokenVerifiersList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PCTokenVerifiersList converted to SparsePCTokenVerifiersList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PCTokenVerifiersList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePCTokenVerifiersList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparsePCTokenVerifier)
	}

	return out
}

// Version returns the version of the content.
func (o PCTokenVerifiersList) Version() int {

	return 1
}

// PCTokenVerifier represents the model of a pctokenverifier
type PCTokenVerifier struct {
	// The provided token (name is to comply with HTTP source requests).
	Password string `json:"password" msgpack:"password" bson:"-" mapstructure:"password,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPCTokenVerifier returns a new *PCTokenVerifier
func NewPCTokenVerifier() *PCTokenVerifier {

	return &PCTokenVerifier{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *PCTokenVerifier) Identity() elemental.Identity {

	return PCTokenVerifierIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PCTokenVerifier) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PCTokenVerifier) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCTokenVerifier) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPCTokenVerifier{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCTokenVerifier) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPCTokenVerifier{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PCTokenVerifier) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PCTokenVerifier) BleveType() string {

	return "pctokenverifier"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PCTokenVerifier) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PCTokenVerifier) Doc() string {

	return `Verifies the given PC token (provided in the password field) and returns its
claims.`
}

func (o *PCTokenVerifier) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PCTokenVerifier) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePCTokenVerifier{
			Password: &o.Password,
		}
	}

	sp := &SparsePCTokenVerifier{}
	for _, f := range fields {
		switch f {
		case "password":
			sp.Password = &(o.Password)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePCTokenVerifier to the object.
func (o *PCTokenVerifier) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePCTokenVerifier)
	if so.Password != nil {
		o.Password = *so.Password
	}
}

// DeepCopy returns a deep copy if the PCTokenVerifier.
func (o *PCTokenVerifier) DeepCopy() *PCTokenVerifier {

	if o == nil {
		return nil
	}

	out := &PCTokenVerifier{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PCTokenVerifier.
func (o *PCTokenVerifier) DeepCopyInto(out *PCTokenVerifier) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PCTokenVerifier: %s", err))
	}

	*out = *target.(*PCTokenVerifier)
}

// Validate valides the current information stored into the structure.
func (o *PCTokenVerifier) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("password", o.Password); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PCTokenVerifier) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PCTokenVerifierAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PCTokenVerifierLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PCTokenVerifier) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PCTokenVerifierAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PCTokenVerifier) ValueForAttribute(name string) interface{} {

	switch name {
	case "password":
		return o.Password
	}

	return nil
}

// PCTokenVerifierAttributesMap represents the map of attribute for PCTokenVerifier.
var PCTokenVerifierAttributesMap = map[string]elemental.AttributeSpecification{
	"Password": {
		AllowedChoices: []string{},
		ConvertedName:  "Password",
		Description:    `The provided token (name is to comply with HTTP source requests).`,
		Exposed:        true,
		Name:           "password",
		Required:       true,
		Type:           "string",
	},
}

// PCTokenVerifierLowerCaseAttributesMap represents the map of attribute for PCTokenVerifier.
var PCTokenVerifierLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"password": {
		AllowedChoices: []string{},
		ConvertedName:  "Password",
		Description:    `The provided token (name is to comply with HTTP source requests).`,
		Exposed:        true,
		Name:           "password",
		Required:       true,
		Type:           "string",
	},
}

// SparsePCTokenVerifiersList represents a list of SparsePCTokenVerifiers
type SparsePCTokenVerifiersList []*SparsePCTokenVerifier

// Identity returns the identity of the objects in the list.
func (o SparsePCTokenVerifiersList) Identity() elemental.Identity {

	return PCTokenVerifierIdentity
}

// Copy returns a pointer to a copy the SparsePCTokenVerifiersList.
func (o SparsePCTokenVerifiersList) Copy() elemental.Identifiables {

	copy := append(SparsePCTokenVerifiersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePCTokenVerifiersList.
func (o SparsePCTokenVerifiersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparsePCTokenVerifiersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePCTokenVerifier))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePCTokenVerifiersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePCTokenVerifiersList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePCTokenVerifiersList converted to PCTokenVerifiersList.
func (o SparsePCTokenVerifiersList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePCTokenVerifiersList) Version() int {

	return 1
}

// SparsePCTokenVerifier represents the sparse version of a pctokenverifier.
type SparsePCTokenVerifier struct {
	// The provided token (name is to comply with HTTP source requests).
	Password *string `json:"password,omitempty" msgpack:"password,omitempty" bson:"-" mapstructure:"password,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePCTokenVerifier returns a new  SparsePCTokenVerifier.
func NewSparsePCTokenVerifier() *SparsePCTokenVerifier {
	return &SparsePCTokenVerifier{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePCTokenVerifier) Identity() elemental.Identity {

	return PCTokenVerifierIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePCTokenVerifier) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePCTokenVerifier) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCTokenVerifier) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePCTokenVerifier{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCTokenVerifier) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePCTokenVerifier{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePCTokenVerifier) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePCTokenVerifier) ToPlain() elemental.PlainIdentifiable {

	out := NewPCTokenVerifier()
	if o.Password != nil {
		out.Password = *o.Password
	}

	return out
}

// DeepCopy returns a deep copy if the SparsePCTokenVerifier.
func (o *SparsePCTokenVerifier) DeepCopy() *SparsePCTokenVerifier {

	if o == nil {
		return nil
	}

	out := &SparsePCTokenVerifier{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePCTokenVerifier.
func (o *SparsePCTokenVerifier) DeepCopyInto(out *SparsePCTokenVerifier) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePCTokenVerifier: %s", err))
	}

	*out = *target.(*SparsePCTokenVerifier)
}

type mongoAttributesPCTokenVerifier struct {
}
type mongoAttributesSparsePCTokenVerifier struct {
}
