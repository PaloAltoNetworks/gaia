{
  "components": {
    "schemas": {
      "policy": {
        "description": "Represents the policy primitive used by all Microsegmentation policies.",
        "properties": {
          "ID": {
            "description": "Identifier of the object.",
            "readOnly": true,
            "type": "string"
          },
          "action": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            },
            "description": "Defines a set of actions that must be enforced when a dependency is met.",
            "type": "object"
          },
          "activeDuration": {
            "description": "Defines for how long the policy will be active according to the\n`activeSchedule`.",
            "type": "string"
          },
          "activeSchedule": {
            "description": "Defines when the policy should be active using the cron notation.\nThe policy will be active for the given `activeDuration`.",
            "type": "string"
          },
          "annotations": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": "Stores additional information about an entity.",
            "type": "object"
          },
          "associatedTags": {
            "description": "List of tags attached to an entity.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createTime": {
            "description": "Creation date of the object.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the object.",
            "type": "string"
          },
          "disabled": {
            "description": "Defines if the property is disabled.",
            "type": "boolean"
          },
          "expirationTime": {
            "description": "If set the policy will be automatically deleted at the given time.",
            "format": "date-time",
            "type": "string"
          },
          "fallback": {
            "description": "Indicates that this is fallback policy. It will only be\napplied if no other policies have been resolved. If the policy is also\npropagated it will become a fallback for children namespaces.",
            "type": "boolean"
          },
          "metadata": {
            "description": "Contains tags that can only be set during creation, must all start\nwith the '@' prefix, and should only be used by external systems.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the entity.",
            "example": "the name",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace tag attached to an entity.",
            "readOnly": true,
            "type": "string"
          },
          "normalizedTags": {
            "description": "Contains the list of normalized tags of the entities.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "object": {
            "description": "Represents set of entities that another entity depends on. As subjects,\nobjects are identified as logical operations on tags when a policy is defined.",
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          },
          "propagate": {
            "description": "Propagates the policy to all of its children.",
            "type": "boolean"
          },
          "propagationHidden": {
            "description": "If set to `true` while the policy is propagating, it won't be visible to\nchildren\nnamespace, but still used for policy resolution.",
            "type": "boolean"
          },
          "protected": {
            "description": "Defines if the object is protected.",
            "type": "boolean"
          },
          "relation": {
            "description": "Describes the required operation to be performed between subjects and\nobjects.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subject": {
            "description": "Represents sets of entities that will have a dependency other entities.\nSubjects are defined as logical operations on tags. Logical operations can\ninclude `AND` and `OR`.",
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          },
          "type": {
            "description": "Type of the policy.",
            "enum": [
              "APIAuthorization",
              "AuditProfileMapping",
              "EnforcerProfile",
              "File",
              "Hook",
              "HostServiceMapping",
              "Infrastructure",
              "NamespaceMapping",
              "Network",
              "NetworkRuleSet",
              "ProcessingUnit",
              "Quota",
              "Service",
              "ServiceDependency",
              "Syscall",
              "TokenScope",
              "SSHAuthorization",
              "UserAccess"
            ]
          },
          "updateTime": {
            "description": "Last update date of the object.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "dev@aporeto.com",
      "name": "Aporeto Inc.",
      "url": "go.aporeto.io/api"
    },
    "license": {
      "name": "TODO"
    },
    "termsOfService": "https://localhost/TODO",
    "title": "policy",
    "version": "1.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/policies": {
      "get": {
        "description": "Retrieves the list of policy primitives.",
        "operationId": "get-all-policies",
        "parameters": [
          {
            "description": "Also retrieve the objects that propagate down.",
            "in": "query",
            "name": "propagated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filtering query. Consequent `q` parameters will form an or.",
            "example": "associatedTags contains ['$name=hello'] or type == 'Docker'",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/policy"
                  },
                  "type": "array"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "core/policy",
          "squall"
        ]
      }
    },
    "/policies/{id}": {
      "delete": {
        "description": "Deletes the object with the given ID.",
        "operationId": "delete-policy-by-ID",
        "parameters": [
          {
            "description": "Filtering query. Consequent `q` parameters will form an or.",
            "example": "associatedTags contains ['$name=hello'] or type == 'Docker'",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "core/policy",
          "squall"
        ]
      },
      "get": {
        "description": "Retrieves the object with the given ID.",
        "operationId": "get-policy-by-ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "core/policy",
          "squall"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "tags": [
    {
      "description": "This tag is for group 'core/policy'",
      "name": "core/policy"
    },
    {
      "description": "This tag is for package 'squall'",
      "name": "squall"
    }
  ]
}
