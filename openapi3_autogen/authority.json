{
  "openapi": "3.0.3",
  "components": {
    "schemas": {
      "authority": {
        "description": "Authority represents a certificate authority.",
        "properties": {
          "ID": {
            "description": "Identifier of the object.",
            "readOnly": true,
            "type": "string"
          },
          "algorithm": {
            "default": "ECDSA",
            "description": "Algorithm defines the signing algorithm to be used.",
            "enum": [
              "ECDSA",
              "RSA"
            ]
          },
          "certificate": {
            "description": "PEM encoded certificate data.",
            "readOnly": true,
            "type": "string"
          },
          "commonName": {
            "description": "CommonName contains the common name of the certificate.",
            "example": "my ca",
            "type": "string"
          },
          "expirationDate": {
            "description": "Date of expiration of the issued certificate.",
            "format": "date-time",
            "type": "string"
          },
          "organization": {
            "description": "Organization field of the CA.",
            "example": "acme",
            "type": "string"
          },
          "serialNumber": {
            "description": "serialNumber of the certificate.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "default": "CA",
            "description": "Type of signing authority can be a CA or a JWT signing certificate.",
            "enum": [
              "CA",
              "TokenSigning"
            ],
            "readOnly": true
          }
        },
        "required": [
          "commonName"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "dev@aporeto.com",
      "name": "Aporeto Inc.",
      "url": "go.aporeto.io/api"
    },
    "license": {
      "name": "TODO"
    },
    "termsOfService": "https://localhost/TODO",
    "title": "authority",
    "version": "1.0"
  },
  "paths": {
    "/authorities": {
      "post": {
        "description": "Creates a new certificate authority.",
        "operationId": "create-a-new-authority",
        "parameters": [
          {
            "description": "Filtering query. Consequent `q` parameters will form an or.",
            "example": "associatedTags contains ['$name=hello'] or type == 'Docker'",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authority"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authority"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "internal/x509",
          "barret"
        ]
      }
    },
    "/authorities/{id}": {
      "delete": {
        "description": "Deletes the object with the given ID.",
        "operationId": "delete-authority-by-ID",
        "parameters": [
          {
            "description": "Filtering query. Consequent `q` parameters will form an or.",
            "example": "associatedTags contains ['$name=hello'] or type == 'Docker'",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authority"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "internal/x509",
          "barret"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "tags": [
    {
      "description": "This tag is for group 'internal/x509'",
      "name": "internal/x509"
    },
    {
      "description": "This tag is for package 'barret'",
      "name": "barret"
    }
  ]
}
