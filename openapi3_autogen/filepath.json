{
  "components": {
    "schemas": {
      "filepath": {
        "description": "A file path represents a random path to a file or a folder. They can be used in\nfile access policies to allow processing units to access them, using\nvarious modes (read, write, execute). You will need to use the file paths tags\nto set some policies. A good example would be `volume=web` or\n`file=/etc/passwd`.",
        "properties": {
          "ID": {
            "description": "Identifier of the object.",
            "readOnly": true,
            "type": "string"
          },
          "annotations": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": "Stores additional information about an entity.",
            "type": "object"
          },
          "associatedTags": {
            "description": "List of tags attached to an entity.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createTime": {
            "description": "Creation date of the object.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the object.",
            "type": "string"
          },
          "filepath": {
            "description": "FilePath refer to the file mount path.",
            "example": "/etc/passwd",
            "type": "string"
          },
          "metadata": {
            "description": "Contains tags that can only be set during creation, must all start\nwith the '@' prefix, and should only be used by external systems.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the entity.",
            "example": "the name",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace tag attached to an entity.",
            "readOnly": true,
            "type": "string"
          },
          "normalizedTags": {
            "description": "Contains the list of normalized tags of the entities.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "propagate": {
            "description": "Propagates the policy to all of its children.",
            "type": "boolean"
          },
          "protected": {
            "description": "Defines if the object is protected.",
            "type": "boolean"
          },
          "server": {
            "description": "server is the server name/ID/IP associated with the file path.",
            "type": "string"
          },
          "updateTime": {
            "description": "Last update date of the object.",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "name"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "dev@aporeto.com",
      "name": "Aporeto Inc.",
      "url": "go.aporeto.io/api"
    },
    "license": {
      "name": "TODO"
    },
    "termsOfService": "https://localhost/TODO",
    "title": "filepath",
    "version": "1.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/filepaths": {
      "get": {
        "description": "Retrieves the list of file paths.",
        "operationId": "get-all-filepaths",
        "parameters": [
          {
            "description": "Also retrieve the objects that have been archived.",
            "in": "query",
            "name": "archived",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Also retrieve the objects that propagate down.",
            "in": "query",
            "name": "propagated",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filtering query. Consequent `q` parameters will form an or.",
            "example": "associatedTags contains ['$name=hello'] or type == 'Docker'",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/filepath"
                  },
                  "type": "array"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy/files",
          "squall"
        ]
      },
      "post": {
        "description": "Create a new file path.",
        "operationId": "create-a-new-filepath",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filepath"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filepath"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy/files",
          "squall"
        ]
      }
    },
    "/filepaths/{id}": {
      "delete": {
        "description": "Deletes the object with the given ID.",
        "operationId": "delete-filepath-by-ID",
        "parameters": [
          {
            "description": "Filtering query. Consequent `q` parameters will form an or.",
            "example": "associatedTags contains ['$name=hello'] or type == 'Docker'",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filepath"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy/files",
          "squall"
        ]
      },
      "get": {
        "description": "Retrieves the object with the given ID.",
        "operationId": "get-filepath-by-ID",
        "parameters": [
          {
            "description": "Also retrieve the objects that have been archived.",
            "in": "query",
            "name": "archived",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Also retrieve the objects that propagate down.",
            "in": "query",
            "name": "propagated",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filepath"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy/files",
          "squall"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates the object with the given ID.",
        "operationId": "update-filepath-by-ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filepath"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filepath"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy/files",
          "squall"
        ]
      }
    }
  },
  "tags": [
    {
      "description": "This tag is for group 'policy/files'",
      "name": "policy/files"
    },
    {
      "description": "This tag is for package 'squall'",
      "name": "squall"
    }
  ]
}
