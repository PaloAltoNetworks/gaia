{
  "components": {
    "schemas": {
      "tag": {
        "description": "A tag is a key-value pair in string form that can applied to all objects in\nthe system. They are used for policy resolution. Tags starting with `$` are\nderived from the property of an object. For example an object with an ID set to\n`xxx` and a name set to `the name` will be tagged by default with `$name=the\nname`\nand `$id=xxx`. Tags starting with an `@` have been generated by an external\nsystem.",
        "properties": {
          "ID": {
            "description": "Identifier of the object.",
            "readOnly": true,
            "type": "string"
          },
          "count": {
            "description": "Represents the number of times the tag is used.",
            "readOnly": true,
            "type": "integer"
          },
          "namespace": {
            "description": "Namespace tag attached to an entity.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "Represents the value of the tag.",
            "example": "key=value",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "dev@aporeto.com",
      "name": "Aporeto Inc.",
      "url": "go.aporeto.io/api"
    },
    "license": {
      "name": "TODO"
    },
    "termsOfService": "https://localhost/TODO",
    "title": "tag",
    "version": "1.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/tags": {
      "get": {
        "description": "Retrieves the list of existing tags in the system.",
        "operationId": "get-all-tags",
        "parameters": [
          {
            "description": "if set to true, only return tags that match the tag prefixes.",
            "in": "query",
            "name": "onlyPolicyTags",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filtering query. Consequent `q` parameters will form an or.",
            "example": "associatedTags contains ['$name=hello'] or type == 'Docker'",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  },
                  "type": "array"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "core/tag",
          "tagle"
        ]
      }
    }
  },
  "tags": [
    {
      "description": "This tag is for group 'core/tag'",
      "name": "core/tag"
    },
    {
      "description": "This tag is for package 'tagle'",
      "name": "tagle"
    }
  ]
}
