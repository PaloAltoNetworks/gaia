// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// CloudAlertRecordProcessorActionValue represents the possible values for attribute "action".
type CloudAlertRecordProcessorActionValue string

const (
	// CloudAlertRecordProcessorActionGenerate represents the value Generate.
	CloudAlertRecordProcessorActionGenerate CloudAlertRecordProcessorActionValue = "Generate"

	// CloudAlertRecordProcessorActionRaise represents the value Raise.
	CloudAlertRecordProcessorActionRaise CloudAlertRecordProcessorActionValue = "Raise"

	// CloudAlertRecordProcessorActionResolve represents the value Resolve.
	CloudAlertRecordProcessorActionResolve CloudAlertRecordProcessorActionValue = "Resolve"
)

// CloudAlertRecordProcessorIdentity represents the Identity of the object.
var CloudAlertRecordProcessorIdentity = elemental.Identity{
	Name:     "cloudalertrecordprocessor",
	Category: "cloudalertrecordprocessors",
	Package:  "vargid",
	Private:  false,
}

// CloudAlertRecordProcessorsList represents a list of CloudAlertRecordProcessors
type CloudAlertRecordProcessorsList []*CloudAlertRecordProcessor

// Identity returns the identity of the objects in the list.
func (o CloudAlertRecordProcessorsList) Identity() elemental.Identity {

	return CloudAlertRecordProcessorIdentity
}

// Copy returns a pointer to a copy the CloudAlertRecordProcessorsList.
func (o CloudAlertRecordProcessorsList) Copy() elemental.Identifiables {

	out := append(CloudAlertRecordProcessorsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the CloudAlertRecordProcessorsList.
func (o CloudAlertRecordProcessorsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(CloudAlertRecordProcessorsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*CloudAlertRecordProcessor))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o CloudAlertRecordProcessorsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o CloudAlertRecordProcessorsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the CloudAlertRecordProcessorsList converted to SparseCloudAlertRecordProcessorsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o CloudAlertRecordProcessorsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseCloudAlertRecordProcessorsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseCloudAlertRecordProcessor)
	}

	return out
}

// Version returns the version of the content.
func (o CloudAlertRecordProcessorsList) Version() int {

	return 1
}

// CloudAlertRecordProcessor represents the model of a cloudalertrecordprocessor
type CloudAlertRecordProcessor struct {
	// Action type to perform.
	Action CloudAlertRecordProcessorActionValue `json:"action" msgpack:"action" bson:"-" mapstructure:"action,omitempty"`

	// IDs of cloud accounts to scan and generate alerts. When left empty all cloud
	// accounts in the tenant are considered. This attribute is only supported with
	// action 'Generate'.
	CloudAccountIDs []string `json:"cloudAccountIDs" msgpack:"cloudAccountIDs" bson:"-" mapstructure:"cloudAccountIDs,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Prisma Cloud policy IDs to scan and generate alerts. When left empty all
	// policies
	// in the tenant are considered. This attribute is only supported with action
	// 'Generate'.
	PrismaCloudPolicyIDs []string `json:"prismaCloudPolicyIDs" msgpack:"prismaCloudPolicyIDs" bson:"-" mapstructure:"prismaCloudPolicyIDs,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewCloudAlertRecordProcessor returns a new *CloudAlertRecordProcessor
func NewCloudAlertRecordProcessor() *CloudAlertRecordProcessor {

	return &CloudAlertRecordProcessor{
		ModelVersion:         1,
		Action:               CloudAlertRecordProcessorActionGenerate,
		CloudAccountIDs:      []string{},
		PrismaCloudPolicyIDs: []string{},
	}
}

// Identity returns the Identity of the object.
func (o *CloudAlertRecordProcessor) Identity() elemental.Identity {

	return CloudAlertRecordProcessorIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *CloudAlertRecordProcessor) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *CloudAlertRecordProcessor) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *CloudAlertRecordProcessor) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesCloudAlertRecordProcessor{}

	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *CloudAlertRecordProcessor) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesCloudAlertRecordProcessor{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *CloudAlertRecordProcessor) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *CloudAlertRecordProcessor) BleveType() string {

	return "cloudalertrecordprocessor"
}

// DefaultOrder returns the list of default ordering fields.
func (o *CloudAlertRecordProcessor) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *CloudAlertRecordProcessor) Doc() string {

	return `Control message model to raise/resolve/generate cloud alert records.`
}

func (o *CloudAlertRecordProcessor) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *CloudAlertRecordProcessor) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *CloudAlertRecordProcessor) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *CloudAlertRecordProcessor) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseCloudAlertRecordProcessor{
			Action:               &o.Action,
			CloudAccountIDs:      &o.CloudAccountIDs,
			Namespace:            &o.Namespace,
			PrismaCloudPolicyIDs: &o.PrismaCloudPolicyIDs,
		}
	}

	sp := &SparseCloudAlertRecordProcessor{}
	for _, f := range fields {
		switch f {
		case "action":
			sp.Action = &(o.Action)
		case "cloudAccountIDs":
			sp.CloudAccountIDs = &(o.CloudAccountIDs)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "prismaCloudPolicyIDs":
			sp.PrismaCloudPolicyIDs = &(o.PrismaCloudPolicyIDs)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseCloudAlertRecordProcessor to the object.
func (o *CloudAlertRecordProcessor) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseCloudAlertRecordProcessor)
	if so.Action != nil {
		o.Action = *so.Action
	}
	if so.CloudAccountIDs != nil {
		o.CloudAccountIDs = *so.CloudAccountIDs
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.PrismaCloudPolicyIDs != nil {
		o.PrismaCloudPolicyIDs = *so.PrismaCloudPolicyIDs
	}
}

// DeepCopy returns a deep copy if the CloudAlertRecordProcessor.
func (o *CloudAlertRecordProcessor) DeepCopy() *CloudAlertRecordProcessor {

	if o == nil {
		return nil
	}

	out := &CloudAlertRecordProcessor{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *CloudAlertRecordProcessor.
func (o *CloudAlertRecordProcessor) DeepCopyInto(out *CloudAlertRecordProcessor) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy CloudAlertRecordProcessor: %s", err))
	}

	*out = *target.(*CloudAlertRecordProcessor)
}

// Validate valides the current information stored into the structure.
func (o *CloudAlertRecordProcessor) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("action", string(o.Action), []string{"Generate", "Raise", "Resolve"}, false); err != nil {
		errors = errors.Append(err)
	}

	// Custom object validation.
	if err := ValidateCloudAlertRecordProcessorEntity(o); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*CloudAlertRecordProcessor) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := CloudAlertRecordProcessorAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return CloudAlertRecordProcessorLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*CloudAlertRecordProcessor) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return CloudAlertRecordProcessorAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *CloudAlertRecordProcessor) ValueForAttribute(name string) any {

	switch name {
	case "action":
		return o.Action
	case "cloudAccountIDs":
		return o.CloudAccountIDs
	case "namespace":
		return o.Namespace
	case "prismaCloudPolicyIDs":
		return o.PrismaCloudPolicyIDs
	}

	return nil
}

// CloudAlertRecordProcessorAttributesMap represents the map of attribute for CloudAlertRecordProcessor.
var CloudAlertRecordProcessorAttributesMap = map[string]elemental.AttributeSpecification{
	"Action": {
		AllowedChoices: []string{"Generate", "Raise", "Resolve"},
		ConvertedName:  "Action",
		DefaultValue:   CloudAlertRecordProcessorActionGenerate,
		Description:    `Action type to perform.`,
		Exposed:        true,
		Name:           "action",
		Type:           "enum",
	},
	"CloudAccountIDs": {
		AllowedChoices: []string{},
		ConvertedName:  "CloudAccountIDs",
		Description: `IDs of cloud accounts to scan and generate alerts. When left empty all cloud
accounts in the tenant are considered. This attribute is only supported with
action 'Generate'.`,
		Exposed: true,
		Name:    "cloudAccountIDs",
		SubType: "string",
		Type:    "list",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"PrismaCloudPolicyIDs": {
		AllowedChoices: []string{},
		ConvertedName:  "PrismaCloudPolicyIDs",
		Description: `Prisma Cloud policy IDs to scan and generate alerts. When left empty all
policies
in the tenant are considered. This attribute is only supported with action
'Generate'.`,
		Exposed: true,
		Name:    "prismaCloudPolicyIDs",
		SubType: "string",
		Type:    "list",
	},
}

// CloudAlertRecordProcessorLowerCaseAttributesMap represents the map of attribute for CloudAlertRecordProcessor.
var CloudAlertRecordProcessorLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"action": {
		AllowedChoices: []string{"Generate", "Raise", "Resolve"},
		ConvertedName:  "Action",
		DefaultValue:   CloudAlertRecordProcessorActionGenerate,
		Description:    `Action type to perform.`,
		Exposed:        true,
		Name:           "action",
		Type:           "enum",
	},
	"cloudaccountids": {
		AllowedChoices: []string{},
		ConvertedName:  "CloudAccountIDs",
		Description: `IDs of cloud accounts to scan and generate alerts. When left empty all cloud
accounts in the tenant are considered. This attribute is only supported with
action 'Generate'.`,
		Exposed: true,
		Name:    "cloudAccountIDs",
		SubType: "string",
		Type:    "list",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"prismacloudpolicyids": {
		AllowedChoices: []string{},
		ConvertedName:  "PrismaCloudPolicyIDs",
		Description: `Prisma Cloud policy IDs to scan and generate alerts. When left empty all
policies
in the tenant are considered. This attribute is only supported with action
'Generate'.`,
		Exposed: true,
		Name:    "prismaCloudPolicyIDs",
		SubType: "string",
		Type:    "list",
	},
}

// SparseCloudAlertRecordProcessorsList represents a list of SparseCloudAlertRecordProcessors
type SparseCloudAlertRecordProcessorsList []*SparseCloudAlertRecordProcessor

// Identity returns the identity of the objects in the list.
func (o SparseCloudAlertRecordProcessorsList) Identity() elemental.Identity {

	return CloudAlertRecordProcessorIdentity
}

// Copy returns a pointer to a copy the SparseCloudAlertRecordProcessorsList.
func (o SparseCloudAlertRecordProcessorsList) Copy() elemental.Identifiables {

	copy := append(SparseCloudAlertRecordProcessorsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseCloudAlertRecordProcessorsList.
func (o SparseCloudAlertRecordProcessorsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseCloudAlertRecordProcessorsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseCloudAlertRecordProcessor))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseCloudAlertRecordProcessorsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseCloudAlertRecordProcessorsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseCloudAlertRecordProcessorsList converted to CloudAlertRecordProcessorsList.
func (o SparseCloudAlertRecordProcessorsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseCloudAlertRecordProcessorsList) Version() int {

	return 1
}

// SparseCloudAlertRecordProcessor represents the sparse version of a cloudalertrecordprocessor.
type SparseCloudAlertRecordProcessor struct {
	// Action type to perform.
	Action *CloudAlertRecordProcessorActionValue `json:"action,omitempty" msgpack:"action,omitempty" bson:"-" mapstructure:"action,omitempty"`

	// IDs of cloud accounts to scan and generate alerts. When left empty all cloud
	// accounts in the tenant are considered. This attribute is only supported with
	// action 'Generate'.
	CloudAccountIDs *[]string `json:"cloudAccountIDs,omitempty" msgpack:"cloudAccountIDs,omitempty" bson:"-" mapstructure:"cloudAccountIDs,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Prisma Cloud policy IDs to scan and generate alerts. When left empty all
	// policies
	// in the tenant are considered. This attribute is only supported with action
	// 'Generate'.
	PrismaCloudPolicyIDs *[]string `json:"prismaCloudPolicyIDs,omitempty" msgpack:"prismaCloudPolicyIDs,omitempty" bson:"-" mapstructure:"prismaCloudPolicyIDs,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseCloudAlertRecordProcessor returns a new  SparseCloudAlertRecordProcessor.
func NewSparseCloudAlertRecordProcessor() *SparseCloudAlertRecordProcessor {
	return &SparseCloudAlertRecordProcessor{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseCloudAlertRecordProcessor) Identity() elemental.Identity {

	return CloudAlertRecordProcessorIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseCloudAlertRecordProcessor) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseCloudAlertRecordProcessor) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseCloudAlertRecordProcessor) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseCloudAlertRecordProcessor{}

	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseCloudAlertRecordProcessor) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseCloudAlertRecordProcessor{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseCloudAlertRecordProcessor) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseCloudAlertRecordProcessor) ToPlain() elemental.PlainIdentifiable {

	out := NewCloudAlertRecordProcessor()
	if o.Action != nil {
		out.Action = *o.Action
	}
	if o.CloudAccountIDs != nil {
		out.CloudAccountIDs = *o.CloudAccountIDs
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.PrismaCloudPolicyIDs != nil {
		out.PrismaCloudPolicyIDs = *o.PrismaCloudPolicyIDs
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseCloudAlertRecordProcessor) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseCloudAlertRecordProcessor) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseCloudAlertRecordProcessor.
func (o *SparseCloudAlertRecordProcessor) DeepCopy() *SparseCloudAlertRecordProcessor {

	if o == nil {
		return nil
	}

	out := &SparseCloudAlertRecordProcessor{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseCloudAlertRecordProcessor.
func (o *SparseCloudAlertRecordProcessor) DeepCopyInto(out *SparseCloudAlertRecordProcessor) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseCloudAlertRecordProcessor: %s", err))
	}

	*out = *target.(*SparseCloudAlertRecordProcessor)
}

type mongoAttributesCloudAlertRecordProcessor struct {
	Namespace string `bson:"namespace"`
}
type mongoAttributesSparseCloudAlertRecordProcessor struct {
	Namespace *string `bson:"namespace,omitempty"`
}
