// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// BucketEntryActionValue represents the possible values for attribute "action".
type BucketEntryActionValue string

const (
	// BucketEntryActionAccept represents the value Accept.
	BucketEntryActionAccept BucketEntryActionValue = "Accept"

	// BucketEntryActionReject represents the value Reject.
	BucketEntryActionReject BucketEntryActionValue = "Reject"
)

// BucketEntry represents the model of a bucketentry
type BucketEntry struct {
	// Action applied to the type.
	Action BucketEntryActionValue `json:"action,omitempty" msgpack:"action,omitempty" bson:"action,omitempty" mapstructure:"action,omitempty"`

	// Number of times the entry was logged.
	Occurrences int `json:"occurrences" msgpack:"occurrences" bson:"occurrences" mapstructure:"occurrences,omitempty"`

	// Time and date of the entry.
	Timestamp time.Time `json:"timestamp,omitempty" msgpack:"timestamp,omitempty" bson:"timestamp,omitempty" mapstructure:"timestamp,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewBucketEntry returns a new *BucketEntry
func NewBucketEntry() *BucketEntry {

	return &BucketEntry{
		ModelVersion: 1,
		Occurrences:  1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *BucketEntry) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesBucketEntry{}

	s.Action = o.Action
	s.Occurrences = o.Occurrences
	s.Timestamp = o.Timestamp

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *BucketEntry) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesBucketEntry{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Action = s.Action
	o.Occurrences = s.Occurrences
	o.Timestamp = s.Timestamp

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *BucketEntry) BleveType() string {

	return "bucketentry"
}

// DeepCopy returns a deep copy if the BucketEntry.
func (o *BucketEntry) DeepCopy() *BucketEntry {

	if o == nil {
		return nil
	}

	out := &BucketEntry{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *BucketEntry.
func (o *BucketEntry) DeepCopyInto(out *BucketEntry) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy BucketEntry: %s", err))
	}

	*out = *target.(*BucketEntry)
}

// Validate valides the current information stored into the structure.
func (o *BucketEntry) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("action", string(o.Action)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("action", string(o.Action), []string{"Accept", "Reject"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredInt("occurrences", o.Occurrences); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*BucketEntry) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := BucketEntryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return BucketEntryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*BucketEntry) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return BucketEntryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *BucketEntry) ValueForAttribute(name string) interface{} {

	switch name {
	case "action":
		return o.Action
	case "occurrences":
		return o.Occurrences
	case "timestamp":
		return o.Timestamp
	}

	return nil
}

// BucketEntryAttributesMap represents the map of attribute for BucketEntry.
var BucketEntryAttributesMap = map[string]elemental.AttributeSpecification{
	"Action": {
		AllowedChoices: []string{"Accept", "Reject"},
		BSONFieldName:  "action",
		ConvertedName:  "Action",
		Description:    `Action applied to the type.`,
		Exposed:        true,
		Name:           "action",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"Occurrences": {
		AllowedChoices: []string{},
		BSONFieldName:  "occurrences",
		ConvertedName:  "Occurrences",
		DefaultValue:   1,
		Description:    `Number of times the entry was logged.`,
		Exposed:        true,
		Name:           "occurrences",
		Required:       true,
		Stored:         true,
		Type:           "integer",
	},
	"Timestamp": {
		AllowedChoices: []string{},
		BSONFieldName:  "timestamp",
		ConvertedName:  "Timestamp",
		Description:    `Time and date of the entry.`,
		Exposed:        true,
		Name:           "timestamp",
		Orderable:      true,
		Stored:         true,
		Type:           "time",
	},
}

// BucketEntryLowerCaseAttributesMap represents the map of attribute for BucketEntry.
var BucketEntryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"action": {
		AllowedChoices: []string{"Accept", "Reject"},
		BSONFieldName:  "action",
		ConvertedName:  "Action",
		Description:    `Action applied to the type.`,
		Exposed:        true,
		Name:           "action",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"occurrences": {
		AllowedChoices: []string{},
		BSONFieldName:  "occurrences",
		ConvertedName:  "Occurrences",
		DefaultValue:   1,
		Description:    `Number of times the entry was logged.`,
		Exposed:        true,
		Name:           "occurrences",
		Required:       true,
		Stored:         true,
		Type:           "integer",
	},
	"timestamp": {
		AllowedChoices: []string{},
		BSONFieldName:  "timestamp",
		ConvertedName:  "Timestamp",
		Description:    `Time and date of the entry.`,
		Exposed:        true,
		Name:           "timestamp",
		Orderable:      true,
		Stored:         true,
		Type:           "time",
	},
}

type mongoAttributesBucketEntry struct {
	Action      BucketEntryActionValue `bson:"action,omitempty"`
	Occurrences int                    `bson:"occurrences"`
	Timestamp   time.Time              `bson:"timestamp,omitempty"`
}
