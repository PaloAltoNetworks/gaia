// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// NGFWGroupMetricIdentity represents the Identity of the object.
var NGFWGroupMetricIdentity = elemental.Identity{
	Name:     "ngfwgroupmetric",
	Category: "ngfwgroupmetrics",
	Package:  "placeholder",
	Private:  false,
}

// NGFWGroupMetricsList represents a list of NGFWGroupMetrics
type NGFWGroupMetricsList []*NGFWGroupMetric

// Identity returns the identity of the objects in the list.
func (o NGFWGroupMetricsList) Identity() elemental.Identity {

	return NGFWGroupMetricIdentity
}

// Copy returns a pointer to a copy the NGFWGroupMetricsList.
func (o NGFWGroupMetricsList) Copy() elemental.Identifiables {

	copy := append(NGFWGroupMetricsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the NGFWGroupMetricsList.
func (o NGFWGroupMetricsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(NGFWGroupMetricsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*NGFWGroupMetric))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o NGFWGroupMetricsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o NGFWGroupMetricsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the NGFWGroupMetricsList converted to SparseNGFWGroupMetricsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o NGFWGroupMetricsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseNGFWGroupMetricsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseNGFWGroupMetric)
	}

	return out
}

// Version returns the version of the content.
func (o NGFWGroupMetricsList) Version() int {

	return 1
}

// NGFWGroupMetric represents the model of a ngfwgroupmetric
type NGFWGroupMetric struct {
	// The number of Prisma Cloud credits consumed.
	CountCreditsConsumed int `json:"countCreditsConsumed,omitempty" msgpack:"countCreditsConsumed,omitempty" bson:"-" mapstructure:"countCreditsConsumed,omitempty"`

	// The number of instances with advanced licensing.
	CountInstancesAdvancedLicense int `json:"countInstancesAdvancedLicense,omitempty" msgpack:"countInstancesAdvancedLicense,omitempty" bson:"-" mapstructure:"countInstancesAdvancedLicense,omitempty"`

	// The number of instances with basic licensing.
	CountInstancesBasicLicense int `json:"countInstancesBasicLicense,omitempty" msgpack:"countInstancesBasicLicense,omitempty" bson:"-" mapstructure:"countInstancesBasicLicense,omitempty"`

	// The number of instances in NGFW mode.
	CountInstancesNGFWMode int `json:"countInstancesNGFWMode,omitempty" msgpack:"countInstancesNGFWMode,omitempty" bson:"-" mapstructure:"countInstancesNGFWMode,omitempty"`

	// The number of instances with TAP licensing.
	CountInstancesTAPLicense int `json:"countInstancesTAPLicense,omitempty" msgpack:"countInstancesTAPLicense,omitempty" bson:"-" mapstructure:"countInstancesTAPLicense,omitempty"`

	// The number of instances in TAP mode.
	CountInstancesTAPMode int `json:"countInstancesTAPMode,omitempty" msgpack:"countInstancesTAPMode,omitempty" bson:"-" mapstructure:"countInstancesTAPMode,omitempty"`

	// The number of NGFW policies with auto-remediation enabled.
	CountPoliciesAutoRemedyEnabled int `json:"countPoliciesAutoRemedyEnabled,omitempty" msgpack:"countPoliciesAutoRemedyEnabled,omitempty" bson:"-" mapstructure:"countPoliciesAutoRemedyEnabled,omitempty"`

	// The number of tenants with NGFW enabled.
	CountTenantsNGFWEnabled int `json:"countTenantsNGFWEnabled,omitempty" msgpack:"countTenantsNGFWEnabled,omitempty" bson:"-" mapstructure:"countTenantsNGFWEnabled,omitempty"`

	// The number of threats blocked.
	CountThreatsBlocked int `json:"countThreatsBlocked,omitempty" msgpack:"countThreatsBlocked,omitempty" bson:"-" mapstructure:"countThreatsBlocked,omitempty"`

	// The number of threats detected.
	CountThreatsDetected int `json:"countThreatsDetected,omitempty" msgpack:"countThreatsDetected,omitempty" bson:"-" mapstructure:"countThreatsDetected,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewNGFWGroupMetric returns a new *NGFWGroupMetric
func NewNGFWGroupMetric() *NGFWGroupMetric {

	return &NGFWGroupMetric{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *NGFWGroupMetric) Identity() elemental.Identity {

	return NGFWGroupMetricIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *NGFWGroupMetric) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *NGFWGroupMetric) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *NGFWGroupMetric) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesNGFWGroupMetric{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *NGFWGroupMetric) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesNGFWGroupMetric{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *NGFWGroupMetric) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *NGFWGroupMetric) BleveType() string {

	return "ngfwgroupmetric"
}

// DefaultOrder returns the list of default ordering fields.
func (o *NGFWGroupMetric) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *NGFWGroupMetric) Doc() string {

	return `Defines the Next-Generation Firewall (NGFW) group of metrics.`
}

func (o *NGFWGroupMetric) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *NGFWGroupMetric) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseNGFWGroupMetric{
			CountCreditsConsumed:           &o.CountCreditsConsumed,
			CountInstancesAdvancedLicense:  &o.CountInstancesAdvancedLicense,
			CountInstancesBasicLicense:     &o.CountInstancesBasicLicense,
			CountInstancesNGFWMode:         &o.CountInstancesNGFWMode,
			CountInstancesTAPLicense:       &o.CountInstancesTAPLicense,
			CountInstancesTAPMode:          &o.CountInstancesTAPMode,
			CountPoliciesAutoRemedyEnabled: &o.CountPoliciesAutoRemedyEnabled,
			CountTenantsNGFWEnabled:        &o.CountTenantsNGFWEnabled,
			CountThreatsBlocked:            &o.CountThreatsBlocked,
			CountThreatsDetected:           &o.CountThreatsDetected,
		}
	}

	sp := &SparseNGFWGroupMetric{}
	for _, f := range fields {
		switch f {
		case "countCreditsConsumed":
			sp.CountCreditsConsumed = &(o.CountCreditsConsumed)
		case "countInstancesAdvancedLicense":
			sp.CountInstancesAdvancedLicense = &(o.CountInstancesAdvancedLicense)
		case "countInstancesBasicLicense":
			sp.CountInstancesBasicLicense = &(o.CountInstancesBasicLicense)
		case "countInstancesNGFWMode":
			sp.CountInstancesNGFWMode = &(o.CountInstancesNGFWMode)
		case "countInstancesTAPLicense":
			sp.CountInstancesTAPLicense = &(o.CountInstancesTAPLicense)
		case "countInstancesTAPMode":
			sp.CountInstancesTAPMode = &(o.CountInstancesTAPMode)
		case "countPoliciesAutoRemedyEnabled":
			sp.CountPoliciesAutoRemedyEnabled = &(o.CountPoliciesAutoRemedyEnabled)
		case "countTenantsNGFWEnabled":
			sp.CountTenantsNGFWEnabled = &(o.CountTenantsNGFWEnabled)
		case "countThreatsBlocked":
			sp.CountThreatsBlocked = &(o.CountThreatsBlocked)
		case "countThreatsDetected":
			sp.CountThreatsDetected = &(o.CountThreatsDetected)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseNGFWGroupMetric to the object.
func (o *NGFWGroupMetric) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseNGFWGroupMetric)
	if so.CountCreditsConsumed != nil {
		o.CountCreditsConsumed = *so.CountCreditsConsumed
	}
	if so.CountInstancesAdvancedLicense != nil {
		o.CountInstancesAdvancedLicense = *so.CountInstancesAdvancedLicense
	}
	if so.CountInstancesBasicLicense != nil {
		o.CountInstancesBasicLicense = *so.CountInstancesBasicLicense
	}
	if so.CountInstancesNGFWMode != nil {
		o.CountInstancesNGFWMode = *so.CountInstancesNGFWMode
	}
	if so.CountInstancesTAPLicense != nil {
		o.CountInstancesTAPLicense = *so.CountInstancesTAPLicense
	}
	if so.CountInstancesTAPMode != nil {
		o.CountInstancesTAPMode = *so.CountInstancesTAPMode
	}
	if so.CountPoliciesAutoRemedyEnabled != nil {
		o.CountPoliciesAutoRemedyEnabled = *so.CountPoliciesAutoRemedyEnabled
	}
	if so.CountTenantsNGFWEnabled != nil {
		o.CountTenantsNGFWEnabled = *so.CountTenantsNGFWEnabled
	}
	if so.CountThreatsBlocked != nil {
		o.CountThreatsBlocked = *so.CountThreatsBlocked
	}
	if so.CountThreatsDetected != nil {
		o.CountThreatsDetected = *so.CountThreatsDetected
	}
}

// DeepCopy returns a deep copy if the NGFWGroupMetric.
func (o *NGFWGroupMetric) DeepCopy() *NGFWGroupMetric {

	if o == nil {
		return nil
	}

	out := &NGFWGroupMetric{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *NGFWGroupMetric.
func (o *NGFWGroupMetric) DeepCopyInto(out *NGFWGroupMetric) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy NGFWGroupMetric: %s", err))
	}

	*out = *target.(*NGFWGroupMetric)
}

// Validate valides the current information stored into the structure.
func (o *NGFWGroupMetric) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*NGFWGroupMetric) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := NGFWGroupMetricAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return NGFWGroupMetricLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*NGFWGroupMetric) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return NGFWGroupMetricAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *NGFWGroupMetric) ValueForAttribute(name string) interface{} {

	switch name {
	case "countCreditsConsumed":
		return o.CountCreditsConsumed
	case "countInstancesAdvancedLicense":
		return o.CountInstancesAdvancedLicense
	case "countInstancesBasicLicense":
		return o.CountInstancesBasicLicense
	case "countInstancesNGFWMode":
		return o.CountInstancesNGFWMode
	case "countInstancesTAPLicense":
		return o.CountInstancesTAPLicense
	case "countInstancesTAPMode":
		return o.CountInstancesTAPMode
	case "countPoliciesAutoRemedyEnabled":
		return o.CountPoliciesAutoRemedyEnabled
	case "countTenantsNGFWEnabled":
		return o.CountTenantsNGFWEnabled
	case "countThreatsBlocked":
		return o.CountThreatsBlocked
	case "countThreatsDetected":
		return o.CountThreatsDetected
	}

	return nil
}

// NGFWGroupMetricAttributesMap represents the map of attribute for NGFWGroupMetric.
var NGFWGroupMetricAttributesMap = map[string]elemental.AttributeSpecification{
	"CountCreditsConsumed": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountCreditsConsumed",
		Description:    `The number of Prisma Cloud credits consumed.`,
		Exposed:        true,
		Name:           "countCreditsConsumed",
		ReadOnly:       true,
		Type:           "integer",
	},
	"CountInstancesAdvancedLicense": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesAdvancedLicense",
		Description:    `The number of instances with advanced licensing.`,
		Exposed:        true,
		Name:           "countInstancesAdvancedLicense",
		ReadOnly:       true,
		Type:           "integer",
	},
	"CountInstancesBasicLicense": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesBasicLicense",
		Description:    `The number of instances with basic licensing.`,
		Exposed:        true,
		Name:           "countInstancesBasicLicense",
		ReadOnly:       true,
		Type:           "integer",
	},
	"CountInstancesNGFWMode": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesNGFWMode",
		Description:    `The number of instances in NGFW mode.`,
		Exposed:        true,
		Name:           "countInstancesNGFWMode",
		ReadOnly:       true,
		Type:           "integer",
	},
	"CountInstancesTAPLicense": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesTAPLicense",
		Description:    `The number of instances with TAP licensing.`,
		Exposed:        true,
		Name:           "countInstancesTAPLicense",
		ReadOnly:       true,
		Type:           "integer",
	},
	"CountInstancesTAPMode": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesTAPMode",
		Description:    `The number of instances in TAP mode.`,
		Exposed:        true,
		Name:           "countInstancesTAPMode",
		ReadOnly:       true,
		Type:           "integer",
	},
	"CountPoliciesAutoRemedyEnabled": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountPoliciesAutoRemedyEnabled",
		Description:    `The number of NGFW policies with auto-remediation enabled.`,
		Exposed:        true,
		Name:           "countPoliciesAutoRemedyEnabled",
		ReadOnly:       true,
		Type:           "integer",
	},
	"CountTenantsNGFWEnabled": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountTenantsNGFWEnabled",
		Description:    `The number of tenants with NGFW enabled.`,
		Exposed:        true,
		Name:           "countTenantsNGFWEnabled",
		ReadOnly:       true,
		Type:           "integer",
	},
	"CountThreatsBlocked": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountThreatsBlocked",
		Description:    `The number of threats blocked.`,
		Exposed:        true,
		Name:           "countThreatsBlocked",
		ReadOnly:       true,
		Type:           "integer",
	},
	"CountThreatsDetected": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountThreatsDetected",
		Description:    `The number of threats detected.`,
		Exposed:        true,
		Name:           "countThreatsDetected",
		ReadOnly:       true,
		Type:           "integer",
	},
}

// NGFWGroupMetricLowerCaseAttributesMap represents the map of attribute for NGFWGroupMetric.
var NGFWGroupMetricLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"countcreditsconsumed": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountCreditsConsumed",
		Description:    `The number of Prisma Cloud credits consumed.`,
		Exposed:        true,
		Name:           "countCreditsConsumed",
		ReadOnly:       true,
		Type:           "integer",
	},
	"countinstancesadvancedlicense": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesAdvancedLicense",
		Description:    `The number of instances with advanced licensing.`,
		Exposed:        true,
		Name:           "countInstancesAdvancedLicense",
		ReadOnly:       true,
		Type:           "integer",
	},
	"countinstancesbasiclicense": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesBasicLicense",
		Description:    `The number of instances with basic licensing.`,
		Exposed:        true,
		Name:           "countInstancesBasicLicense",
		ReadOnly:       true,
		Type:           "integer",
	},
	"countinstancesngfwmode": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesNGFWMode",
		Description:    `The number of instances in NGFW mode.`,
		Exposed:        true,
		Name:           "countInstancesNGFWMode",
		ReadOnly:       true,
		Type:           "integer",
	},
	"countinstancestaplicense": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesTAPLicense",
		Description:    `The number of instances with TAP licensing.`,
		Exposed:        true,
		Name:           "countInstancesTAPLicense",
		ReadOnly:       true,
		Type:           "integer",
	},
	"countinstancestapmode": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountInstancesTAPMode",
		Description:    `The number of instances in TAP mode.`,
		Exposed:        true,
		Name:           "countInstancesTAPMode",
		ReadOnly:       true,
		Type:           "integer",
	},
	"countpoliciesautoremedyenabled": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountPoliciesAutoRemedyEnabled",
		Description:    `The number of NGFW policies with auto-remediation enabled.`,
		Exposed:        true,
		Name:           "countPoliciesAutoRemedyEnabled",
		ReadOnly:       true,
		Type:           "integer",
	},
	"counttenantsngfwenabled": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountTenantsNGFWEnabled",
		Description:    `The number of tenants with NGFW enabled.`,
		Exposed:        true,
		Name:           "countTenantsNGFWEnabled",
		ReadOnly:       true,
		Type:           "integer",
	},
	"countthreatsblocked": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountThreatsBlocked",
		Description:    `The number of threats blocked.`,
		Exposed:        true,
		Name:           "countThreatsBlocked",
		ReadOnly:       true,
		Type:           "integer",
	},
	"countthreatsdetected": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CountThreatsDetected",
		Description:    `The number of threats detected.`,
		Exposed:        true,
		Name:           "countThreatsDetected",
		ReadOnly:       true,
		Type:           "integer",
	},
}

// SparseNGFWGroupMetricsList represents a list of SparseNGFWGroupMetrics
type SparseNGFWGroupMetricsList []*SparseNGFWGroupMetric

// Identity returns the identity of the objects in the list.
func (o SparseNGFWGroupMetricsList) Identity() elemental.Identity {

	return NGFWGroupMetricIdentity
}

// Copy returns a pointer to a copy the SparseNGFWGroupMetricsList.
func (o SparseNGFWGroupMetricsList) Copy() elemental.Identifiables {

	copy := append(SparseNGFWGroupMetricsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseNGFWGroupMetricsList.
func (o SparseNGFWGroupMetricsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseNGFWGroupMetricsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseNGFWGroupMetric))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseNGFWGroupMetricsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseNGFWGroupMetricsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseNGFWGroupMetricsList converted to NGFWGroupMetricsList.
func (o SparseNGFWGroupMetricsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseNGFWGroupMetricsList) Version() int {

	return 1
}

// SparseNGFWGroupMetric represents the sparse version of a ngfwgroupmetric.
type SparseNGFWGroupMetric struct {
	// The number of Prisma Cloud credits consumed.
	CountCreditsConsumed *int `json:"countCreditsConsumed,omitempty" msgpack:"countCreditsConsumed,omitempty" bson:"-" mapstructure:"countCreditsConsumed,omitempty"`

	// The number of instances with advanced licensing.
	CountInstancesAdvancedLicense *int `json:"countInstancesAdvancedLicense,omitempty" msgpack:"countInstancesAdvancedLicense,omitempty" bson:"-" mapstructure:"countInstancesAdvancedLicense,omitempty"`

	// The number of instances with basic licensing.
	CountInstancesBasicLicense *int `json:"countInstancesBasicLicense,omitempty" msgpack:"countInstancesBasicLicense,omitempty" bson:"-" mapstructure:"countInstancesBasicLicense,omitempty"`

	// The number of instances in NGFW mode.
	CountInstancesNGFWMode *int `json:"countInstancesNGFWMode,omitempty" msgpack:"countInstancesNGFWMode,omitempty" bson:"-" mapstructure:"countInstancesNGFWMode,omitempty"`

	// The number of instances with TAP licensing.
	CountInstancesTAPLicense *int `json:"countInstancesTAPLicense,omitempty" msgpack:"countInstancesTAPLicense,omitempty" bson:"-" mapstructure:"countInstancesTAPLicense,omitempty"`

	// The number of instances in TAP mode.
	CountInstancesTAPMode *int `json:"countInstancesTAPMode,omitempty" msgpack:"countInstancesTAPMode,omitempty" bson:"-" mapstructure:"countInstancesTAPMode,omitempty"`

	// The number of NGFW policies with auto-remediation enabled.
	CountPoliciesAutoRemedyEnabled *int `json:"countPoliciesAutoRemedyEnabled,omitempty" msgpack:"countPoliciesAutoRemedyEnabled,omitempty" bson:"-" mapstructure:"countPoliciesAutoRemedyEnabled,omitempty"`

	// The number of tenants with NGFW enabled.
	CountTenantsNGFWEnabled *int `json:"countTenantsNGFWEnabled,omitempty" msgpack:"countTenantsNGFWEnabled,omitempty" bson:"-" mapstructure:"countTenantsNGFWEnabled,omitempty"`

	// The number of threats blocked.
	CountThreatsBlocked *int `json:"countThreatsBlocked,omitempty" msgpack:"countThreatsBlocked,omitempty" bson:"-" mapstructure:"countThreatsBlocked,omitempty"`

	// The number of threats detected.
	CountThreatsDetected *int `json:"countThreatsDetected,omitempty" msgpack:"countThreatsDetected,omitempty" bson:"-" mapstructure:"countThreatsDetected,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseNGFWGroupMetric returns a new  SparseNGFWGroupMetric.
func NewSparseNGFWGroupMetric() *SparseNGFWGroupMetric {
	return &SparseNGFWGroupMetric{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseNGFWGroupMetric) Identity() elemental.Identity {

	return NGFWGroupMetricIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseNGFWGroupMetric) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseNGFWGroupMetric) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseNGFWGroupMetric) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseNGFWGroupMetric{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseNGFWGroupMetric) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseNGFWGroupMetric{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseNGFWGroupMetric) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseNGFWGroupMetric) ToPlain() elemental.PlainIdentifiable {

	out := NewNGFWGroupMetric()
	if o.CountCreditsConsumed != nil {
		out.CountCreditsConsumed = *o.CountCreditsConsumed
	}
	if o.CountInstancesAdvancedLicense != nil {
		out.CountInstancesAdvancedLicense = *o.CountInstancesAdvancedLicense
	}
	if o.CountInstancesBasicLicense != nil {
		out.CountInstancesBasicLicense = *o.CountInstancesBasicLicense
	}
	if o.CountInstancesNGFWMode != nil {
		out.CountInstancesNGFWMode = *o.CountInstancesNGFWMode
	}
	if o.CountInstancesTAPLicense != nil {
		out.CountInstancesTAPLicense = *o.CountInstancesTAPLicense
	}
	if o.CountInstancesTAPMode != nil {
		out.CountInstancesTAPMode = *o.CountInstancesTAPMode
	}
	if o.CountPoliciesAutoRemedyEnabled != nil {
		out.CountPoliciesAutoRemedyEnabled = *o.CountPoliciesAutoRemedyEnabled
	}
	if o.CountTenantsNGFWEnabled != nil {
		out.CountTenantsNGFWEnabled = *o.CountTenantsNGFWEnabled
	}
	if o.CountThreatsBlocked != nil {
		out.CountThreatsBlocked = *o.CountThreatsBlocked
	}
	if o.CountThreatsDetected != nil {
		out.CountThreatsDetected = *o.CountThreatsDetected
	}

	return out
}

// DeepCopy returns a deep copy if the SparseNGFWGroupMetric.
func (o *SparseNGFWGroupMetric) DeepCopy() *SparseNGFWGroupMetric {

	if o == nil {
		return nil
	}

	out := &SparseNGFWGroupMetric{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseNGFWGroupMetric.
func (o *SparseNGFWGroupMetric) DeepCopyInto(out *SparseNGFWGroupMetric) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseNGFWGroupMetric: %s", err))
	}

	*out = *target.(*SparseNGFWGroupMetric)
}

type mongoAttributesNGFWGroupMetric struct {
}
type mongoAttributesSparseNGFWGroupMetric struct {
}
