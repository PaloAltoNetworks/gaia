// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// NGFWMetricGroupIdentity represents the Identity of the object.
var NGFWMetricGroupIdentity = elemental.Identity{
	Name:     "ngfwmetricgroup",
	Category: "ngfwmetricgroups",
	Package:  "placeholder",
	Private:  false,
}

// NGFWMetricGroupsList represents a list of NGFWMetricGroups
type NGFWMetricGroupsList []*NGFWMetricGroup

// Identity returns the identity of the objects in the list.
func (o NGFWMetricGroupsList) Identity() elemental.Identity {

	return NGFWMetricGroupIdentity
}

// Copy returns a pointer to a copy the NGFWMetricGroupsList.
func (o NGFWMetricGroupsList) Copy() elemental.Identifiables {

	copy := append(NGFWMetricGroupsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the NGFWMetricGroupsList.
func (o NGFWMetricGroupsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(NGFWMetricGroupsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*NGFWMetricGroup))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o NGFWMetricGroupsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o NGFWMetricGroupsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the NGFWMetricGroupsList converted to SparseNGFWMetricGroupsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o NGFWMetricGroupsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseNGFWMetricGroupsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseNGFWMetricGroup)
	}

	return out
}

// Version returns the version of the content.
func (o NGFWMetricGroupsList) Version() int {

	return 1
}

// NGFWMetricGroup represents the model of a ngfwmetricgroup
type NGFWMetricGroup struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// The number of Prisma Cloud credits consumed.
	CountCreditsConsumed int `json:"countCreditsConsumed,omitempty" msgpack:"countCreditsConsumed,omitempty" bson:"countcreditsconsumed,omitempty" mapstructure:"countCreditsConsumed,omitempty"`

	// The number of instances with advanced licensing.
	CountInstancesAdvancedLicense int `json:"countInstancesAdvancedLicense,omitempty" msgpack:"countInstancesAdvancedLicense,omitempty" bson:"countinstancesadvancedlicense,omitempty" mapstructure:"countInstancesAdvancedLicense,omitempty"`

	// The number of instances with basic licensing.
	CountInstancesBasicLicense int `json:"countInstancesBasicLicense,omitempty" msgpack:"countInstancesBasicLicense,omitempty" bson:"countinstancesbasiclicense,omitempty" mapstructure:"countInstancesBasicLicense,omitempty"`

	// The number of instances in NGFW mode.
	CountInstancesNGFWMode int `json:"countInstancesNGFWMode,omitempty" msgpack:"countInstancesNGFWMode,omitempty" bson:"countinstancesngfwmode,omitempty" mapstructure:"countInstancesNGFWMode,omitempty"`

	// The number of instances with TAP licensing.
	CountInstancesTAPLicense int `json:"countInstancesTAPLicense,omitempty" msgpack:"countInstancesTAPLicense,omitempty" bson:"countinstancestaplicense,omitempty" mapstructure:"countInstancesTAPLicense,omitempty"`

	// The number of instances in TAP mode.
	CountInstancesTAPMode int `json:"countInstancesTAPMode,omitempty" msgpack:"countInstancesTAPMode,omitempty" bson:"countinstancestapmode,omitempty" mapstructure:"countInstancesTAPMode,omitempty"`

	// The number of NGFW policies with auto-remediation enabled.
	CountPoliciesAutoRemedyEnabled int `json:"countPoliciesAutoRemedyEnabled,omitempty" msgpack:"countPoliciesAutoRemedyEnabled,omitempty" bson:"countpoliciesautoremedyenabled,omitempty" mapstructure:"countPoliciesAutoRemedyEnabled,omitempty"`

	// The number of tenants with NGFW enabled.
	CountTenantsNGFWEnabled int `json:"countTenantsNGFWEnabled,omitempty" msgpack:"countTenantsNGFWEnabled,omitempty" bson:"counttenantsngfwenabled,omitempty" mapstructure:"countTenantsNGFWEnabled,omitempty"`

	// The number of threats blocked.
	CountThreatsBlocked int `json:"countThreatsBlocked,omitempty" msgpack:"countThreatsBlocked,omitempty" bson:"countthreatsblocked,omitempty" mapstructure:"countThreatsBlocked,omitempty"`

	// The number of threats detected.
	CountThreatsDetected int `json:"countThreatsDetected,omitempty" msgpack:"countThreatsDetected,omitempty" bson:"countthreatsdetected,omitempty" mapstructure:"countThreatsDetected,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewNGFWMetricGroup returns a new *NGFWMetricGroup
func NewNGFWMetricGroup() *NGFWMetricGroup {

	return &NGFWMetricGroup{
		ModelVersion:  1,
		MigrationsLog: map[string]string{},
	}
}

// Identity returns the Identity of the object.
func (o *NGFWMetricGroup) Identity() elemental.Identity {

	return NGFWMetricGroupIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *NGFWMetricGroup) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *NGFWMetricGroup) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *NGFWMetricGroup) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesNGFWMetricGroup{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.CountCreditsConsumed = o.CountCreditsConsumed
	s.CountInstancesAdvancedLicense = o.CountInstancesAdvancedLicense
	s.CountInstancesBasicLicense = o.CountInstancesBasicLicense
	s.CountInstancesNGFWMode = o.CountInstancesNGFWMode
	s.CountInstancesTAPLicense = o.CountInstancesTAPLicense
	s.CountInstancesTAPMode = o.CountInstancesTAPMode
	s.CountPoliciesAutoRemedyEnabled = o.CountPoliciesAutoRemedyEnabled
	s.CountTenantsNGFWEnabled = o.CountTenantsNGFWEnabled
	s.CountThreatsBlocked = o.CountThreatsBlocked
	s.CountThreatsDetected = o.CountThreatsDetected
	s.MigrationsLog = o.MigrationsLog
	s.Namespace = o.Namespace
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *NGFWMetricGroup) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesNGFWMetricGroup{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.CountCreditsConsumed = s.CountCreditsConsumed
	o.CountInstancesAdvancedLicense = s.CountInstancesAdvancedLicense
	o.CountInstancesBasicLicense = s.CountInstancesBasicLicense
	o.CountInstancesNGFWMode = s.CountInstancesNGFWMode
	o.CountInstancesTAPLicense = s.CountInstancesTAPLicense
	o.CountInstancesTAPMode = s.CountInstancesTAPMode
	o.CountPoliciesAutoRemedyEnabled = s.CountPoliciesAutoRemedyEnabled
	o.CountTenantsNGFWEnabled = s.CountTenantsNGFWEnabled
	o.CountThreatsBlocked = s.CountThreatsBlocked
	o.CountThreatsDetected = s.CountThreatsDetected
	o.MigrationsLog = s.MigrationsLog
	o.Namespace = s.Namespace
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *NGFWMetricGroup) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *NGFWMetricGroup) BleveType() string {

	return "ngfwmetricgroup"
}

// DefaultOrder returns the list of default ordering fields.
func (o *NGFWMetricGroup) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *NGFWMetricGroup) Doc() string {

	return `Defines the Next-Generation Firewall (NGFW) group of metrics.`
}

func (o *NGFWMetricGroup) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *NGFWMetricGroup) GetMigrationsLog() map[string]string {

	return o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the given value.
func (o *NGFWMetricGroup) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *NGFWMetricGroup) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *NGFWMetricGroup) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetZHash returns the ZHash of the receiver.
func (o *NGFWMetricGroup) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *NGFWMetricGroup) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *NGFWMetricGroup) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *NGFWMetricGroup) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *NGFWMetricGroup) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseNGFWMetricGroup{
			ID:                             &o.ID,
			CountCreditsConsumed:           &o.CountCreditsConsumed,
			CountInstancesAdvancedLicense:  &o.CountInstancesAdvancedLicense,
			CountInstancesBasicLicense:     &o.CountInstancesBasicLicense,
			CountInstancesNGFWMode:         &o.CountInstancesNGFWMode,
			CountInstancesTAPLicense:       &o.CountInstancesTAPLicense,
			CountInstancesTAPMode:          &o.CountInstancesTAPMode,
			CountPoliciesAutoRemedyEnabled: &o.CountPoliciesAutoRemedyEnabled,
			CountTenantsNGFWEnabled:        &o.CountTenantsNGFWEnabled,
			CountThreatsBlocked:            &o.CountThreatsBlocked,
			CountThreatsDetected:           &o.CountThreatsDetected,
			MigrationsLog:                  &o.MigrationsLog,
			Namespace:                      &o.Namespace,
			ZHash:                          &o.ZHash,
			Zone:                           &o.Zone,
		}
	}

	sp := &SparseNGFWMetricGroup{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "countCreditsConsumed":
			sp.CountCreditsConsumed = &(o.CountCreditsConsumed)
		case "countInstancesAdvancedLicense":
			sp.CountInstancesAdvancedLicense = &(o.CountInstancesAdvancedLicense)
		case "countInstancesBasicLicense":
			sp.CountInstancesBasicLicense = &(o.CountInstancesBasicLicense)
		case "countInstancesNGFWMode":
			sp.CountInstancesNGFWMode = &(o.CountInstancesNGFWMode)
		case "countInstancesTAPLicense":
			sp.CountInstancesTAPLicense = &(o.CountInstancesTAPLicense)
		case "countInstancesTAPMode":
			sp.CountInstancesTAPMode = &(o.CountInstancesTAPMode)
		case "countPoliciesAutoRemedyEnabled":
			sp.CountPoliciesAutoRemedyEnabled = &(o.CountPoliciesAutoRemedyEnabled)
		case "countTenantsNGFWEnabled":
			sp.CountTenantsNGFWEnabled = &(o.CountTenantsNGFWEnabled)
		case "countThreatsBlocked":
			sp.CountThreatsBlocked = &(o.CountThreatsBlocked)
		case "countThreatsDetected":
			sp.CountThreatsDetected = &(o.CountThreatsDetected)
		case "migrationsLog":
			sp.MigrationsLog = &(o.MigrationsLog)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseNGFWMetricGroup to the object.
func (o *NGFWMetricGroup) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseNGFWMetricGroup)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.CountCreditsConsumed != nil {
		o.CountCreditsConsumed = *so.CountCreditsConsumed
	}
	if so.CountInstancesAdvancedLicense != nil {
		o.CountInstancesAdvancedLicense = *so.CountInstancesAdvancedLicense
	}
	if so.CountInstancesBasicLicense != nil {
		o.CountInstancesBasicLicense = *so.CountInstancesBasicLicense
	}
	if so.CountInstancesNGFWMode != nil {
		o.CountInstancesNGFWMode = *so.CountInstancesNGFWMode
	}
	if so.CountInstancesTAPLicense != nil {
		o.CountInstancesTAPLicense = *so.CountInstancesTAPLicense
	}
	if so.CountInstancesTAPMode != nil {
		o.CountInstancesTAPMode = *so.CountInstancesTAPMode
	}
	if so.CountPoliciesAutoRemedyEnabled != nil {
		o.CountPoliciesAutoRemedyEnabled = *so.CountPoliciesAutoRemedyEnabled
	}
	if so.CountTenantsNGFWEnabled != nil {
		o.CountTenantsNGFWEnabled = *so.CountTenantsNGFWEnabled
	}
	if so.CountThreatsBlocked != nil {
		o.CountThreatsBlocked = *so.CountThreatsBlocked
	}
	if so.CountThreatsDetected != nil {
		o.CountThreatsDetected = *so.CountThreatsDetected
	}
	if so.MigrationsLog != nil {
		o.MigrationsLog = *so.MigrationsLog
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the NGFWMetricGroup.
func (o *NGFWMetricGroup) DeepCopy() *NGFWMetricGroup {

	if o == nil {
		return nil
	}

	out := &NGFWMetricGroup{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *NGFWMetricGroup.
func (o *NGFWMetricGroup) DeepCopyInto(out *NGFWMetricGroup) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy NGFWMetricGroup: %s", err))
	}

	*out = *target.(*NGFWMetricGroup)
}

// Validate valides the current information stored into the structure.
func (o *NGFWMetricGroup) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*NGFWMetricGroup) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := NGFWMetricGroupAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return NGFWMetricGroupLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*NGFWMetricGroup) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return NGFWMetricGroupAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *NGFWMetricGroup) ValueForAttribute(name string) interface{} {

	switch name {
	case "ID":
		return o.ID
	case "countCreditsConsumed":
		return o.CountCreditsConsumed
	case "countInstancesAdvancedLicense":
		return o.CountInstancesAdvancedLicense
	case "countInstancesBasicLicense":
		return o.CountInstancesBasicLicense
	case "countInstancesNGFWMode":
		return o.CountInstancesNGFWMode
	case "countInstancesTAPLicense":
		return o.CountInstancesTAPLicense
	case "countInstancesTAPMode":
		return o.CountInstancesTAPMode
	case "countPoliciesAutoRemedyEnabled":
		return o.CountPoliciesAutoRemedyEnabled
	case "countTenantsNGFWEnabled":
		return o.CountTenantsNGFWEnabled
	case "countThreatsBlocked":
		return o.CountThreatsBlocked
	case "countThreatsDetected":
		return o.CountThreatsDetected
	case "migrationsLog":
		return o.MigrationsLog
	case "namespace":
		return o.Namespace
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// NGFWMetricGroupAttributesMap represents the map of attribute for NGFWMetricGroup.
var NGFWMetricGroupAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CountCreditsConsumed": {
		AllowedChoices: []string{},
		BSONFieldName:  "countcreditsconsumed",
		ConvertedName:  "CountCreditsConsumed",
		Description:    `The number of Prisma Cloud credits consumed.`,
		Exposed:        true,
		Name:           "countCreditsConsumed",
		Stored:         true,
		Type:           "integer",
	},
	"CountInstancesAdvancedLicense": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancesadvancedlicense",
		ConvertedName:  "CountInstancesAdvancedLicense",
		Description:    `The number of instances with advanced licensing.`,
		Exposed:        true,
		Name:           "countInstancesAdvancedLicense",
		Stored:         true,
		Type:           "integer",
	},
	"CountInstancesBasicLicense": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancesbasiclicense",
		ConvertedName:  "CountInstancesBasicLicense",
		Description:    `The number of instances with basic licensing.`,
		Exposed:        true,
		Name:           "countInstancesBasicLicense",
		Stored:         true,
		Type:           "integer",
	},
	"CountInstancesNGFWMode": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancesngfwmode",
		ConvertedName:  "CountInstancesNGFWMode",
		Description:    `The number of instances in NGFW mode.`,
		Exposed:        true,
		Name:           "countInstancesNGFWMode",
		Stored:         true,
		Type:           "integer",
	},
	"CountInstancesTAPLicense": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancestaplicense",
		ConvertedName:  "CountInstancesTAPLicense",
		Description:    `The number of instances with TAP licensing.`,
		Exposed:        true,
		Name:           "countInstancesTAPLicense",
		Stored:         true,
		Type:           "integer",
	},
	"CountInstancesTAPMode": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancestapmode",
		ConvertedName:  "CountInstancesTAPMode",
		Description:    `The number of instances in TAP mode.`,
		Exposed:        true,
		Name:           "countInstancesTAPMode",
		Stored:         true,
		Type:           "integer",
	},
	"CountPoliciesAutoRemedyEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "countpoliciesautoremedyenabled",
		ConvertedName:  "CountPoliciesAutoRemedyEnabled",
		Description:    `The number of NGFW policies with auto-remediation enabled.`,
		Exposed:        true,
		Name:           "countPoliciesAutoRemedyEnabled",
		Stored:         true,
		Type:           "integer",
	},
	"CountTenantsNGFWEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "counttenantsngfwenabled",
		ConvertedName:  "CountTenantsNGFWEnabled",
		Description:    `The number of tenants with NGFW enabled.`,
		Exposed:        true,
		Name:           "countTenantsNGFWEnabled",
		Stored:         true,
		Type:           "integer",
	},
	"CountThreatsBlocked": {
		AllowedChoices: []string{},
		BSONFieldName:  "countthreatsblocked",
		ConvertedName:  "CountThreatsBlocked",
		Description:    `The number of threats blocked.`,
		Exposed:        true,
		Name:           "countThreatsBlocked",
		Stored:         true,
		Type:           "integer",
	},
	"CountThreatsDetected": {
		AllowedChoices: []string{},
		BSONFieldName:  "countthreatsdetected",
		ConvertedName:  "CountThreatsDetected",
		Description:    `The number of threats detected.`,
		Exposed:        true,
		Name:           "countThreatsDetected",
		Stored:         true,
		Type:           "integer",
	},
	"MigrationsLog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// NGFWMetricGroupLowerCaseAttributesMap represents the map of attribute for NGFWMetricGroup.
var NGFWMetricGroupLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"countcreditsconsumed": {
		AllowedChoices: []string{},
		BSONFieldName:  "countcreditsconsumed",
		ConvertedName:  "CountCreditsConsumed",
		Description:    `The number of Prisma Cloud credits consumed.`,
		Exposed:        true,
		Name:           "countCreditsConsumed",
		Stored:         true,
		Type:           "integer",
	},
	"countinstancesadvancedlicense": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancesadvancedlicense",
		ConvertedName:  "CountInstancesAdvancedLicense",
		Description:    `The number of instances with advanced licensing.`,
		Exposed:        true,
		Name:           "countInstancesAdvancedLicense",
		Stored:         true,
		Type:           "integer",
	},
	"countinstancesbasiclicense": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancesbasiclicense",
		ConvertedName:  "CountInstancesBasicLicense",
		Description:    `The number of instances with basic licensing.`,
		Exposed:        true,
		Name:           "countInstancesBasicLicense",
		Stored:         true,
		Type:           "integer",
	},
	"countinstancesngfwmode": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancesngfwmode",
		ConvertedName:  "CountInstancesNGFWMode",
		Description:    `The number of instances in NGFW mode.`,
		Exposed:        true,
		Name:           "countInstancesNGFWMode",
		Stored:         true,
		Type:           "integer",
	},
	"countinstancestaplicense": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancestaplicense",
		ConvertedName:  "CountInstancesTAPLicense",
		Description:    `The number of instances with TAP licensing.`,
		Exposed:        true,
		Name:           "countInstancesTAPLicense",
		Stored:         true,
		Type:           "integer",
	},
	"countinstancestapmode": {
		AllowedChoices: []string{},
		BSONFieldName:  "countinstancestapmode",
		ConvertedName:  "CountInstancesTAPMode",
		Description:    `The number of instances in TAP mode.`,
		Exposed:        true,
		Name:           "countInstancesTAPMode",
		Stored:         true,
		Type:           "integer",
	},
	"countpoliciesautoremedyenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "countpoliciesautoremedyenabled",
		ConvertedName:  "CountPoliciesAutoRemedyEnabled",
		Description:    `The number of NGFW policies with auto-remediation enabled.`,
		Exposed:        true,
		Name:           "countPoliciesAutoRemedyEnabled",
		Stored:         true,
		Type:           "integer",
	},
	"counttenantsngfwenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "counttenantsngfwenabled",
		ConvertedName:  "CountTenantsNGFWEnabled",
		Description:    `The number of tenants with NGFW enabled.`,
		Exposed:        true,
		Name:           "countTenantsNGFWEnabled",
		Stored:         true,
		Type:           "integer",
	},
	"countthreatsblocked": {
		AllowedChoices: []string{},
		BSONFieldName:  "countthreatsblocked",
		ConvertedName:  "CountThreatsBlocked",
		Description:    `The number of threats blocked.`,
		Exposed:        true,
		Name:           "countThreatsBlocked",
		Stored:         true,
		Type:           "integer",
	},
	"countthreatsdetected": {
		AllowedChoices: []string{},
		BSONFieldName:  "countthreatsdetected",
		ConvertedName:  "CountThreatsDetected",
		Description:    `The number of threats detected.`,
		Exposed:        true,
		Name:           "countThreatsDetected",
		Stored:         true,
		Type:           "integer",
	},
	"migrationslog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseNGFWMetricGroupsList represents a list of SparseNGFWMetricGroups
type SparseNGFWMetricGroupsList []*SparseNGFWMetricGroup

// Identity returns the identity of the objects in the list.
func (o SparseNGFWMetricGroupsList) Identity() elemental.Identity {

	return NGFWMetricGroupIdentity
}

// Copy returns a pointer to a copy the SparseNGFWMetricGroupsList.
func (o SparseNGFWMetricGroupsList) Copy() elemental.Identifiables {

	copy := append(SparseNGFWMetricGroupsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseNGFWMetricGroupsList.
func (o SparseNGFWMetricGroupsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseNGFWMetricGroupsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseNGFWMetricGroup))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseNGFWMetricGroupsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseNGFWMetricGroupsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseNGFWMetricGroupsList converted to NGFWMetricGroupsList.
func (o SparseNGFWMetricGroupsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseNGFWMetricGroupsList) Version() int {

	return 1
}

// SparseNGFWMetricGroup represents the sparse version of a ngfwmetricgroup.
type SparseNGFWMetricGroup struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The number of Prisma Cloud credits consumed.
	CountCreditsConsumed *int `json:"countCreditsConsumed,omitempty" msgpack:"countCreditsConsumed,omitempty" bson:"countcreditsconsumed,omitempty" mapstructure:"countCreditsConsumed,omitempty"`

	// The number of instances with advanced licensing.
	CountInstancesAdvancedLicense *int `json:"countInstancesAdvancedLicense,omitempty" msgpack:"countInstancesAdvancedLicense,omitempty" bson:"countinstancesadvancedlicense,omitempty" mapstructure:"countInstancesAdvancedLicense,omitempty"`

	// The number of instances with basic licensing.
	CountInstancesBasicLicense *int `json:"countInstancesBasicLicense,omitempty" msgpack:"countInstancesBasicLicense,omitempty" bson:"countinstancesbasiclicense,omitempty" mapstructure:"countInstancesBasicLicense,omitempty"`

	// The number of instances in NGFW mode.
	CountInstancesNGFWMode *int `json:"countInstancesNGFWMode,omitempty" msgpack:"countInstancesNGFWMode,omitempty" bson:"countinstancesngfwmode,omitempty" mapstructure:"countInstancesNGFWMode,omitempty"`

	// The number of instances with TAP licensing.
	CountInstancesTAPLicense *int `json:"countInstancesTAPLicense,omitempty" msgpack:"countInstancesTAPLicense,omitempty" bson:"countinstancestaplicense,omitempty" mapstructure:"countInstancesTAPLicense,omitempty"`

	// The number of instances in TAP mode.
	CountInstancesTAPMode *int `json:"countInstancesTAPMode,omitempty" msgpack:"countInstancesTAPMode,omitempty" bson:"countinstancestapmode,omitempty" mapstructure:"countInstancesTAPMode,omitempty"`

	// The number of NGFW policies with auto-remediation enabled.
	CountPoliciesAutoRemedyEnabled *int `json:"countPoliciesAutoRemedyEnabled,omitempty" msgpack:"countPoliciesAutoRemedyEnabled,omitempty" bson:"countpoliciesautoremedyenabled,omitempty" mapstructure:"countPoliciesAutoRemedyEnabled,omitempty"`

	// The number of tenants with NGFW enabled.
	CountTenantsNGFWEnabled *int `json:"countTenantsNGFWEnabled,omitempty" msgpack:"countTenantsNGFWEnabled,omitempty" bson:"counttenantsngfwenabled,omitempty" mapstructure:"countTenantsNGFWEnabled,omitempty"`

	// The number of threats blocked.
	CountThreatsBlocked *int `json:"countThreatsBlocked,omitempty" msgpack:"countThreatsBlocked,omitempty" bson:"countthreatsblocked,omitempty" mapstructure:"countThreatsBlocked,omitempty"`

	// The number of threats detected.
	CountThreatsDetected *int `json:"countThreatsDetected,omitempty" msgpack:"countThreatsDetected,omitempty" bson:"countthreatsdetected,omitempty" mapstructure:"countThreatsDetected,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog *map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseNGFWMetricGroup returns a new  SparseNGFWMetricGroup.
func NewSparseNGFWMetricGroup() *SparseNGFWMetricGroup {
	return &SparseNGFWMetricGroup{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseNGFWMetricGroup) Identity() elemental.Identity {

	return NGFWMetricGroupIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseNGFWMetricGroup) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseNGFWMetricGroup) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseNGFWMetricGroup) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseNGFWMetricGroup{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.CountCreditsConsumed != nil {
		s.CountCreditsConsumed = o.CountCreditsConsumed
	}
	if o.CountInstancesAdvancedLicense != nil {
		s.CountInstancesAdvancedLicense = o.CountInstancesAdvancedLicense
	}
	if o.CountInstancesBasicLicense != nil {
		s.CountInstancesBasicLicense = o.CountInstancesBasicLicense
	}
	if o.CountInstancesNGFWMode != nil {
		s.CountInstancesNGFWMode = o.CountInstancesNGFWMode
	}
	if o.CountInstancesTAPLicense != nil {
		s.CountInstancesTAPLicense = o.CountInstancesTAPLicense
	}
	if o.CountInstancesTAPMode != nil {
		s.CountInstancesTAPMode = o.CountInstancesTAPMode
	}
	if o.CountPoliciesAutoRemedyEnabled != nil {
		s.CountPoliciesAutoRemedyEnabled = o.CountPoliciesAutoRemedyEnabled
	}
	if o.CountTenantsNGFWEnabled != nil {
		s.CountTenantsNGFWEnabled = o.CountTenantsNGFWEnabled
	}
	if o.CountThreatsBlocked != nil {
		s.CountThreatsBlocked = o.CountThreatsBlocked
	}
	if o.CountThreatsDetected != nil {
		s.CountThreatsDetected = o.CountThreatsDetected
	}
	if o.MigrationsLog != nil {
		s.MigrationsLog = o.MigrationsLog
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseNGFWMetricGroup) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseNGFWMetricGroup{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.CountCreditsConsumed != nil {
		o.CountCreditsConsumed = s.CountCreditsConsumed
	}
	if s.CountInstancesAdvancedLicense != nil {
		o.CountInstancesAdvancedLicense = s.CountInstancesAdvancedLicense
	}
	if s.CountInstancesBasicLicense != nil {
		o.CountInstancesBasicLicense = s.CountInstancesBasicLicense
	}
	if s.CountInstancesNGFWMode != nil {
		o.CountInstancesNGFWMode = s.CountInstancesNGFWMode
	}
	if s.CountInstancesTAPLicense != nil {
		o.CountInstancesTAPLicense = s.CountInstancesTAPLicense
	}
	if s.CountInstancesTAPMode != nil {
		o.CountInstancesTAPMode = s.CountInstancesTAPMode
	}
	if s.CountPoliciesAutoRemedyEnabled != nil {
		o.CountPoliciesAutoRemedyEnabled = s.CountPoliciesAutoRemedyEnabled
	}
	if s.CountTenantsNGFWEnabled != nil {
		o.CountTenantsNGFWEnabled = s.CountTenantsNGFWEnabled
	}
	if s.CountThreatsBlocked != nil {
		o.CountThreatsBlocked = s.CountThreatsBlocked
	}
	if s.CountThreatsDetected != nil {
		o.CountThreatsDetected = s.CountThreatsDetected
	}
	if s.MigrationsLog != nil {
		o.MigrationsLog = s.MigrationsLog
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseNGFWMetricGroup) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseNGFWMetricGroup) ToPlain() elemental.PlainIdentifiable {

	out := NewNGFWMetricGroup()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.CountCreditsConsumed != nil {
		out.CountCreditsConsumed = *o.CountCreditsConsumed
	}
	if o.CountInstancesAdvancedLicense != nil {
		out.CountInstancesAdvancedLicense = *o.CountInstancesAdvancedLicense
	}
	if o.CountInstancesBasicLicense != nil {
		out.CountInstancesBasicLicense = *o.CountInstancesBasicLicense
	}
	if o.CountInstancesNGFWMode != nil {
		out.CountInstancesNGFWMode = *o.CountInstancesNGFWMode
	}
	if o.CountInstancesTAPLicense != nil {
		out.CountInstancesTAPLicense = *o.CountInstancesTAPLicense
	}
	if o.CountInstancesTAPMode != nil {
		out.CountInstancesTAPMode = *o.CountInstancesTAPMode
	}
	if o.CountPoliciesAutoRemedyEnabled != nil {
		out.CountPoliciesAutoRemedyEnabled = *o.CountPoliciesAutoRemedyEnabled
	}
	if o.CountTenantsNGFWEnabled != nil {
		out.CountTenantsNGFWEnabled = *o.CountTenantsNGFWEnabled
	}
	if o.CountThreatsBlocked != nil {
		out.CountThreatsBlocked = *o.CountThreatsBlocked
	}
	if o.CountThreatsDetected != nil {
		out.CountThreatsDetected = *o.CountThreatsDetected
	}
	if o.MigrationsLog != nil {
		out.MigrationsLog = *o.MigrationsLog
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *SparseNGFWMetricGroup) GetMigrationsLog() (out map[string]string) {

	if o.MigrationsLog == nil {
		return
	}

	return *o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the address of the given value.
func (o *SparseNGFWMetricGroup) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = &migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseNGFWMetricGroup) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseNGFWMetricGroup) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseNGFWMetricGroup) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseNGFWMetricGroup) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseNGFWMetricGroup) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseNGFWMetricGroup) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseNGFWMetricGroup.
func (o *SparseNGFWMetricGroup) DeepCopy() *SparseNGFWMetricGroup {

	if o == nil {
		return nil
	}

	out := &SparseNGFWMetricGroup{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseNGFWMetricGroup.
func (o *SparseNGFWMetricGroup) DeepCopyInto(out *SparseNGFWMetricGroup) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseNGFWMetricGroup: %s", err))
	}

	*out = *target.(*SparseNGFWMetricGroup)
}

type mongoAttributesNGFWMetricGroup struct {
	ID                             bson.ObjectId     `bson:"_id,omitempty"`
	CountCreditsConsumed           int               `bson:"countcreditsconsumed,omitempty"`
	CountInstancesAdvancedLicense  int               `bson:"countinstancesadvancedlicense,omitempty"`
	CountInstancesBasicLicense     int               `bson:"countinstancesbasiclicense,omitempty"`
	CountInstancesNGFWMode         int               `bson:"countinstancesngfwmode,omitempty"`
	CountInstancesTAPLicense       int               `bson:"countinstancestaplicense,omitempty"`
	CountInstancesTAPMode          int               `bson:"countinstancestapmode,omitempty"`
	CountPoliciesAutoRemedyEnabled int               `bson:"countpoliciesautoremedyenabled,omitempty"`
	CountTenantsNGFWEnabled        int               `bson:"counttenantsngfwenabled,omitempty"`
	CountThreatsBlocked            int               `bson:"countthreatsblocked,omitempty"`
	CountThreatsDetected           int               `bson:"countthreatsdetected,omitempty"`
	MigrationsLog                  map[string]string `bson:"migrationslog,omitempty"`
	Namespace                      string            `bson:"namespace"`
	ZHash                          int               `bson:"zhash"`
	Zone                           int               `bson:"zone"`
}
type mongoAttributesSparseNGFWMetricGroup struct {
	ID                             bson.ObjectId      `bson:"_id,omitempty"`
	CountCreditsConsumed           *int               `bson:"countcreditsconsumed,omitempty"`
	CountInstancesAdvancedLicense  *int               `bson:"countinstancesadvancedlicense,omitempty"`
	CountInstancesBasicLicense     *int               `bson:"countinstancesbasiclicense,omitempty"`
	CountInstancesNGFWMode         *int               `bson:"countinstancesngfwmode,omitempty"`
	CountInstancesTAPLicense       *int               `bson:"countinstancestaplicense,omitempty"`
	CountInstancesTAPMode          *int               `bson:"countinstancestapmode,omitempty"`
	CountPoliciesAutoRemedyEnabled *int               `bson:"countpoliciesautoremedyenabled,omitempty"`
	CountTenantsNGFWEnabled        *int               `bson:"counttenantsngfwenabled,omitempty"`
	CountThreatsBlocked            *int               `bson:"countthreatsblocked,omitempty"`
	CountThreatsDetected           *int               `bson:"countthreatsdetected,omitempty"`
	MigrationsLog                  *map[string]string `bson:"migrationslog,omitempty"`
	Namespace                      *string            `bson:"namespace,omitempty"`
	ZHash                          *int               `bson:"zhash,omitempty"`
	Zone                           *int               `bson:"zone,omitempty"`
}
