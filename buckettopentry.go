// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// BucketTopEntry represents the model of a buckettopentry
type BucketTopEntry struct {
	// Name of the entry.
	Name string `json:"name" msgpack:"name" bson:"-" mapstructure:"name,omitempty"`

	// Number of times the entry showed up.
	Occurrences int `json:"occurrences" msgpack:"occurrences" bson:"-" mapstructure:"occurrences,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewBucketTopEntry returns a new *BucketTopEntry
func NewBucketTopEntry() *BucketTopEntry {

	return &BucketTopEntry{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *BucketTopEntry) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesBucketTopEntry{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *BucketTopEntry) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesBucketTopEntry{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *BucketTopEntry) BleveType() string {

	return "buckettopentry"
}

// DeepCopy returns a deep copy if the BucketTopEntry.
func (o *BucketTopEntry) DeepCopy() *BucketTopEntry {

	if o == nil {
		return nil
	}

	out := &BucketTopEntry{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *BucketTopEntry.
func (o *BucketTopEntry) DeepCopyInto(out *BucketTopEntry) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy BucketTopEntry: %s", err))
	}

	*out = *target.(*BucketTopEntry)
}

// Validate valides the current information stored into the structure.
func (o *BucketTopEntry) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*BucketTopEntry) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := BucketTopEntryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return BucketTopEntryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*BucketTopEntry) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return BucketTopEntryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *BucketTopEntry) ValueForAttribute(name string) interface{} {

	switch name {
	case "name":
		return o.Name
	case "occurrences":
		return o.Occurrences
	}

	return nil
}

// BucketTopEntryAttributesMap represents the map of attribute for BucketTopEntry.
var BucketTopEntryAttributesMap = map[string]elemental.AttributeSpecification{
	"Name": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Name",
		Description:    `Name of the entry.`,
		Exposed:        true,
		Name:           "name",
		ReadOnly:       true,
		Type:           "string",
	},
	"Occurrences": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Occurrences",
		Description:    `Number of times the entry showed up.`,
		Exposed:        true,
		Name:           "occurrences",
		ReadOnly:       true,
		Type:           "integer",
	},
}

// BucketTopEntryLowerCaseAttributesMap represents the map of attribute for BucketTopEntry.
var BucketTopEntryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"name": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Name",
		Description:    `Name of the entry.`,
		Exposed:        true,
		Name:           "name",
		ReadOnly:       true,
		Type:           "string",
	},
	"occurrences": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Occurrences",
		Description:    `Number of times the entry showed up.`,
		Exposed:        true,
		Name:           "occurrences",
		ReadOnly:       true,
		Type:           "integer",
	},
}

type mongoAttributesBucketTopEntry struct {
}
