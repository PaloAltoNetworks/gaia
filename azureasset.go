// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// AzureAssetKindValue represents the possible values for attribute "kind".
type AzureAssetKindValue string

const (
	// AzureAssetKindBackendAddressPool represents the value BackendAddressPool.
	AzureAssetKindBackendAddressPool AzureAssetKindValue = "BackendAddressPool"

	// AzureAssetKindDatabaseAccount represents the value DatabaseAccount.
	AzureAssetKindDatabaseAccount AzureAssetKindValue = "DatabaseAccount"

	// AzureAssetKindFlexibleServer represents the value FlexibleServer.
	AzureAssetKindFlexibleServer AzureAssetKindValue = "FlexibleServer"

	// AzureAssetKindFrontendIPConfiguration represents the value FrontendIPConfiguration.
	AzureAssetKindFrontendIPConfiguration AzureAssetKindValue = "FrontendIPConfiguration"

	// AzureAssetKindIPConfiguration represents the value IPConfiguration.
	AzureAssetKindIPConfiguration AzureAssetKindValue = "IPConfiguration"

	// AzureAssetKindLoadBalancer represents the value LoadBalancer.
	AzureAssetKindLoadBalancer AzureAssetKindValue = "LoadBalancer"

	// AzureAssetKindNATGateway represents the value NATGateway.
	AzureAssetKindNATGateway AzureAssetKindValue = "NATGateway"

	// AzureAssetKindNetworkInterface represents the value NetworkInterface.
	AzureAssetKindNetworkInterface AzureAssetKindValue = "NetworkInterface"

	// AzureAssetKindNetworkSecurityGroup represents the value NetworkSecurityGroup.
	AzureAssetKindNetworkSecurityGroup AzureAssetKindValue = "NetworkSecurityGroup"

	// AzureAssetKindOutboundRule represents the value OutboundRule.
	AzureAssetKindOutboundRule AzureAssetKindValue = "OutboundRule"

	// AzureAssetKindPending represents the value Pending.
	AzureAssetKindPending AzureAssetKindValue = "Pending"

	// AzureAssetKindPublicIPAddress represents the value PublicIPAddress.
	AzureAssetKindPublicIPAddress AzureAssetKindValue = "PublicIPAddress"

	// AzureAssetKindPublicIPPrefix represents the value PublicIPPrefix.
	AzureAssetKindPublicIPPrefix AzureAssetKindValue = "PublicIPPrefix"

	// AzureAssetKindServer represents the value Server.
	AzureAssetKindServer AzureAssetKindValue = "Server"

	// AzureAssetKindSubnet represents the value Subnet.
	AzureAssetKindSubnet AzureAssetKindValue = "Subnet"

	// AzureAssetKindVirtualMachine represents the value VirtualMachine.
	AzureAssetKindVirtualMachine AzureAssetKindValue = "VirtualMachine"

	// AzureAssetKindVirtualMachineScaleSet represents the value VirtualMachineScaleSet.
	AzureAssetKindVirtualMachineScaleSet AzureAssetKindValue = "VirtualMachineScaleSet"

	// AzureAssetKindVirtualMachineScaleSetVM represents the value VirtualMachineScaleSetVM.
	AzureAssetKindVirtualMachineScaleSetVM AzureAssetKindValue = "VirtualMachineScaleSetVM"

	// AzureAssetKindVirtualNetwork represents the value VirtualNetwork.
	AzureAssetKindVirtualNetwork AzureAssetKindValue = "VirtualNetwork"
)

// AzureAssetProviderValue represents the possible values for attribute "provider".
type AzureAssetProviderValue string

const (
	// AzureAssetProviderMicrosoftCompute represents the value MicrosoftCompute.
	AzureAssetProviderMicrosoftCompute AzureAssetProviderValue = "MicrosoftCompute"

	// AzureAssetProviderMicrosoftDBforMySQL represents the value MicrosoftDBforMySQL.
	AzureAssetProviderMicrosoftDBforMySQL AzureAssetProviderValue = "MicrosoftDBforMySQL"

	// AzureAssetProviderMicrosoftDocumentDB represents the value MicrosoftDocumentDB.
	AzureAssetProviderMicrosoftDocumentDB AzureAssetProviderValue = "MicrosoftDocumentDB"

	// AzureAssetProviderMicrosoftNetwork represents the value MicrosoftNetwork.
	AzureAssetProviderMicrosoftNetwork AzureAssetProviderValue = "MicrosoftNetwork"

	// AzureAssetProviderMicrosoftSQL represents the value MicrosoftSQL.
	AzureAssetProviderMicrosoftSQL AzureAssetProviderValue = "MicrosoftSQL"

	// AzureAssetProviderPending represents the value Pending.
	AzureAssetProviderPending AzureAssetProviderValue = "Pending"
)

// AzureAssetIdentity represents the Identity of the object.
var AzureAssetIdentity = elemental.Identity{
	Name:     "azureasset",
	Category: "azureassets",
	Package:  "pandemona",
	Private:  false,
}

// AzureAssetsList represents a list of AzureAssets
type AzureAssetsList []*AzureAsset

// Identity returns the identity of the objects in the list.
func (o AzureAssetsList) Identity() elemental.Identity {

	return AzureAssetIdentity
}

// Copy returns a pointer to a copy the AzureAssetsList.
func (o AzureAssetsList) Copy() elemental.Identifiables {

	copy := append(AzureAssetsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the AzureAssetsList.
func (o AzureAssetsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(AzureAssetsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*AzureAsset))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AzureAssetsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AzureAssetsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AzureAssetsList converted to SparseAzureAssetsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AzureAssetsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAzureAssetsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseAzureAsset)
	}

	return out
}

// Version returns the version of the content.
func (o AzureAssetsList) Version() int {

	return 1
}

// AzureAsset represents the model of a azureasset
type AzureAsset struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The json-encoded data that represents the resource.
	Data []byte `json:"data" msgpack:"data" bson:"data" mapstructure:"data,omitempty"`

	// Values that can be used to narrow searching of resources if the
	// resourceID is not known. For instance, it could be used to store a resource's
	// location or public IP addresses to support cross-cloud analysis. Each value
	// should be formatted as 'key=value'.
	DenormedFields []string `json:"denormedFields" msgpack:"denormedFields" bson:"denormedfields" mapstructure:"denormedFields,omitempty"`

	// The specific kind of the resource.
	Kind AzureAssetKindValue `json:"kind" msgpack:"kind" bson:"kind" mapstructure:"kind,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// The name of this resource.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// The resource identifier in PrismaCloud.
	PrismaRRN string `json:"prismaRRN" msgpack:"prismaRRN" bson:"prismarrn" mapstructure:"prismaRRN,omitempty"`

	// The region this resource exists in according to PrismaCloud. Note that the
	// resource may exists in a different region as described by Azure.
	PrismaRegion string `json:"prismaRegion" msgpack:"prismaRegion" bson:"prismaregion" mapstructure:"prismaRegion,omitempty"`

	// The identifier of the resource as presented by Prisma Cloud, which is a path.
	PrismaResourceID string `json:"prismaResourceID" msgpack:"prismaResourceID" bson:"prismaresourceid" mapstructure:"prismaResourceID,omitempty"`

	// The major type of the resource.
	Provider AzureAssetProviderValue `json:"provider" msgpack:"provider" bson:"provider" mapstructure:"provider,omitempty"`

	// The name of the logical subcontainer of cloud resources.
	ResourceGroup string `json:"resourceGroup" msgpack:"resourceGroup" bson:"resourcegroup" mapstructure:"resourceGroup,omitempty"`

	// The identifier of the resource as presented by Azure, which is a path.
	ResourceID string `json:"resourceID" msgpack:"resourceID" bson:"resourceid" mapstructure:"resourceID,omitempty"`

	// The logical ID of the container which contains the cloud resources.
	SubscriptionID string `json:"subscriptionID" msgpack:"subscriptionID" bson:"subscriptionid" mapstructure:"subscriptionID,omitempty"`

	// User-defined key-value pairs inside the azure resource.
	Tags map[string]string `json:"tags" msgpack:"tags" bson:"tags" mapstructure:"tags,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAzureAsset returns a new *AzureAsset
func NewAzureAsset() *AzureAsset {

	return &AzureAsset{
		ModelVersion:   1,
		Data:           []byte{},
		DenormedFields: []string{},
		Kind:           AzureAssetKindPending,
		MigrationsLog:  map[string]string{},
		Provider:       AzureAssetProviderPending,
		Tags:           map[string]string{},
	}
}

// Identity returns the Identity of the object.
func (o *AzureAsset) Identity() elemental.Identity {

	return AzureAssetIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AzureAsset) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AzureAsset) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AzureAsset) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAzureAsset{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.CreateTime = o.CreateTime
	s.Data = o.Data
	s.DenormedFields = o.DenormedFields
	s.Kind = o.Kind
	s.MigrationsLog = o.MigrationsLog
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.PrismaRRN = o.PrismaRRN
	s.PrismaRegion = o.PrismaRegion
	s.PrismaResourceID = o.PrismaResourceID
	s.Provider = o.Provider
	s.ResourceGroup = o.ResourceGroup
	s.ResourceID = o.ResourceID
	s.SubscriptionID = o.SubscriptionID
	s.Tags = o.Tags
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AzureAsset) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAzureAsset{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.CreateTime = s.CreateTime
	o.Data = s.Data
	o.DenormedFields = s.DenormedFields
	o.Kind = s.Kind
	o.MigrationsLog = s.MigrationsLog
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.PrismaRRN = s.PrismaRRN
	o.PrismaRegion = s.PrismaRegion
	o.PrismaResourceID = s.PrismaResourceID
	o.Provider = s.Provider
	o.ResourceGroup = s.ResourceGroup
	o.ResourceID = s.ResourceID
	o.SubscriptionID = s.SubscriptionID
	o.Tags = s.Tags
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AzureAsset) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AzureAsset) BleveType() string {

	return "azureasset"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AzureAsset) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *AzureAsset) Doc() string {

	return `Represents a read-only Azure cloud resource such as virtualMachines and subnets.`
}

func (o *AzureAsset) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *AzureAsset) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *AzureAsset) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *AzureAsset) GetMigrationsLog() map[string]string {

	return o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the given value.
func (o *AzureAsset) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *AzureAsset) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *AzureAsset) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *AzureAsset) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *AzureAsset) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *AzureAsset) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *AzureAsset) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *AzureAsset) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *AzureAsset) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AzureAsset) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAzureAsset{
			ID:               &o.ID,
			CreateTime:       &o.CreateTime,
			Data:             &o.Data,
			DenormedFields:   &o.DenormedFields,
			Kind:             &o.Kind,
			MigrationsLog:    &o.MigrationsLog,
			Name:             &o.Name,
			Namespace:        &o.Namespace,
			PrismaRRN:        &o.PrismaRRN,
			PrismaRegion:     &o.PrismaRegion,
			PrismaResourceID: &o.PrismaResourceID,
			Provider:         &o.Provider,
			ResourceGroup:    &o.ResourceGroup,
			ResourceID:       &o.ResourceID,
			SubscriptionID:   &o.SubscriptionID,
			Tags:             &o.Tags,
			UpdateTime:       &o.UpdateTime,
			ZHash:            &o.ZHash,
			Zone:             &o.Zone,
		}
	}

	sp := &SparseAzureAsset{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "data":
			sp.Data = &(o.Data)
		case "denormedFields":
			sp.DenormedFields = &(o.DenormedFields)
		case "kind":
			sp.Kind = &(o.Kind)
		case "migrationsLog":
			sp.MigrationsLog = &(o.MigrationsLog)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "prismaRRN":
			sp.PrismaRRN = &(o.PrismaRRN)
		case "prismaRegion":
			sp.PrismaRegion = &(o.PrismaRegion)
		case "prismaResourceID":
			sp.PrismaResourceID = &(o.PrismaResourceID)
		case "provider":
			sp.Provider = &(o.Provider)
		case "resourceGroup":
			sp.ResourceGroup = &(o.ResourceGroup)
		case "resourceID":
			sp.ResourceID = &(o.ResourceID)
		case "subscriptionID":
			sp.SubscriptionID = &(o.SubscriptionID)
		case "tags":
			sp.Tags = &(o.Tags)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAzureAsset to the object.
func (o *AzureAsset) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAzureAsset)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Data != nil {
		o.Data = *so.Data
	}
	if so.DenormedFields != nil {
		o.DenormedFields = *so.DenormedFields
	}
	if so.Kind != nil {
		o.Kind = *so.Kind
	}
	if so.MigrationsLog != nil {
		o.MigrationsLog = *so.MigrationsLog
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.PrismaRRN != nil {
		o.PrismaRRN = *so.PrismaRRN
	}
	if so.PrismaRegion != nil {
		o.PrismaRegion = *so.PrismaRegion
	}
	if so.PrismaResourceID != nil {
		o.PrismaResourceID = *so.PrismaResourceID
	}
	if so.Provider != nil {
		o.Provider = *so.Provider
	}
	if so.ResourceGroup != nil {
		o.ResourceGroup = *so.ResourceGroup
	}
	if so.ResourceID != nil {
		o.ResourceID = *so.ResourceID
	}
	if so.SubscriptionID != nil {
		o.SubscriptionID = *so.SubscriptionID
	}
	if so.Tags != nil {
		o.Tags = *so.Tags
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the AzureAsset.
func (o *AzureAsset) DeepCopy() *AzureAsset {

	if o == nil {
		return nil
	}

	out := &AzureAsset{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AzureAsset.
func (o *AzureAsset) DeepCopyInto(out *AzureAsset) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AzureAsset: %s", err))
	}

	*out = *target.(*AzureAsset)
}

// Validate valides the current information stored into the structure.
func (o *AzureAsset) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredExternal("data", o.Data); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("kind", string(o.Kind), []string{"Pending", "VirtualMachine", "NetworkInterface", "Subnet", "IPConfiguration", "VirtualNetwork", "NetworkSecurityGroup", "NATGateway", "PublicIPAddress", "PublicIPPrefix", "VirtualMachineScaleSet", "VirtualMachineScaleSetVM", "LoadBalancer", "BackendAddressPool", "OutboundRule", "FrontendIPConfiguration", "DatabaseAccount", "FlexibleServer", "Server"}, true); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("provider", string(o.Provider), []string{"Pending", "MicrosoftCompute", "MicrosoftNetwork", "MicrosoftDocumentDB", "MicrosoftDBforMySQL", "MicrosoftSQL"}, true); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AzureAsset) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AzureAssetAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AzureAssetLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AzureAsset) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AzureAssetAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AzureAsset) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "createTime":
		return o.CreateTime
	case "data":
		return o.Data
	case "denormedFields":
		return o.DenormedFields
	case "kind":
		return o.Kind
	case "migrationsLog":
		return o.MigrationsLog
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "prismaRRN":
		return o.PrismaRRN
	case "prismaRegion":
		return o.PrismaRegion
	case "prismaResourceID":
		return o.PrismaResourceID
	case "provider":
		return o.Provider
	case "resourceGroup":
		return o.ResourceGroup
	case "resourceID":
		return o.ResourceID
	case "subscriptionID":
		return o.SubscriptionID
	case "tags":
		return o.Tags
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AzureAssetAttributesMap represents the map of attribute for AzureAsset.
var AzureAssetAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Data": {
		AllowedChoices: []string{},
		BSONFieldName:  "data",
		ConvertedName:  "Data",
		Description:    `The json-encoded data that represents the resource.`,
		Exposed:        true,
		Name:           "data",
		Required:       true,
		Stored:         true,
		SubType:        "[]byte",
		Type:           "external",
	},
	"DenormedFields": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "denormedfields",
		ConvertedName:  "DenormedFields",
		Description: `Values that can be used to narrow searching of resources if the
resourceID is not known. For instance, it could be used to store a resource's
location or public IP addresses to support cross-cloud analysis. Each value
should be formatted as 'key=value'.`,
		Exposed:  true,
		Name:     "denormedFields",
		ReadOnly: true,
		Stored:   true,
		SubType:  "string",
		Type:     "list",
	},
	"Kind": {
		AllowedChoices: []string{"Pending", "VirtualMachine", "NetworkInterface", "Subnet", "IPConfiguration", "VirtualNetwork", "NetworkSecurityGroup", "NATGateway", "PublicIPAddress", "PublicIPPrefix", "VirtualMachineScaleSet", "VirtualMachineScaleSetVM", "LoadBalancer", "BackendAddressPool", "OutboundRule", "FrontendIPConfiguration", "DatabaseAccount", "FlexibleServer", "Server"},
		Autogenerated:  true,
		BSONFieldName:  "kind",
		ConvertedName:  "Kind",
		DefaultValue:   AzureAssetKindPending,
		Description:    `The specific kind of the resource.`,
		Exposed:        true,
		Name:           "kind",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"MigrationsLog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Name": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of this resource.`,
		Exposed:        true,
		Name:           "name",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"PrismaRRN": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismarrn",
		ConvertedName:  "PrismaRRN",
		Description:    `The resource identifier in PrismaCloud.`,
		Exposed:        true,
		Name:           "prismaRRN",
		Stored:         true,
		Type:           "string",
	},
	"PrismaRegion": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismaregion",
		ConvertedName:  "PrismaRegion",
		Description: `The region this resource exists in according to PrismaCloud. Note that the
resource may exists in a different region as described by Azure.`,
		Exposed: true,
		Name:    "prismaRegion",
		Stored:  true,
		Type:    "string",
	},
	"PrismaResourceID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "prismaresourceid",
		ConvertedName:  "PrismaResourceID",
		Description:    `The identifier of the resource as presented by Prisma Cloud, which is a path.`,
		Exposed:        true,
		Name:           "prismaResourceID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Provider": {
		AllowedChoices: []string{"Pending", "MicrosoftCompute", "MicrosoftNetwork", "MicrosoftDocumentDB", "MicrosoftDBforMySQL", "MicrosoftSQL"},
		Autogenerated:  true,
		BSONFieldName:  "provider",
		ConvertedName:  "Provider",
		DefaultValue:   AzureAssetProviderPending,
		Description:    `The major type of the resource.`,
		Exposed:        true,
		Name:           "provider",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"ResourceGroup": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "resourcegroup",
		ConvertedName:  "ResourceGroup",
		Description:    `The name of the logical subcontainer of cloud resources.`,
		Exposed:        true,
		Name:           "resourceGroup",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ResourceID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "resourceid",
		ConvertedName:  "ResourceID",
		Description:    `The identifier of the resource as presented by Azure, which is a path.`,
		Exposed:        true,
		Name:           "resourceID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"SubscriptionID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "subscriptionid",
		ConvertedName:  "SubscriptionID",
		Description:    `The logical ID of the container which contains the cloud resources.`,
		Exposed:        true,
		Name:           "subscriptionID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Tags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "tags",
		ConvertedName:  "Tags",
		Description:    `User-defined key-value pairs inside the azure resource.`,
		Exposed:        true,
		Name:           "tags",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// AzureAssetLowerCaseAttributesMap represents the map of attribute for AzureAsset.
var AzureAssetLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"data": {
		AllowedChoices: []string{},
		BSONFieldName:  "data",
		ConvertedName:  "Data",
		Description:    `The json-encoded data that represents the resource.`,
		Exposed:        true,
		Name:           "data",
		Required:       true,
		Stored:         true,
		SubType:        "[]byte",
		Type:           "external",
	},
	"denormedfields": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "denormedfields",
		ConvertedName:  "DenormedFields",
		Description: `Values that can be used to narrow searching of resources if the
resourceID is not known. For instance, it could be used to store a resource's
location or public IP addresses to support cross-cloud analysis. Each value
should be formatted as 'key=value'.`,
		Exposed:  true,
		Name:     "denormedFields",
		ReadOnly: true,
		Stored:   true,
		SubType:  "string",
		Type:     "list",
	},
	"kind": {
		AllowedChoices: []string{"Pending", "VirtualMachine", "NetworkInterface", "Subnet", "IPConfiguration", "VirtualNetwork", "NetworkSecurityGroup", "NATGateway", "PublicIPAddress", "PublicIPPrefix", "VirtualMachineScaleSet", "VirtualMachineScaleSetVM", "LoadBalancer", "BackendAddressPool", "OutboundRule", "FrontendIPConfiguration", "DatabaseAccount", "FlexibleServer", "Server"},
		Autogenerated:  true,
		BSONFieldName:  "kind",
		ConvertedName:  "Kind",
		DefaultValue:   AzureAssetKindPending,
		Description:    `The specific kind of the resource.`,
		Exposed:        true,
		Name:           "kind",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"migrationslog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"name": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of this resource.`,
		Exposed:        true,
		Name:           "name",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"prismarrn": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismarrn",
		ConvertedName:  "PrismaRRN",
		Description:    `The resource identifier in PrismaCloud.`,
		Exposed:        true,
		Name:           "prismaRRN",
		Stored:         true,
		Type:           "string",
	},
	"prismaregion": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismaregion",
		ConvertedName:  "PrismaRegion",
		Description: `The region this resource exists in according to PrismaCloud. Note that the
resource may exists in a different region as described by Azure.`,
		Exposed: true,
		Name:    "prismaRegion",
		Stored:  true,
		Type:    "string",
	},
	"prismaresourceid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "prismaresourceid",
		ConvertedName:  "PrismaResourceID",
		Description:    `The identifier of the resource as presented by Prisma Cloud, which is a path.`,
		Exposed:        true,
		Name:           "prismaResourceID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"provider": {
		AllowedChoices: []string{"Pending", "MicrosoftCompute", "MicrosoftNetwork", "MicrosoftDocumentDB", "MicrosoftDBforMySQL", "MicrosoftSQL"},
		Autogenerated:  true,
		BSONFieldName:  "provider",
		ConvertedName:  "Provider",
		DefaultValue:   AzureAssetProviderPending,
		Description:    `The major type of the resource.`,
		Exposed:        true,
		Name:           "provider",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"resourcegroup": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "resourcegroup",
		ConvertedName:  "ResourceGroup",
		Description:    `The name of the logical subcontainer of cloud resources.`,
		Exposed:        true,
		Name:           "resourceGroup",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"resourceid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "resourceid",
		ConvertedName:  "ResourceID",
		Description:    `The identifier of the resource as presented by Azure, which is a path.`,
		Exposed:        true,
		Name:           "resourceID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"subscriptionid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "subscriptionid",
		ConvertedName:  "SubscriptionID",
		Description:    `The logical ID of the container which contains the cloud resources.`,
		Exposed:        true,
		Name:           "subscriptionID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"tags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "tags",
		ConvertedName:  "Tags",
		Description:    `User-defined key-value pairs inside the azure resource.`,
		Exposed:        true,
		Name:           "tags",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseAzureAssetsList represents a list of SparseAzureAssets
type SparseAzureAssetsList []*SparseAzureAsset

// Identity returns the identity of the objects in the list.
func (o SparseAzureAssetsList) Identity() elemental.Identity {

	return AzureAssetIdentity
}

// Copy returns a pointer to a copy the SparseAzureAssetsList.
func (o SparseAzureAssetsList) Copy() elemental.Identifiables {

	copy := append(SparseAzureAssetsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAzureAssetsList.
func (o SparseAzureAssetsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseAzureAssetsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAzureAsset))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAzureAssetsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAzureAssetsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAzureAssetsList converted to AzureAssetsList.
func (o SparseAzureAssetsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAzureAssetsList) Version() int {

	return 1
}

// SparseAzureAsset represents the sparse version of a azureasset.
type SparseAzureAsset struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The json-encoded data that represents the resource.
	Data *[]byte `json:"data,omitempty" msgpack:"data,omitempty" bson:"data,omitempty" mapstructure:"data,omitempty"`

	// Values that can be used to narrow searching of resources if the
	// resourceID is not known. For instance, it could be used to store a resource's
	// location or public IP addresses to support cross-cloud analysis. Each value
	// should be formatted as 'key=value'.
	DenormedFields *[]string `json:"denormedFields,omitempty" msgpack:"denormedFields,omitempty" bson:"denormedfields,omitempty" mapstructure:"denormedFields,omitempty"`

	// The specific kind of the resource.
	Kind *AzureAssetKindValue `json:"kind,omitempty" msgpack:"kind,omitempty" bson:"kind,omitempty" mapstructure:"kind,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog *map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// The name of this resource.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The resource identifier in PrismaCloud.
	PrismaRRN *string `json:"prismaRRN,omitempty" msgpack:"prismaRRN,omitempty" bson:"prismarrn,omitempty" mapstructure:"prismaRRN,omitempty"`

	// The region this resource exists in according to PrismaCloud. Note that the
	// resource may exists in a different region as described by Azure.
	PrismaRegion *string `json:"prismaRegion,omitempty" msgpack:"prismaRegion,omitempty" bson:"prismaregion,omitempty" mapstructure:"prismaRegion,omitempty"`

	// The identifier of the resource as presented by Prisma Cloud, which is a path.
	PrismaResourceID *string `json:"prismaResourceID,omitempty" msgpack:"prismaResourceID,omitempty" bson:"prismaresourceid,omitempty" mapstructure:"prismaResourceID,omitempty"`

	// The major type of the resource.
	Provider *AzureAssetProviderValue `json:"provider,omitempty" msgpack:"provider,omitempty" bson:"provider,omitempty" mapstructure:"provider,omitempty"`

	// The name of the logical subcontainer of cloud resources.
	ResourceGroup *string `json:"resourceGroup,omitempty" msgpack:"resourceGroup,omitempty" bson:"resourcegroup,omitempty" mapstructure:"resourceGroup,omitempty"`

	// The identifier of the resource as presented by Azure, which is a path.
	ResourceID *string `json:"resourceID,omitempty" msgpack:"resourceID,omitempty" bson:"resourceid,omitempty" mapstructure:"resourceID,omitempty"`

	// The logical ID of the container which contains the cloud resources.
	SubscriptionID *string `json:"subscriptionID,omitempty" msgpack:"subscriptionID,omitempty" bson:"subscriptionid,omitempty" mapstructure:"subscriptionID,omitempty"`

	// User-defined key-value pairs inside the azure resource.
	Tags *map[string]string `json:"tags,omitempty" msgpack:"tags,omitempty" bson:"tags,omitempty" mapstructure:"tags,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAzureAsset returns a new  SparseAzureAsset.
func NewSparseAzureAsset() *SparseAzureAsset {
	return &SparseAzureAsset{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAzureAsset) Identity() elemental.Identity {

	return AzureAssetIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAzureAsset) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAzureAsset) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAzureAsset) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAzureAsset{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Data != nil {
		s.Data = o.Data
	}
	if o.DenormedFields != nil {
		s.DenormedFields = o.DenormedFields
	}
	if o.Kind != nil {
		s.Kind = o.Kind
	}
	if o.MigrationsLog != nil {
		s.MigrationsLog = o.MigrationsLog
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.PrismaRRN != nil {
		s.PrismaRRN = o.PrismaRRN
	}
	if o.PrismaRegion != nil {
		s.PrismaRegion = o.PrismaRegion
	}
	if o.PrismaResourceID != nil {
		s.PrismaResourceID = o.PrismaResourceID
	}
	if o.Provider != nil {
		s.Provider = o.Provider
	}
	if o.ResourceGroup != nil {
		s.ResourceGroup = o.ResourceGroup
	}
	if o.ResourceID != nil {
		s.ResourceID = o.ResourceID
	}
	if o.SubscriptionID != nil {
		s.SubscriptionID = o.SubscriptionID
	}
	if o.Tags != nil {
		s.Tags = o.Tags
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAzureAsset) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAzureAsset{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Data != nil {
		o.Data = s.Data
	}
	if s.DenormedFields != nil {
		o.DenormedFields = s.DenormedFields
	}
	if s.Kind != nil {
		o.Kind = s.Kind
	}
	if s.MigrationsLog != nil {
		o.MigrationsLog = s.MigrationsLog
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.PrismaRRN != nil {
		o.PrismaRRN = s.PrismaRRN
	}
	if s.PrismaRegion != nil {
		o.PrismaRegion = s.PrismaRegion
	}
	if s.PrismaResourceID != nil {
		o.PrismaResourceID = s.PrismaResourceID
	}
	if s.Provider != nil {
		o.Provider = s.Provider
	}
	if s.ResourceGroup != nil {
		o.ResourceGroup = s.ResourceGroup
	}
	if s.ResourceID != nil {
		o.ResourceID = s.ResourceID
	}
	if s.SubscriptionID != nil {
		o.SubscriptionID = s.SubscriptionID
	}
	if s.Tags != nil {
		o.Tags = s.Tags
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAzureAsset) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAzureAsset) ToPlain() elemental.PlainIdentifiable {

	out := NewAzureAsset()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Data != nil {
		out.Data = *o.Data
	}
	if o.DenormedFields != nil {
		out.DenormedFields = *o.DenormedFields
	}
	if o.Kind != nil {
		out.Kind = *o.Kind
	}
	if o.MigrationsLog != nil {
		out.MigrationsLog = *o.MigrationsLog
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.PrismaRRN != nil {
		out.PrismaRRN = *o.PrismaRRN
	}
	if o.PrismaRegion != nil {
		out.PrismaRegion = *o.PrismaRegion
	}
	if o.PrismaResourceID != nil {
		out.PrismaResourceID = *o.PrismaResourceID
	}
	if o.Provider != nil {
		out.Provider = *o.Provider
	}
	if o.ResourceGroup != nil {
		out.ResourceGroup = *o.ResourceGroup
	}
	if o.ResourceID != nil {
		out.ResourceID = *o.ResourceID
	}
	if o.SubscriptionID != nil {
		out.SubscriptionID = *o.SubscriptionID
	}
	if o.Tags != nil {
		out.Tags = *o.Tags
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAzureAsset) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAzureAsset) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *SparseAzureAsset) GetMigrationsLog() (out map[string]string) {

	if o.MigrationsLog == nil {
		return
	}

	return *o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the address of the given value.
func (o *SparseAzureAsset) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = &migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAzureAsset) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAzureAsset) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAzureAsset) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAzureAsset) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseAzureAsset) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseAzureAsset) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseAzureAsset) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseAzureAsset) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseAzureAsset.
func (o *SparseAzureAsset) DeepCopy() *SparseAzureAsset {

	if o == nil {
		return nil
	}

	out := &SparseAzureAsset{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAzureAsset.
func (o *SparseAzureAsset) DeepCopyInto(out *SparseAzureAsset) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAzureAsset: %s", err))
	}

	*out = *target.(*SparseAzureAsset)
}

type mongoAttributesAzureAsset struct {
	ID               bson.ObjectId           `bson:"_id,omitempty"`
	CreateTime       time.Time               `bson:"createtime"`
	Data             []byte                  `bson:"data"`
	DenormedFields   []string                `bson:"denormedfields"`
	Kind             AzureAssetKindValue     `bson:"kind"`
	MigrationsLog    map[string]string       `bson:"migrationslog,omitempty"`
	Name             string                  `bson:"name"`
	Namespace        string                  `bson:"namespace"`
	PrismaRRN        string                  `bson:"prismarrn"`
	PrismaRegion     string                  `bson:"prismaregion"`
	PrismaResourceID string                  `bson:"prismaresourceid"`
	Provider         AzureAssetProviderValue `bson:"provider"`
	ResourceGroup    string                  `bson:"resourcegroup"`
	ResourceID       string                  `bson:"resourceid"`
	SubscriptionID   string                  `bson:"subscriptionid"`
	Tags             map[string]string       `bson:"tags"`
	UpdateTime       time.Time               `bson:"updatetime"`
	ZHash            int                     `bson:"zhash"`
	Zone             int                     `bson:"zone"`
}
type mongoAttributesSparseAzureAsset struct {
	ID               bson.ObjectId            `bson:"_id,omitempty"`
	CreateTime       *time.Time               `bson:"createtime,omitempty"`
	Data             *[]byte                  `bson:"data,omitempty"`
	DenormedFields   *[]string                `bson:"denormedfields,omitempty"`
	Kind             *AzureAssetKindValue     `bson:"kind,omitempty"`
	MigrationsLog    *map[string]string       `bson:"migrationslog,omitempty"`
	Name             *string                  `bson:"name,omitempty"`
	Namespace        *string                  `bson:"namespace,omitempty"`
	PrismaRRN        *string                  `bson:"prismarrn,omitempty"`
	PrismaRegion     *string                  `bson:"prismaregion,omitempty"`
	PrismaResourceID *string                  `bson:"prismaresourceid,omitempty"`
	Provider         *AzureAssetProviderValue `bson:"provider,omitempty"`
	ResourceGroup    *string                  `bson:"resourcegroup,omitempty"`
	ResourceID       *string                  `bson:"resourceid,omitempty"`
	SubscriptionID   *string                  `bson:"subscriptionid,omitempty"`
	Tags             *map[string]string       `bson:"tags,omitempty"`
	UpdateTime       *time.Time               `bson:"updatetime,omitempty"`
	ZHash            *int                     `bson:"zhash,omitempty"`
	Zone             *int                     `bson:"zone,omitempty"`
}
