// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// GCPAssetGeoScopeValue represents the possible values for attribute "geoScope".
type GCPAssetGeoScopeValue string

const (
	// GCPAssetGeoScopeGlobal represents the value Global.
	GCPAssetGeoScopeGlobal GCPAssetGeoScopeValue = "Global"

	// GCPAssetGeoScopeNotApplicable represents the value NotApplicable.
	GCPAssetGeoScopeNotApplicable GCPAssetGeoScopeValue = "NotApplicable"

	// GCPAssetGeoScopePending represents the value Pending.
	GCPAssetGeoScopePending GCPAssetGeoScopeValue = "Pending"

	// GCPAssetGeoScopeRegion represents the value Region.
	GCPAssetGeoScopeRegion GCPAssetGeoScopeValue = "Region"

	// GCPAssetGeoScopeZone represents the value Zone.
	GCPAssetGeoScopeZone GCPAssetGeoScopeValue = "Zone"
)

// GCPAssetKindValue represents the possible values for attribute "kind".
type GCPAssetKindValue string

const (
	// GCPAssetKindComputeBackendService represents the value ComputeBackendService.
	GCPAssetKindComputeBackendService GCPAssetKindValue = "ComputeBackendService"

	// GCPAssetKindComputeFirewall represents the value ComputeFirewall.
	GCPAssetKindComputeFirewall GCPAssetKindValue = "ComputeFirewall"

	// GCPAssetKindComputeFirewallPolicy represents the value ComputeFirewallPolicy.
	GCPAssetKindComputeFirewallPolicy GCPAssetKindValue = "ComputeFirewallPolicy"

	// GCPAssetKindComputeForwardingRule represents the value ComputeForwardingRule.
	GCPAssetKindComputeForwardingRule GCPAssetKindValue = "ComputeForwardingRule"

	// GCPAssetKindComputeInstance represents the value ComputeInstance.
	GCPAssetKindComputeInstance GCPAssetKindValue = "ComputeInstance"

	// GCPAssetKindComputeNetwork represents the value ComputeNetwork.
	GCPAssetKindComputeNetwork GCPAssetKindValue = "ComputeNetwork"

	// GCPAssetKindComputeRegion represents the value ComputeRegion.
	GCPAssetKindComputeRegion GCPAssetKindValue = "ComputeRegion"

	// GCPAssetKindComputeSubnetwork represents the value ComputeSubnetwork.
	GCPAssetKindComputeSubnetwork GCPAssetKindValue = "ComputeSubnetwork"

	// GCPAssetKindComputeZone represents the value ComputeZone.
	GCPAssetKindComputeZone GCPAssetKindValue = "ComputeZone"

	// GCPAssetKindPending represents the value Pending.
	GCPAssetKindPending GCPAssetKindValue = "Pending"

	// GCPAssetKindResourceFolder represents the value ResourceFolder.
	GCPAssetKindResourceFolder GCPAssetKindValue = "ResourceFolder"

	// GCPAssetKindResourceProject represents the value ResourceProject.
	GCPAssetKindResourceProject GCPAssetKindValue = "ResourceProject"
)

// GCPAssetIdentity represents the Identity of the object.
var GCPAssetIdentity = elemental.Identity{
	Name:     "gcpasset",
	Category: "gcpassets",
	Package:  "pandemona",
	Private:  false,
}

// GCPAssetsList represents a list of GCPAssets
type GCPAssetsList []*GCPAsset

// Identity returns the identity of the objects in the list.
func (o GCPAssetsList) Identity() elemental.Identity {

	return GCPAssetIdentity
}

// Copy returns a pointer to a copy the GCPAssetsList.
func (o GCPAssetsList) Copy() elemental.Identifiables {

	copy := append(GCPAssetsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the GCPAssetsList.
func (o GCPAssetsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(GCPAssetsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*GCPAsset))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o GCPAssetsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o GCPAssetsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the GCPAssetsList converted to SparseGCPAssetsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o GCPAssetsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseGCPAssetsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseGCPAsset)
	}

	return out
}

// Version returns the version of the content.
func (o GCPAssetsList) Version() int {

	return 1
}

// GCPAsset represents the model of a gcpasset
type GCPAsset struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The JSON-encoded data that represents the resource.
	Data []byte `json:"data" msgpack:"data" bson:"data" mapstructure:"data,omitempty"`

	// Contextual values that can be used to narrow searching of resources if the
	// numericID or selflink are not known. For instance, it could be used to store
	// a resource's location or public IP addresses to support cross-cloud analysis.
	DenormedFields []string `json:"denormedFields" msgpack:"denormedFields" bson:"denormedfields" mapstructure:"denormedFields,omitempty"`

	// The kind of geographic availability area where the resource is located.
	GeoScope GCPAssetGeoScopeValue `json:"geoScope" msgpack:"geoScope" bson:"geoscope" mapstructure:"geoScope,omitempty"`

	// The specific kind of the resource.
	Kind GCPAssetKindValue `json:"kind" msgpack:"kind" bson:"kind" mapstructure:"kind,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// The name of the resource.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// A numeric resource ID that will mainly be used in RQL queries.
	NumericID string `json:"numericID" msgpack:"numericID" bson:"numericid" mapstructure:"numericID,omitempty"`

	// The APIID of PrismaCloud resource.
	PrismaAPIID int `json:"prismaAPIID,omitempty" msgpack:"prismaAPIID,omitempty" bson:"-" mapstructure:"prismaAPIID,omitempty"`

	// The resource identifier in PrismaCloud.
	PrismaRRN string `json:"prismaRRN,omitempty" msgpack:"prismaRRN,omitempty" bson:"prismarrn,omitempty" mapstructure:"prismaRRN,omitempty"`

	// The region this resource exists in according to PrismaCloud. Note that the
	// resource may exists in a different region as described by GCP.
	PrismaRegion string `json:"prismaRegion" msgpack:"prismaRegion" bson:"prismaregion" mapstructure:"prismaRegion,omitempty"`

	// The ID of the project the resource belongs to in GCP.
	ProjectID string `json:"projectID,omitempty" msgpack:"projectID,omitempty" bson:"projectid,omitempty" mapstructure:"projectID,omitempty"`

	// The identifier of the resource as presented by GCP, which is a URL.
	Selflink string `json:"selflink" msgpack:"selflink" bson:"selflink" mapstructure:"selflink,omitempty"`

	// User-defined key-value pairs inside the GCP resource.
	Tags map[string]string `json:"tags" msgpack:"tags" bson:"tags" mapstructure:"tags,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewGCPAsset returns a new *GCPAsset
func NewGCPAsset() *GCPAsset {

	return &GCPAsset{
		ModelVersion:   1,
		Data:           []byte{},
		DenormedFields: []string{},
		GeoScope:       GCPAssetGeoScopePending,
		Kind:           GCPAssetKindPending,
		MigrationsLog:  map[string]string{},
		Tags:           map[string]string{},
	}
}

// Identity returns the Identity of the object.
func (o *GCPAsset) Identity() elemental.Identity {

	return GCPAssetIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *GCPAsset) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *GCPAsset) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *GCPAsset) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesGCPAsset{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.CreateTime = o.CreateTime
	s.Data = o.Data
	s.DenormedFields = o.DenormedFields
	s.GeoScope = o.GeoScope
	s.Kind = o.Kind
	s.MigrationsLog = o.MigrationsLog
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.NumericID = o.NumericID
	s.PrismaRRN = o.PrismaRRN
	s.PrismaRegion = o.PrismaRegion
	s.ProjectID = o.ProjectID
	s.Selflink = o.Selflink
	s.Tags = o.Tags
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *GCPAsset) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesGCPAsset{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.CreateTime = s.CreateTime
	o.Data = s.Data
	o.DenormedFields = s.DenormedFields
	o.GeoScope = s.GeoScope
	o.Kind = s.Kind
	o.MigrationsLog = s.MigrationsLog
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.NumericID = s.NumericID
	o.PrismaRRN = s.PrismaRRN
	o.PrismaRegion = s.PrismaRegion
	o.ProjectID = s.ProjectID
	o.Selflink = s.Selflink
	o.Tags = s.Tags
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *GCPAsset) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *GCPAsset) BleveType() string {

	return "gcpasset"
}

// DefaultOrder returns the list of default ordering fields.
func (o *GCPAsset) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *GCPAsset) Doc() string {

	return `Represents a read-only GCP cloud resource such as a virtual machine.`
}

func (o *GCPAsset) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *GCPAsset) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *GCPAsset) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *GCPAsset) GetMigrationsLog() map[string]string {

	return o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the given value.
func (o *GCPAsset) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *GCPAsset) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *GCPAsset) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *GCPAsset) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *GCPAsset) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *GCPAsset) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *GCPAsset) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *GCPAsset) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *GCPAsset) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *GCPAsset) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseGCPAsset{
			ID:             &o.ID,
			CreateTime:     &o.CreateTime,
			Data:           &o.Data,
			DenormedFields: &o.DenormedFields,
			GeoScope:       &o.GeoScope,
			Kind:           &o.Kind,
			MigrationsLog:  &o.MigrationsLog,
			Name:           &o.Name,
			Namespace:      &o.Namespace,
			NumericID:      &o.NumericID,
			PrismaAPIID:    &o.PrismaAPIID,
			PrismaRRN:      &o.PrismaRRN,
			PrismaRegion:   &o.PrismaRegion,
			ProjectID:      &o.ProjectID,
			Selflink:       &o.Selflink,
			Tags:           &o.Tags,
			UpdateTime:     &o.UpdateTime,
			ZHash:          &o.ZHash,
			Zone:           &o.Zone,
		}
	}

	sp := &SparseGCPAsset{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "data":
			sp.Data = &(o.Data)
		case "denormedFields":
			sp.DenormedFields = &(o.DenormedFields)
		case "geoScope":
			sp.GeoScope = &(o.GeoScope)
		case "kind":
			sp.Kind = &(o.Kind)
		case "migrationsLog":
			sp.MigrationsLog = &(o.MigrationsLog)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "numericID":
			sp.NumericID = &(o.NumericID)
		case "prismaAPIID":
			sp.PrismaAPIID = &(o.PrismaAPIID)
		case "prismaRRN":
			sp.PrismaRRN = &(o.PrismaRRN)
		case "prismaRegion":
			sp.PrismaRegion = &(o.PrismaRegion)
		case "projectID":
			sp.ProjectID = &(o.ProjectID)
		case "selflink":
			sp.Selflink = &(o.Selflink)
		case "tags":
			sp.Tags = &(o.Tags)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseGCPAsset to the object.
func (o *GCPAsset) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseGCPAsset)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Data != nil {
		o.Data = *so.Data
	}
	if so.DenormedFields != nil {
		o.DenormedFields = *so.DenormedFields
	}
	if so.GeoScope != nil {
		o.GeoScope = *so.GeoScope
	}
	if so.Kind != nil {
		o.Kind = *so.Kind
	}
	if so.MigrationsLog != nil {
		o.MigrationsLog = *so.MigrationsLog
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.NumericID != nil {
		o.NumericID = *so.NumericID
	}
	if so.PrismaAPIID != nil {
		o.PrismaAPIID = *so.PrismaAPIID
	}
	if so.PrismaRRN != nil {
		o.PrismaRRN = *so.PrismaRRN
	}
	if so.PrismaRegion != nil {
		o.PrismaRegion = *so.PrismaRegion
	}
	if so.ProjectID != nil {
		o.ProjectID = *so.ProjectID
	}
	if so.Selflink != nil {
		o.Selflink = *so.Selflink
	}
	if so.Tags != nil {
		o.Tags = *so.Tags
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the GCPAsset.
func (o *GCPAsset) DeepCopy() *GCPAsset {

	if o == nil {
		return nil
	}

	out := &GCPAsset{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *GCPAsset.
func (o *GCPAsset) DeepCopyInto(out *GCPAsset) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy GCPAsset: %s", err))
	}

	*out = *target.(*GCPAsset)
}

// Validate valides the current information stored into the structure.
func (o *GCPAsset) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredExternal("data", o.Data); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("geoScope", string(o.GeoScope), []string{"Zone", "Region", "Global", "NotApplicable", "Pending"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("kind", string(o.Kind), []string{"ComputeInstance", "ComputeSubnetwork", "ComputeNetwork", "ComputeFirewall", "ComputeFirewallPolicy", "ComputeForwardingRule", "ComputeBackendService", "ComputeRegion", "ComputeZone", "ResourceFolder", "ResourceProject", "Pending"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*GCPAsset) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := GCPAssetAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return GCPAssetLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*GCPAsset) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return GCPAssetAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *GCPAsset) ValueForAttribute(name string) interface{} {

	switch name {
	case "ID":
		return o.ID
	case "createTime":
		return o.CreateTime
	case "data":
		return o.Data
	case "denormedFields":
		return o.DenormedFields
	case "geoScope":
		return o.GeoScope
	case "kind":
		return o.Kind
	case "migrationsLog":
		return o.MigrationsLog
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "numericID":
		return o.NumericID
	case "prismaAPIID":
		return o.PrismaAPIID
	case "prismaRRN":
		return o.PrismaRRN
	case "prismaRegion":
		return o.PrismaRegion
	case "projectID":
		return o.ProjectID
	case "selflink":
		return o.Selflink
	case "tags":
		return o.Tags
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// GCPAssetAttributesMap represents the map of attribute for GCPAsset.
var GCPAssetAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Data": {
		AllowedChoices: []string{},
		BSONFieldName:  "data",
		ConvertedName:  "Data",
		Description:    `The JSON-encoded data that represents the resource.`,
		Exposed:        true,
		Name:           "data",
		Required:       true,
		Stored:         true,
		SubType:        "[]byte",
		Type:           "external",
	},
	"DenormedFields": {
		AllowedChoices: []string{},
		BSONFieldName:  "denormedfields",
		ConvertedName:  "DenormedFields",
		Description: `Contextual values that can be used to narrow searching of resources if the
numericID or selflink are not known. For instance, it could be used to store
a resource's location or public IP addresses to support cross-cloud analysis.`,
		Exposed: true,
		Name:    "denormedFields",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"GeoScope": {
		AllowedChoices: []string{"Zone", "Region", "Global", "NotApplicable", "Pending"},
		BSONFieldName:  "geoscope",
		ConvertedName:  "GeoScope",
		DefaultValue:   GCPAssetGeoScopePending,
		Description:    `The kind of geographic availability area where the resource is located.`,
		Exposed:        true,
		Name:           "geoScope",
		Stored:         true,
		Type:           "enum",
	},
	"Kind": {
		AllowedChoices: []string{"ComputeInstance", "ComputeSubnetwork", "ComputeNetwork", "ComputeFirewall", "ComputeFirewallPolicy", "ComputeForwardingRule", "ComputeBackendService", "ComputeRegion", "ComputeZone", "ResourceFolder", "ResourceProject", "Pending"},
		BSONFieldName:  "kind",
		ConvertedName:  "Kind",
		DefaultValue:   GCPAssetKindPending,
		Description:    `The specific kind of the resource.`,
		Exposed:        true,
		Name:           "kind",
		Stored:         true,
		Type:           "enum",
	},
	"MigrationsLog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the resource.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"NumericID": {
		AllowedChoices: []string{},
		BSONFieldName:  "numericid",
		ConvertedName:  "NumericID",
		Description:    `A numeric resource ID that will mainly be used in RQL queries.`,
		Exposed:        true,
		Name:           "numericID",
		Stored:         true,
		Type:           "string",
	},
	"PrismaAPIID": {
		AllowedChoices: []string{},
		ConvertedName:  "PrismaAPIID",
		Description:    `The APIID of PrismaCloud resource.`,
		Exposed:        true,
		Name:           "prismaAPIID",
		Type:           "integer",
	},
	"PrismaRRN": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismarrn",
		ConvertedName:  "PrismaRRN",
		Description:    `The resource identifier in PrismaCloud.`,
		Exposed:        true,
		Name:           "prismaRRN",
		Stored:         true,
		Type:           "string",
	},
	"PrismaRegion": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismaregion",
		ConvertedName:  "PrismaRegion",
		Description: `The region this resource exists in according to PrismaCloud. Note that the
resource may exists in a different region as described by GCP.`,
		Exposed: true,
		Name:    "prismaRegion",
		Stored:  true,
		Type:    "string",
	},
	"ProjectID": {
		AllowedChoices: []string{},
		BSONFieldName:  "projectid",
		ConvertedName:  "ProjectID",
		Description:    `The ID of the project the resource belongs to in GCP.`,
		Exposed:        true,
		Name:           "projectID",
		Stored:         true,
		Type:           "string",
	},
	"Selflink": {
		AllowedChoices: []string{},
		BSONFieldName:  "selflink",
		ConvertedName:  "Selflink",
		Description:    `The identifier of the resource as presented by GCP, which is a URL.`,
		Exposed:        true,
		Name:           "selflink",
		Stored:         true,
		Type:           "string",
	},
	"Tags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "tags",
		ConvertedName:  "Tags",
		Description:    `User-defined key-value pairs inside the GCP resource.`,
		Exposed:        true,
		Name:           "tags",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// GCPAssetLowerCaseAttributesMap represents the map of attribute for GCPAsset.
var GCPAssetLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"data": {
		AllowedChoices: []string{},
		BSONFieldName:  "data",
		ConvertedName:  "Data",
		Description:    `The JSON-encoded data that represents the resource.`,
		Exposed:        true,
		Name:           "data",
		Required:       true,
		Stored:         true,
		SubType:        "[]byte",
		Type:           "external",
	},
	"denormedfields": {
		AllowedChoices: []string{},
		BSONFieldName:  "denormedfields",
		ConvertedName:  "DenormedFields",
		Description: `Contextual values that can be used to narrow searching of resources if the
numericID or selflink are not known. For instance, it could be used to store
a resource's location or public IP addresses to support cross-cloud analysis.`,
		Exposed: true,
		Name:    "denormedFields",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"geoscope": {
		AllowedChoices: []string{"Zone", "Region", "Global", "NotApplicable", "Pending"},
		BSONFieldName:  "geoscope",
		ConvertedName:  "GeoScope",
		DefaultValue:   GCPAssetGeoScopePending,
		Description:    `The kind of geographic availability area where the resource is located.`,
		Exposed:        true,
		Name:           "geoScope",
		Stored:         true,
		Type:           "enum",
	},
	"kind": {
		AllowedChoices: []string{"ComputeInstance", "ComputeSubnetwork", "ComputeNetwork", "ComputeFirewall", "ComputeFirewallPolicy", "ComputeForwardingRule", "ComputeBackendService", "ComputeRegion", "ComputeZone", "ResourceFolder", "ResourceProject", "Pending"},
		BSONFieldName:  "kind",
		ConvertedName:  "Kind",
		DefaultValue:   GCPAssetKindPending,
		Description:    `The specific kind of the resource.`,
		Exposed:        true,
		Name:           "kind",
		Stored:         true,
		Type:           "enum",
	},
	"migrationslog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the resource.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"numericid": {
		AllowedChoices: []string{},
		BSONFieldName:  "numericid",
		ConvertedName:  "NumericID",
		Description:    `A numeric resource ID that will mainly be used in RQL queries.`,
		Exposed:        true,
		Name:           "numericID",
		Stored:         true,
		Type:           "string",
	},
	"prismaapiid": {
		AllowedChoices: []string{},
		ConvertedName:  "PrismaAPIID",
		Description:    `The APIID of PrismaCloud resource.`,
		Exposed:        true,
		Name:           "prismaAPIID",
		Type:           "integer",
	},
	"prismarrn": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismarrn",
		ConvertedName:  "PrismaRRN",
		Description:    `The resource identifier in PrismaCloud.`,
		Exposed:        true,
		Name:           "prismaRRN",
		Stored:         true,
		Type:           "string",
	},
	"prismaregion": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismaregion",
		ConvertedName:  "PrismaRegion",
		Description: `The region this resource exists in according to PrismaCloud. Note that the
resource may exists in a different region as described by GCP.`,
		Exposed: true,
		Name:    "prismaRegion",
		Stored:  true,
		Type:    "string",
	},
	"projectid": {
		AllowedChoices: []string{},
		BSONFieldName:  "projectid",
		ConvertedName:  "ProjectID",
		Description:    `The ID of the project the resource belongs to in GCP.`,
		Exposed:        true,
		Name:           "projectID",
		Stored:         true,
		Type:           "string",
	},
	"selflink": {
		AllowedChoices: []string{},
		BSONFieldName:  "selflink",
		ConvertedName:  "Selflink",
		Description:    `The identifier of the resource as presented by GCP, which is a URL.`,
		Exposed:        true,
		Name:           "selflink",
		Stored:         true,
		Type:           "string",
	},
	"tags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "tags",
		ConvertedName:  "Tags",
		Description:    `User-defined key-value pairs inside the GCP resource.`,
		Exposed:        true,
		Name:           "tags",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseGCPAssetsList represents a list of SparseGCPAssets
type SparseGCPAssetsList []*SparseGCPAsset

// Identity returns the identity of the objects in the list.
func (o SparseGCPAssetsList) Identity() elemental.Identity {

	return GCPAssetIdentity
}

// Copy returns a pointer to a copy the SparseGCPAssetsList.
func (o SparseGCPAssetsList) Copy() elemental.Identifiables {

	copy := append(SparseGCPAssetsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseGCPAssetsList.
func (o SparseGCPAssetsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseGCPAssetsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseGCPAsset))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseGCPAssetsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseGCPAssetsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseGCPAssetsList converted to GCPAssetsList.
func (o SparseGCPAssetsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseGCPAssetsList) Version() int {

	return 1
}

// SparseGCPAsset represents the sparse version of a gcpasset.
type SparseGCPAsset struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The JSON-encoded data that represents the resource.
	Data *[]byte `json:"data,omitempty" msgpack:"data,omitempty" bson:"data,omitempty" mapstructure:"data,omitempty"`

	// Contextual values that can be used to narrow searching of resources if the
	// numericID or selflink are not known. For instance, it could be used to store
	// a resource's location or public IP addresses to support cross-cloud analysis.
	DenormedFields *[]string `json:"denormedFields,omitempty" msgpack:"denormedFields,omitempty" bson:"denormedfields,omitempty" mapstructure:"denormedFields,omitempty"`

	// The kind of geographic availability area where the resource is located.
	GeoScope *GCPAssetGeoScopeValue `json:"geoScope,omitempty" msgpack:"geoScope,omitempty" bson:"geoscope,omitempty" mapstructure:"geoScope,omitempty"`

	// The specific kind of the resource.
	Kind *GCPAssetKindValue `json:"kind,omitempty" msgpack:"kind,omitempty" bson:"kind,omitempty" mapstructure:"kind,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog *map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// The name of the resource.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// A numeric resource ID that will mainly be used in RQL queries.
	NumericID *string `json:"numericID,omitempty" msgpack:"numericID,omitempty" bson:"numericid,omitempty" mapstructure:"numericID,omitempty"`

	// The APIID of PrismaCloud resource.
	PrismaAPIID *int `json:"prismaAPIID,omitempty" msgpack:"prismaAPIID,omitempty" bson:"-" mapstructure:"prismaAPIID,omitempty"`

	// The resource identifier in PrismaCloud.
	PrismaRRN *string `json:"prismaRRN,omitempty" msgpack:"prismaRRN,omitempty" bson:"prismarrn,omitempty" mapstructure:"prismaRRN,omitempty"`

	// The region this resource exists in according to PrismaCloud. Note that the
	// resource may exists in a different region as described by GCP.
	PrismaRegion *string `json:"prismaRegion,omitempty" msgpack:"prismaRegion,omitempty" bson:"prismaregion,omitempty" mapstructure:"prismaRegion,omitempty"`

	// The ID of the project the resource belongs to in GCP.
	ProjectID *string `json:"projectID,omitempty" msgpack:"projectID,omitempty" bson:"projectid,omitempty" mapstructure:"projectID,omitempty"`

	// The identifier of the resource as presented by GCP, which is a URL.
	Selflink *string `json:"selflink,omitempty" msgpack:"selflink,omitempty" bson:"selflink,omitempty" mapstructure:"selflink,omitempty"`

	// User-defined key-value pairs inside the GCP resource.
	Tags *map[string]string `json:"tags,omitempty" msgpack:"tags,omitempty" bson:"tags,omitempty" mapstructure:"tags,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseGCPAsset returns a new  SparseGCPAsset.
func NewSparseGCPAsset() *SparseGCPAsset {
	return &SparseGCPAsset{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseGCPAsset) Identity() elemental.Identity {

	return GCPAssetIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseGCPAsset) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseGCPAsset) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseGCPAsset) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseGCPAsset{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Data != nil {
		s.Data = o.Data
	}
	if o.DenormedFields != nil {
		s.DenormedFields = o.DenormedFields
	}
	if o.GeoScope != nil {
		s.GeoScope = o.GeoScope
	}
	if o.Kind != nil {
		s.Kind = o.Kind
	}
	if o.MigrationsLog != nil {
		s.MigrationsLog = o.MigrationsLog
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.NumericID != nil {
		s.NumericID = o.NumericID
	}
	if o.PrismaRRN != nil {
		s.PrismaRRN = o.PrismaRRN
	}
	if o.PrismaRegion != nil {
		s.PrismaRegion = o.PrismaRegion
	}
	if o.ProjectID != nil {
		s.ProjectID = o.ProjectID
	}
	if o.Selflink != nil {
		s.Selflink = o.Selflink
	}
	if o.Tags != nil {
		s.Tags = o.Tags
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseGCPAsset) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseGCPAsset{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Data != nil {
		o.Data = s.Data
	}
	if s.DenormedFields != nil {
		o.DenormedFields = s.DenormedFields
	}
	if s.GeoScope != nil {
		o.GeoScope = s.GeoScope
	}
	if s.Kind != nil {
		o.Kind = s.Kind
	}
	if s.MigrationsLog != nil {
		o.MigrationsLog = s.MigrationsLog
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.NumericID != nil {
		o.NumericID = s.NumericID
	}
	if s.PrismaRRN != nil {
		o.PrismaRRN = s.PrismaRRN
	}
	if s.PrismaRegion != nil {
		o.PrismaRegion = s.PrismaRegion
	}
	if s.ProjectID != nil {
		o.ProjectID = s.ProjectID
	}
	if s.Selflink != nil {
		o.Selflink = s.Selflink
	}
	if s.Tags != nil {
		o.Tags = s.Tags
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseGCPAsset) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseGCPAsset) ToPlain() elemental.PlainIdentifiable {

	out := NewGCPAsset()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Data != nil {
		out.Data = *o.Data
	}
	if o.DenormedFields != nil {
		out.DenormedFields = *o.DenormedFields
	}
	if o.GeoScope != nil {
		out.GeoScope = *o.GeoScope
	}
	if o.Kind != nil {
		out.Kind = *o.Kind
	}
	if o.MigrationsLog != nil {
		out.MigrationsLog = *o.MigrationsLog
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.NumericID != nil {
		out.NumericID = *o.NumericID
	}
	if o.PrismaAPIID != nil {
		out.PrismaAPIID = *o.PrismaAPIID
	}
	if o.PrismaRRN != nil {
		out.PrismaRRN = *o.PrismaRRN
	}
	if o.PrismaRegion != nil {
		out.PrismaRegion = *o.PrismaRegion
	}
	if o.ProjectID != nil {
		out.ProjectID = *o.ProjectID
	}
	if o.Selflink != nil {
		out.Selflink = *o.Selflink
	}
	if o.Tags != nil {
		out.Tags = *o.Tags
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseGCPAsset) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseGCPAsset) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *SparseGCPAsset) GetMigrationsLog() (out map[string]string) {

	if o.MigrationsLog == nil {
		return
	}

	return *o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the address of the given value.
func (o *SparseGCPAsset) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = &migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseGCPAsset) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseGCPAsset) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseGCPAsset) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseGCPAsset) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseGCPAsset) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseGCPAsset) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseGCPAsset) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseGCPAsset) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseGCPAsset.
func (o *SparseGCPAsset) DeepCopy() *SparseGCPAsset {

	if o == nil {
		return nil
	}

	out := &SparseGCPAsset{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseGCPAsset.
func (o *SparseGCPAsset) DeepCopyInto(out *SparseGCPAsset) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseGCPAsset: %s", err))
	}

	*out = *target.(*SparseGCPAsset)
}

type mongoAttributesGCPAsset struct {
	ID             bson.ObjectId         `bson:"_id,omitempty"`
	CreateTime     time.Time             `bson:"createtime"`
	Data           []byte                `bson:"data"`
	DenormedFields []string              `bson:"denormedfields"`
	GeoScope       GCPAssetGeoScopeValue `bson:"geoscope"`
	Kind           GCPAssetKindValue     `bson:"kind"`
	MigrationsLog  map[string]string     `bson:"migrationslog,omitempty"`
	Name           string                `bson:"name"`
	Namespace      string                `bson:"namespace"`
	NumericID      string                `bson:"numericid"`
	PrismaRRN      string                `bson:"prismarrn,omitempty"`
	PrismaRegion   string                `bson:"prismaregion"`
	ProjectID      string                `bson:"projectid,omitempty"`
	Selflink       string                `bson:"selflink"`
	Tags           map[string]string     `bson:"tags"`
	UpdateTime     time.Time             `bson:"updatetime"`
	ZHash          int                   `bson:"zhash"`
	Zone           int                   `bson:"zone"`
}
type mongoAttributesSparseGCPAsset struct {
	ID             bson.ObjectId          `bson:"_id,omitempty"`
	CreateTime     *time.Time             `bson:"createtime,omitempty"`
	Data           *[]byte                `bson:"data,omitempty"`
	DenormedFields *[]string              `bson:"denormedfields,omitempty"`
	GeoScope       *GCPAssetGeoScopeValue `bson:"geoscope,omitempty"`
	Kind           *GCPAssetKindValue     `bson:"kind,omitempty"`
	MigrationsLog  *map[string]string     `bson:"migrationslog,omitempty"`
	Name           *string                `bson:"name,omitempty"`
	Namespace      *string                `bson:"namespace,omitempty"`
	NumericID      *string                `bson:"numericid,omitempty"`
	PrismaRRN      *string                `bson:"prismarrn,omitempty"`
	PrismaRegion   *string                `bson:"prismaregion,omitempty"`
	ProjectID      *string                `bson:"projectid,omitempty"`
	Selflink       *string                `bson:"selflink,omitempty"`
	Tags           *map[string]string     `bson:"tags,omitempty"`
	UpdateTime     *time.Time             `bson:"updatetime,omitempty"`
	ZHash          *int                   `bson:"zhash,omitempty"`
	Zone           *int                   `bson:"zone,omitempty"`
}
