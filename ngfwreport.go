// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// NGFWReportReportTypeValue represents the possible values for attribute "reportType".
type NGFWReportReportTypeValue string

const (
	// NGFWReportReportTypeNetworkingReport represents the value NetworkingReport.
	NGFWReportReportTypeNetworkingReport NGFWReportReportTypeValue = "NetworkingReport"

	// NGFWReportReportTypeSecurityReport represents the value SecurityReport.
	NGFWReportReportTypeSecurityReport NGFWReportReportTypeValue = "SecurityReport"
)

// NGFWReportIdentity represents the Identity of the object.
var NGFWReportIdentity = elemental.Identity{
	Name:     "ngfwreport",
	Category: "ngfwreports",
	Package:  "tbd",
	Private:  false,
}

// NGFWReportsList represents a list of NGFWReports
type NGFWReportsList []*NGFWReport

// Identity returns the identity of the objects in the list.
func (o NGFWReportsList) Identity() elemental.Identity {

	return NGFWReportIdentity
}

// Copy returns a pointer to a copy the NGFWReportsList.
func (o NGFWReportsList) Copy() elemental.Identifiables {

	copy := append(NGFWReportsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the NGFWReportsList.
func (o NGFWReportsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(NGFWReportsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*NGFWReport))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o NGFWReportsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o NGFWReportsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the NGFWReportsList converted to SparseNGFWReportsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o NGFWReportsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseNGFWReportsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseNGFWReport)
	}

	return out
}

// Version returns the version of the content.
func (o NGFWReportsList) Version() int {

	return 1
}

// NGFWReport represents the model of a ngfwreport
type NGFWReport struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Cloud NGFW instance for generated report.
	InstanceID string `json:"instanceID" msgpack:"instanceID" bson:"instanceid" mapstructure:"instanceID,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Type of Cloud NGFW report stored.
	ReportType NGFWReportReportTypeValue `json:"reportType" msgpack:"reportType" bson:"reporttype" mapstructure:"reportType,omitempty"`

	// Date of the report.
	Timestamp time.Time `json:"timestamp" msgpack:"timestamp" bson:"timestamp" mapstructure:"timestamp,omitempty"`

	// Top applications used for generated networking report.
	TopApplications map[string]int `json:"topApplications,omitempty" msgpack:"topApplications,omitempty" bson:"topapplications,omitempty" mapstructure:"topApplications,omitempty"`

	// Top attack categories used for generated security report.
	TopAttackCategories map[string]int `json:"topAttackCategories,omitempty" msgpack:"topAttackCategories,omitempty" bson:"topattackcategories,omitempty" mapstructure:"topAttackCategories,omitempty"`

	// Top applications attacked used for generated security report.
	TopAttackedApplications map[string]int `json:"topAttackedApplications,omitempty" msgpack:"topAttackedApplications,omitempty" bson:"topattackedapplications,omitempty" mapstructure:"topAttackedApplications,omitempty"`

	// Top destination IPs for victims used for generated security report.
	TopDestinationVictims map[string]int `json:"topDestinationVictims,omitempty" msgpack:"topDestinationVictims,omitempty" bson:"topdestinationvictims,omitempty" mapstructure:"topDestinationVictims,omitempty"`

	// Top IP destinations for generated networking report.
	TopDestinations map[string]int `json:"topDestinations,omitempty" msgpack:"topDestinations,omitempty" bson:"topdestinations,omitempty" mapstructure:"topDestinations,omitempty"`

	// Top detected attacks used for generated security report.
	TopDetectedAttacks map[string]int `json:"topDetectedAttacks,omitempty" msgpack:"topDetectedAttacks,omitempty" bson:"topdetectedattacks,omitempty" mapstructure:"topDetectedAttacks,omitempty"`

	// Top source IPs in attacks used for generated security report.
	TopSourceAttackers map[string]int `json:"topSourceAttackers,omitempty" msgpack:"topSourceAttackers,omitempty" bson:"topsourceattackers,omitempty" mapstructure:"topSourceAttackers,omitempty"`

	// Top IP sources for generated networking report.
	TopSources map[string]int `json:"topSources,omitempty" msgpack:"topSources,omitempty" bson:"topsources,omitempty" mapstructure:"topSources,omitempty"`

	// Total egress traffic in bytes for generated networking report.
	TotalEgress int `json:"totalEgress,omitempty" msgpack:"totalEgress,omitempty" bson:"totalegress,omitempty" mapstructure:"totalEgress,omitempty"`

	// Total ingress traffic in bytes for generated networking report.
	TotalIngress int `json:"totalIngress,omitempty" msgpack:"totalIngress,omitempty" bson:"totalingress,omitempty" mapstructure:"totalIngress,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewNGFWReport returns a new *NGFWReport
func NewNGFWReport() *NGFWReport {

	return &NGFWReport{
		ModelVersion:  1,
		MigrationsLog: map[string]string{},
		ReportType: []string{
			NGFWReportReportTypeNetworkingReport,
		},
		TopApplications:         map[string]int{},
		TopAttackCategories:     map[string]int{},
		TopAttackedApplications: map[string]int{},
		TopDestinationVictims:   map[string]int{},
		TopDestinations:         map[string]int{},
		TopDetectedAttacks:      map[string]int{},
		TopSourceAttackers:      map[string]int{},
		TopSources:              map[string]int{},
	}
}

// Identity returns the Identity of the object.
func (o *NGFWReport) Identity() elemental.Identity {

	return NGFWReportIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *NGFWReport) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *NGFWReport) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *NGFWReport) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesNGFWReport{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.InstanceID = o.InstanceID
	s.MigrationsLog = o.MigrationsLog
	s.Namespace = o.Namespace
	s.ReportType = o.ReportType
	s.Timestamp = o.Timestamp
	s.TopApplications = o.TopApplications
	s.TopAttackCategories = o.TopAttackCategories
	s.TopAttackedApplications = o.TopAttackedApplications
	s.TopDestinationVictims = o.TopDestinationVictims
	s.TopDestinations = o.TopDestinations
	s.TopDetectedAttacks = o.TopDetectedAttacks
	s.TopSourceAttackers = o.TopSourceAttackers
	s.TopSources = o.TopSources
	s.TotalEgress = o.TotalEgress
	s.TotalIngress = o.TotalIngress
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *NGFWReport) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesNGFWReport{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.InstanceID = s.InstanceID
	o.MigrationsLog = s.MigrationsLog
	o.Namespace = s.Namespace
	o.ReportType = s.ReportType
	o.Timestamp = s.Timestamp
	o.TopApplications = s.TopApplications
	o.TopAttackCategories = s.TopAttackCategories
	o.TopAttackedApplications = s.TopAttackedApplications
	o.TopDestinationVictims = s.TopDestinationVictims
	o.TopDestinations = s.TopDestinations
	o.TopDetectedAttacks = s.TopDetectedAttacks
	o.TopSourceAttackers = s.TopSourceAttackers
	o.TopSources = s.TopSources
	o.TotalEgress = s.TotalEgress
	o.TotalIngress = s.TotalIngress
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *NGFWReport) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *NGFWReport) BleveType() string {

	return "ngfwreport"
}

// DefaultOrder returns the list of default ordering fields.
func (o *NGFWReport) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *NGFWReport) Doc() string {

	return `Defines a Next-Generation Firewall (NGFW) report.`
}

func (o *NGFWReport) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *NGFWReport) GetMigrationsLog() map[string]string {

	return o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the given value.
func (o *NGFWReport) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *NGFWReport) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *NGFWReport) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetZHash returns the ZHash of the receiver.
func (o *NGFWReport) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *NGFWReport) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *NGFWReport) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *NGFWReport) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *NGFWReport) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseNGFWReport{
			ID:                      &o.ID,
			InstanceID:              &o.InstanceID,
			MigrationsLog:           &o.MigrationsLog,
			Namespace:               &o.Namespace,
			ReportType:              &o.ReportType,
			Timestamp:               &o.Timestamp,
			TopApplications:         &o.TopApplications,
			TopAttackCategories:     &o.TopAttackCategories,
			TopAttackedApplications: &o.TopAttackedApplications,
			TopDestinationVictims:   &o.TopDestinationVictims,
			TopDestinations:         &o.TopDestinations,
			TopDetectedAttacks:      &o.TopDetectedAttacks,
			TopSourceAttackers:      &o.TopSourceAttackers,
			TopSources:              &o.TopSources,
			TotalEgress:             &o.TotalEgress,
			TotalIngress:            &o.TotalIngress,
			ZHash:                   &o.ZHash,
			Zone:                    &o.Zone,
		}
	}

	sp := &SparseNGFWReport{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "instanceID":
			sp.InstanceID = &(o.InstanceID)
		case "migrationsLog":
			sp.MigrationsLog = &(o.MigrationsLog)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "reportType":
			sp.ReportType = &(o.ReportType)
		case "timestamp":
			sp.Timestamp = &(o.Timestamp)
		case "topApplications":
			sp.TopApplications = &(o.TopApplications)
		case "topAttackCategories":
			sp.TopAttackCategories = &(o.TopAttackCategories)
		case "topAttackedApplications":
			sp.TopAttackedApplications = &(o.TopAttackedApplications)
		case "topDestinationVictims":
			sp.TopDestinationVictims = &(o.TopDestinationVictims)
		case "topDestinations":
			sp.TopDestinations = &(o.TopDestinations)
		case "topDetectedAttacks":
			sp.TopDetectedAttacks = &(o.TopDetectedAttacks)
		case "topSourceAttackers":
			sp.TopSourceAttackers = &(o.TopSourceAttackers)
		case "topSources":
			sp.TopSources = &(o.TopSources)
		case "totalEgress":
			sp.TotalEgress = &(o.TotalEgress)
		case "totalIngress":
			sp.TotalIngress = &(o.TotalIngress)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseNGFWReport to the object.
func (o *NGFWReport) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseNGFWReport)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.InstanceID != nil {
		o.InstanceID = *so.InstanceID
	}
	if so.MigrationsLog != nil {
		o.MigrationsLog = *so.MigrationsLog
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.ReportType != nil {
		o.ReportType = *so.ReportType
	}
	if so.Timestamp != nil {
		o.Timestamp = *so.Timestamp
	}
	if so.TopApplications != nil {
		o.TopApplications = *so.TopApplications
	}
	if so.TopAttackCategories != nil {
		o.TopAttackCategories = *so.TopAttackCategories
	}
	if so.TopAttackedApplications != nil {
		o.TopAttackedApplications = *so.TopAttackedApplications
	}
	if so.TopDestinationVictims != nil {
		o.TopDestinationVictims = *so.TopDestinationVictims
	}
	if so.TopDestinations != nil {
		o.TopDestinations = *so.TopDestinations
	}
	if so.TopDetectedAttacks != nil {
		o.TopDetectedAttacks = *so.TopDetectedAttacks
	}
	if so.TopSourceAttackers != nil {
		o.TopSourceAttackers = *so.TopSourceAttackers
	}
	if so.TopSources != nil {
		o.TopSources = *so.TopSources
	}
	if so.TotalEgress != nil {
		o.TotalEgress = *so.TotalEgress
	}
	if so.TotalIngress != nil {
		o.TotalIngress = *so.TotalIngress
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the NGFWReport.
func (o *NGFWReport) DeepCopy() *NGFWReport {

	if o == nil {
		return nil
	}

	out := &NGFWReport{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *NGFWReport.
func (o *NGFWReport) DeepCopyInto(out *NGFWReport) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy NGFWReport: %s", err))
	}

	*out = *target.(*NGFWReport)
}

// Validate valides the current information stored into the structure.
func (o *NGFWReport) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("instanceID", o.InstanceID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("reportType", string(o.ReportType)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("reportType", string(o.ReportType), []string{"NetworkingReport", "SecurityReport"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredTime("timestamp", o.Timestamp); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*NGFWReport) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := NGFWReportAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return NGFWReportLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*NGFWReport) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return NGFWReportAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *NGFWReport) ValueForAttribute(name string) interface{} {

	switch name {
	case "ID":
		return o.ID
	case "instanceID":
		return o.InstanceID
	case "migrationsLog":
		return o.MigrationsLog
	case "namespace":
		return o.Namespace
	case "reportType":
		return o.ReportType
	case "timestamp":
		return o.Timestamp
	case "topApplications":
		return o.TopApplications
	case "topAttackCategories":
		return o.TopAttackCategories
	case "topAttackedApplications":
		return o.TopAttackedApplications
	case "topDestinationVictims":
		return o.TopDestinationVictims
	case "topDestinations":
		return o.TopDestinations
	case "topDetectedAttacks":
		return o.TopDetectedAttacks
	case "topSourceAttackers":
		return o.TopSourceAttackers
	case "topSources":
		return o.TopSources
	case "totalEgress":
		return o.TotalEgress
	case "totalIngress":
		return o.TotalIngress
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// NGFWReportAttributesMap represents the map of attribute for NGFWReport.
var NGFWReportAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"InstanceID": {
		AllowedChoices: []string{},
		BSONFieldName:  "instanceid",
		ConvertedName:  "InstanceID",
		Description:    `Cloud NGFW instance for generated report.`,
		Exposed:        true,
		Name:           "instanceID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"MigrationsLog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ReportType": {
		AllowedChoices: []string{"NetworkingReport", "SecurityReport"},
		BSONFieldName:  "reporttype",
		ConvertedName:  "ReportType",
		DefaultValue: []string{
			NGFWReportReportTypeNetworkingReport,
		},
		Description: `Type of Cloud NGFW report stored.`,
		Exposed:     true,
		Name:        "reportType",
		Required:    true,
		Stored:      true,
		Type:        "enum",
	},
	"Timestamp": {
		AllowedChoices: []string{},
		BSONFieldName:  "timestamp",
		ConvertedName:  "Timestamp",
		Description:    `Date of the report.`,
		Exposed:        true,
		Name:           "timestamp",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"TopApplications": {
		AllowedChoices: []string{},
		BSONFieldName:  "topapplications",
		ConvertedName:  "TopApplications",
		Description:    `Top applications used for generated networking report.`,
		Exposed:        true,
		Name:           "topApplications",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"TopAttackCategories": {
		AllowedChoices: []string{},
		BSONFieldName:  "topattackcategories",
		ConvertedName:  "TopAttackCategories",
		Description:    `Top attack categories used for generated security report.`,
		Exposed:        true,
		Name:           "topAttackCategories",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"TopAttackedApplications": {
		AllowedChoices: []string{},
		BSONFieldName:  "topattackedapplications",
		ConvertedName:  "TopAttackedApplications",
		Description:    `Top applications attacked used for generated security report.`,
		Exposed:        true,
		Name:           "topAttackedApplications",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"TopDestinationVictims": {
		AllowedChoices: []string{},
		BSONFieldName:  "topdestinationvictims",
		ConvertedName:  "TopDestinationVictims",
		Description:    `Top destination IPs for victims used for generated security report.`,
		Exposed:        true,
		Name:           "topDestinationVictims",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"TopDestinations": {
		AllowedChoices: []string{},
		BSONFieldName:  "topdestinations",
		ConvertedName:  "TopDestinations",
		Description:    `Top IP destinations for generated networking report.`,
		Exposed:        true,
		Name:           "topDestinations",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"TopDetectedAttacks": {
		AllowedChoices: []string{},
		BSONFieldName:  "topdetectedattacks",
		ConvertedName:  "TopDetectedAttacks",
		Description:    `Top detected attacks used for generated security report.`,
		Exposed:        true,
		Name:           "topDetectedAttacks",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"TopSourceAttackers": {
		AllowedChoices: []string{},
		BSONFieldName:  "topsourceattackers",
		ConvertedName:  "TopSourceAttackers",
		Description:    `Top source IPs in attacks used for generated security report.`,
		Exposed:        true,
		Name:           "topSourceAttackers",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"TopSources": {
		AllowedChoices: []string{},
		BSONFieldName:  "topsources",
		ConvertedName:  "TopSources",
		Description:    `Top IP sources for generated networking report.`,
		Exposed:        true,
		Name:           "topSources",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"TotalEgress": {
		AllowedChoices: []string{},
		BSONFieldName:  "totalegress",
		ConvertedName:  "TotalEgress",
		Description:    `Total egress traffic in bytes for generated networking report.`,
		Exposed:        true,
		Name:           "totalEgress",
		Stored:         true,
		Type:           "integer",
	},
	"TotalIngress": {
		AllowedChoices: []string{},
		BSONFieldName:  "totalingress",
		ConvertedName:  "TotalIngress",
		Description:    `Total ingress traffic in bytes for generated networking report.`,
		Exposed:        true,
		Name:           "totalIngress",
		Stored:         true,
		Type:           "integer",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// NGFWReportLowerCaseAttributesMap represents the map of attribute for NGFWReport.
var NGFWReportLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"instanceid": {
		AllowedChoices: []string{},
		BSONFieldName:  "instanceid",
		ConvertedName:  "InstanceID",
		Description:    `Cloud NGFW instance for generated report.`,
		Exposed:        true,
		Name:           "instanceID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"migrationslog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"reporttype": {
		AllowedChoices: []string{"NetworkingReport", "SecurityReport"},
		BSONFieldName:  "reporttype",
		ConvertedName:  "ReportType",
		DefaultValue: []string{
			NGFWReportReportTypeNetworkingReport,
		},
		Description: `Type of Cloud NGFW report stored.`,
		Exposed:     true,
		Name:        "reportType",
		Required:    true,
		Stored:      true,
		Type:        "enum",
	},
	"timestamp": {
		AllowedChoices: []string{},
		BSONFieldName:  "timestamp",
		ConvertedName:  "Timestamp",
		Description:    `Date of the report.`,
		Exposed:        true,
		Name:           "timestamp",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
	"topapplications": {
		AllowedChoices: []string{},
		BSONFieldName:  "topapplications",
		ConvertedName:  "TopApplications",
		Description:    `Top applications used for generated networking report.`,
		Exposed:        true,
		Name:           "topApplications",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"topattackcategories": {
		AllowedChoices: []string{},
		BSONFieldName:  "topattackcategories",
		ConvertedName:  "TopAttackCategories",
		Description:    `Top attack categories used for generated security report.`,
		Exposed:        true,
		Name:           "topAttackCategories",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"topattackedapplications": {
		AllowedChoices: []string{},
		BSONFieldName:  "topattackedapplications",
		ConvertedName:  "TopAttackedApplications",
		Description:    `Top applications attacked used for generated security report.`,
		Exposed:        true,
		Name:           "topAttackedApplications",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"topdestinationvictims": {
		AllowedChoices: []string{},
		BSONFieldName:  "topdestinationvictims",
		ConvertedName:  "TopDestinationVictims",
		Description:    `Top destination IPs for victims used for generated security report.`,
		Exposed:        true,
		Name:           "topDestinationVictims",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"topdestinations": {
		AllowedChoices: []string{},
		BSONFieldName:  "topdestinations",
		ConvertedName:  "TopDestinations",
		Description:    `Top IP destinations for generated networking report.`,
		Exposed:        true,
		Name:           "topDestinations",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"topdetectedattacks": {
		AllowedChoices: []string{},
		BSONFieldName:  "topdetectedattacks",
		ConvertedName:  "TopDetectedAttacks",
		Description:    `Top detected attacks used for generated security report.`,
		Exposed:        true,
		Name:           "topDetectedAttacks",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"topsourceattackers": {
		AllowedChoices: []string{},
		BSONFieldName:  "topsourceattackers",
		ConvertedName:  "TopSourceAttackers",
		Description:    `Top source IPs in attacks used for generated security report.`,
		Exposed:        true,
		Name:           "topSourceAttackers",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"topsources": {
		AllowedChoices: []string{},
		BSONFieldName:  "topsources",
		ConvertedName:  "TopSources",
		Description:    `Top IP sources for generated networking report.`,
		Exposed:        true,
		Name:           "topSources",
		Stored:         true,
		SubType:        "map[string]int",
		Type:           "external",
	},
	"totalegress": {
		AllowedChoices: []string{},
		BSONFieldName:  "totalegress",
		ConvertedName:  "TotalEgress",
		Description:    `Total egress traffic in bytes for generated networking report.`,
		Exposed:        true,
		Name:           "totalEgress",
		Stored:         true,
		Type:           "integer",
	},
	"totalingress": {
		AllowedChoices: []string{},
		BSONFieldName:  "totalingress",
		ConvertedName:  "TotalIngress",
		Description:    `Total ingress traffic in bytes for generated networking report.`,
		Exposed:        true,
		Name:           "totalIngress",
		Stored:         true,
		Type:           "integer",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseNGFWReportsList represents a list of SparseNGFWReports
type SparseNGFWReportsList []*SparseNGFWReport

// Identity returns the identity of the objects in the list.
func (o SparseNGFWReportsList) Identity() elemental.Identity {

	return NGFWReportIdentity
}

// Copy returns a pointer to a copy the SparseNGFWReportsList.
func (o SparseNGFWReportsList) Copy() elemental.Identifiables {

	copy := append(SparseNGFWReportsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseNGFWReportsList.
func (o SparseNGFWReportsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseNGFWReportsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseNGFWReport))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseNGFWReportsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseNGFWReportsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseNGFWReportsList converted to NGFWReportsList.
func (o SparseNGFWReportsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseNGFWReportsList) Version() int {

	return 1
}

// SparseNGFWReport represents the sparse version of a ngfwreport.
type SparseNGFWReport struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Cloud NGFW instance for generated report.
	InstanceID *string `json:"instanceID,omitempty" msgpack:"instanceID,omitempty" bson:"instanceid,omitempty" mapstructure:"instanceID,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog *map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Type of Cloud NGFW report stored.
	ReportType *NGFWReportReportTypeValue `json:"reportType,omitempty" msgpack:"reportType,omitempty" bson:"reporttype,omitempty" mapstructure:"reportType,omitempty"`

	// Date of the report.
	Timestamp *time.Time `json:"timestamp,omitempty" msgpack:"timestamp,omitempty" bson:"timestamp,omitempty" mapstructure:"timestamp,omitempty"`

	// Top applications used for generated networking report.
	TopApplications *map[string]int `json:"topApplications,omitempty" msgpack:"topApplications,omitempty" bson:"topapplications,omitempty" mapstructure:"topApplications,omitempty"`

	// Top attack categories used for generated security report.
	TopAttackCategories *map[string]int `json:"topAttackCategories,omitempty" msgpack:"topAttackCategories,omitempty" bson:"topattackcategories,omitempty" mapstructure:"topAttackCategories,omitempty"`

	// Top applications attacked used for generated security report.
	TopAttackedApplications *map[string]int `json:"topAttackedApplications,omitempty" msgpack:"topAttackedApplications,omitempty" bson:"topattackedapplications,omitempty" mapstructure:"topAttackedApplications,omitempty"`

	// Top destination IPs for victims used for generated security report.
	TopDestinationVictims *map[string]int `json:"topDestinationVictims,omitempty" msgpack:"topDestinationVictims,omitempty" bson:"topdestinationvictims,omitempty" mapstructure:"topDestinationVictims,omitempty"`

	// Top IP destinations for generated networking report.
	TopDestinations *map[string]int `json:"topDestinations,omitempty" msgpack:"topDestinations,omitempty" bson:"topdestinations,omitempty" mapstructure:"topDestinations,omitempty"`

	// Top detected attacks used for generated security report.
	TopDetectedAttacks *map[string]int `json:"topDetectedAttacks,omitempty" msgpack:"topDetectedAttacks,omitempty" bson:"topdetectedattacks,omitempty" mapstructure:"topDetectedAttacks,omitempty"`

	// Top source IPs in attacks used for generated security report.
	TopSourceAttackers *map[string]int `json:"topSourceAttackers,omitempty" msgpack:"topSourceAttackers,omitempty" bson:"topsourceattackers,omitempty" mapstructure:"topSourceAttackers,omitempty"`

	// Top IP sources for generated networking report.
	TopSources *map[string]int `json:"topSources,omitempty" msgpack:"topSources,omitempty" bson:"topsources,omitempty" mapstructure:"topSources,omitempty"`

	// Total egress traffic in bytes for generated networking report.
	TotalEgress *int `json:"totalEgress,omitempty" msgpack:"totalEgress,omitempty" bson:"totalegress,omitempty" mapstructure:"totalEgress,omitempty"`

	// Total ingress traffic in bytes for generated networking report.
	TotalIngress *int `json:"totalIngress,omitempty" msgpack:"totalIngress,omitempty" bson:"totalingress,omitempty" mapstructure:"totalIngress,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseNGFWReport returns a new  SparseNGFWReport.
func NewSparseNGFWReport() *SparseNGFWReport {
	return &SparseNGFWReport{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseNGFWReport) Identity() elemental.Identity {

	return NGFWReportIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseNGFWReport) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseNGFWReport) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseNGFWReport) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseNGFWReport{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.InstanceID != nil {
		s.InstanceID = o.InstanceID
	}
	if o.MigrationsLog != nil {
		s.MigrationsLog = o.MigrationsLog
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.ReportType != nil {
		s.ReportType = o.ReportType
	}
	if o.Timestamp != nil {
		s.Timestamp = o.Timestamp
	}
	if o.TopApplications != nil {
		s.TopApplications = o.TopApplications
	}
	if o.TopAttackCategories != nil {
		s.TopAttackCategories = o.TopAttackCategories
	}
	if o.TopAttackedApplications != nil {
		s.TopAttackedApplications = o.TopAttackedApplications
	}
	if o.TopDestinationVictims != nil {
		s.TopDestinationVictims = o.TopDestinationVictims
	}
	if o.TopDestinations != nil {
		s.TopDestinations = o.TopDestinations
	}
	if o.TopDetectedAttacks != nil {
		s.TopDetectedAttacks = o.TopDetectedAttacks
	}
	if o.TopSourceAttackers != nil {
		s.TopSourceAttackers = o.TopSourceAttackers
	}
	if o.TopSources != nil {
		s.TopSources = o.TopSources
	}
	if o.TotalEgress != nil {
		s.TotalEgress = o.TotalEgress
	}
	if o.TotalIngress != nil {
		s.TotalIngress = o.TotalIngress
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseNGFWReport) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseNGFWReport{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.InstanceID != nil {
		o.InstanceID = s.InstanceID
	}
	if s.MigrationsLog != nil {
		o.MigrationsLog = s.MigrationsLog
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.ReportType != nil {
		o.ReportType = s.ReportType
	}
	if s.Timestamp != nil {
		o.Timestamp = s.Timestamp
	}
	if s.TopApplications != nil {
		o.TopApplications = s.TopApplications
	}
	if s.TopAttackCategories != nil {
		o.TopAttackCategories = s.TopAttackCategories
	}
	if s.TopAttackedApplications != nil {
		o.TopAttackedApplications = s.TopAttackedApplications
	}
	if s.TopDestinationVictims != nil {
		o.TopDestinationVictims = s.TopDestinationVictims
	}
	if s.TopDestinations != nil {
		o.TopDestinations = s.TopDestinations
	}
	if s.TopDetectedAttacks != nil {
		o.TopDetectedAttacks = s.TopDetectedAttacks
	}
	if s.TopSourceAttackers != nil {
		o.TopSourceAttackers = s.TopSourceAttackers
	}
	if s.TopSources != nil {
		o.TopSources = s.TopSources
	}
	if s.TotalEgress != nil {
		o.TotalEgress = s.TotalEgress
	}
	if s.TotalIngress != nil {
		o.TotalIngress = s.TotalIngress
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseNGFWReport) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseNGFWReport) ToPlain() elemental.PlainIdentifiable {

	out := NewNGFWReport()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.InstanceID != nil {
		out.InstanceID = *o.InstanceID
	}
	if o.MigrationsLog != nil {
		out.MigrationsLog = *o.MigrationsLog
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.ReportType != nil {
		out.ReportType = *o.ReportType
	}
	if o.Timestamp != nil {
		out.Timestamp = *o.Timestamp
	}
	if o.TopApplications != nil {
		out.TopApplications = *o.TopApplications
	}
	if o.TopAttackCategories != nil {
		out.TopAttackCategories = *o.TopAttackCategories
	}
	if o.TopAttackedApplications != nil {
		out.TopAttackedApplications = *o.TopAttackedApplications
	}
	if o.TopDestinationVictims != nil {
		out.TopDestinationVictims = *o.TopDestinationVictims
	}
	if o.TopDestinations != nil {
		out.TopDestinations = *o.TopDestinations
	}
	if o.TopDetectedAttacks != nil {
		out.TopDetectedAttacks = *o.TopDetectedAttacks
	}
	if o.TopSourceAttackers != nil {
		out.TopSourceAttackers = *o.TopSourceAttackers
	}
	if o.TopSources != nil {
		out.TopSources = *o.TopSources
	}
	if o.TotalEgress != nil {
		out.TotalEgress = *o.TotalEgress
	}
	if o.TotalIngress != nil {
		out.TotalIngress = *o.TotalIngress
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *SparseNGFWReport) GetMigrationsLog() (out map[string]string) {

	if o.MigrationsLog == nil {
		return
	}

	return *o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the address of the given value.
func (o *SparseNGFWReport) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = &migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseNGFWReport) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseNGFWReport) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseNGFWReport) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseNGFWReport) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseNGFWReport) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseNGFWReport) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseNGFWReport.
func (o *SparseNGFWReport) DeepCopy() *SparseNGFWReport {

	if o == nil {
		return nil
	}

	out := &SparseNGFWReport{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseNGFWReport.
func (o *SparseNGFWReport) DeepCopyInto(out *SparseNGFWReport) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseNGFWReport: %s", err))
	}

	*out = *target.(*SparseNGFWReport)
}

type mongoAttributesNGFWReport struct {
	ID                      bson.ObjectId             `bson:"_id,omitempty"`
	InstanceID              string                    `bson:"instanceid"`
	MigrationsLog           map[string]string         `bson:"migrationslog,omitempty"`
	Namespace               string                    `bson:"namespace"`
	ReportType              NGFWReportReportTypeValue `bson:"reporttype"`
	Timestamp               time.Time                 `bson:"timestamp"`
	TopApplications         map[string]int            `bson:"topapplications,omitempty"`
	TopAttackCategories     map[string]int            `bson:"topattackcategories,omitempty"`
	TopAttackedApplications map[string]int            `bson:"topattackedapplications,omitempty"`
	TopDestinationVictims   map[string]int            `bson:"topdestinationvictims,omitempty"`
	TopDestinations         map[string]int            `bson:"topdestinations,omitempty"`
	TopDetectedAttacks      map[string]int            `bson:"topdetectedattacks,omitempty"`
	TopSourceAttackers      map[string]int            `bson:"topsourceattackers,omitempty"`
	TopSources              map[string]int            `bson:"topsources,omitempty"`
	TotalEgress             int                       `bson:"totalegress,omitempty"`
	TotalIngress            int                       `bson:"totalingress,omitempty"`
	ZHash                   int                       `bson:"zhash"`
	Zone                    int                       `bson:"zone"`
}
type mongoAttributesSparseNGFWReport struct {
	ID                      bson.ObjectId              `bson:"_id,omitempty"`
	InstanceID              *string                    `bson:"instanceid,omitempty"`
	MigrationsLog           *map[string]string         `bson:"migrationslog,omitempty"`
	Namespace               *string                    `bson:"namespace,omitempty"`
	ReportType              *NGFWReportReportTypeValue `bson:"reporttype,omitempty"`
	Timestamp               *time.Time                 `bson:"timestamp,omitempty"`
	TopApplications         *map[string]int            `bson:"topapplications,omitempty"`
	TopAttackCategories     *map[string]int            `bson:"topattackcategories,omitempty"`
	TopAttackedApplications *map[string]int            `bson:"topattackedapplications,omitempty"`
	TopDestinationVictims   *map[string]int            `bson:"topdestinationvictims,omitempty"`
	TopDestinations         *map[string]int            `bson:"topdestinations,omitempty"`
	TopDetectedAttacks      *map[string]int            `bson:"topdetectedattacks,omitempty"`
	TopSourceAttackers      *map[string]int            `bson:"topsourceattackers,omitempty"`
	TopSources              *map[string]int            `bson:"topsources,omitempty"`
	TotalEgress             *int                       `bson:"totalegress,omitempty"`
	TotalIngress            *int                       `bson:"totalingress,omitempty"`
	ZHash                   *int                       `bson:"zhash,omitempty"`
	Zone                    *int                       `bson:"zone,omitempty"`
}
