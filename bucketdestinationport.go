// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// BucketDestinationPortIdentity represents the Identity of the object.
var BucketDestinationPortIdentity = elemental.Identity{
	Name:     "bucketdestinationport",
	Category: "bucketdestinationports",
	Package:  "agrias",
	Private:  false,
}

// BucketDestinationPortsList represents a list of BucketDestinationPorts
type BucketDestinationPortsList []*BucketDestinationPort

// Identity returns the identity of the objects in the list.
func (o BucketDestinationPortsList) Identity() elemental.Identity {

	return BucketDestinationPortIdentity
}

// Copy returns a pointer to a copy the BucketDestinationPortsList.
func (o BucketDestinationPortsList) Copy() elemental.Identifiables {

	copy := append(BucketDestinationPortsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the BucketDestinationPortsList.
func (o BucketDestinationPortsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(BucketDestinationPortsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*BucketDestinationPort))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o BucketDestinationPortsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o BucketDestinationPortsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the BucketDestinationPortsList converted to SparseBucketDestinationPortsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o BucketDestinationPortsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseBucketDestinationPortsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseBucketDestinationPort)
	}

	return out
}

// Version returns the version of the content.
func (o BucketDestinationPortsList) Version() int {

	return 1
}

// BucketDestinationPort represents the model of a bucketdestinationport
type BucketDestinationPort struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// The date that the bucket tracks.
	Date string `json:"date" msgpack:"date" bson:"date" mapstructure:"date,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Ports encountered and number of occurrences seen.
	Ports map[string][]*BucketEntry `json:"ports,omitempty" msgpack:"ports,omitempty" bson:"ports,omitempty" mapstructure:"ports,omitempty"`

	// List of most encountered ports, sorted by occurrences.
	TopPorts []*BucketTopEntry `json:"topPorts,omitempty" msgpack:"topPorts,omitempty" bson:"-" mapstructure:"topPorts,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewBucketDestinationPort returns a new *BucketDestinationPort
func NewBucketDestinationPort() *BucketDestinationPort {

	return &BucketDestinationPort{
		ModelVersion:  1,
		MigrationsLog: map[string]string{},
		Ports:         map[string][]*BucketEntry{},
		TopPorts:      []*BucketTopEntry{},
	}
}

// Identity returns the Identity of the object.
func (o *BucketDestinationPort) Identity() elemental.Identity {

	return BucketDestinationPortIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *BucketDestinationPort) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *BucketDestinationPort) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *BucketDestinationPort) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesBucketDestinationPort{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Date = o.Date
	s.MigrationsLog = o.MigrationsLog
	s.Namespace = o.Namespace
	s.Ports = o.Ports
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *BucketDestinationPort) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesBucketDestinationPort{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Date = s.Date
	o.MigrationsLog = s.MigrationsLog
	o.Namespace = s.Namespace
	o.Ports = s.Ports
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *BucketDestinationPort) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *BucketDestinationPort) BleveType() string {

	return "bucketdestinationport"
}

// DefaultOrder returns the list of default ordering fields.
func (o *BucketDestinationPort) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *BucketDestinationPort) Doc() string {

	return `Holds the destination ports of flows across 24 hours (beginning of a day to
the end).`
}

func (o *BucketDestinationPort) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *BucketDestinationPort) GetMigrationsLog() map[string]string {

	return o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the given value.
func (o *BucketDestinationPort) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *BucketDestinationPort) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *BucketDestinationPort) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetZHash returns the ZHash of the receiver.
func (o *BucketDestinationPort) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *BucketDestinationPort) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *BucketDestinationPort) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *BucketDestinationPort) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *BucketDestinationPort) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseBucketDestinationPort{
			ID:            &o.ID,
			Date:          &o.Date,
			MigrationsLog: &o.MigrationsLog,
			Namespace:     &o.Namespace,
			Ports:         &o.Ports,
			TopPorts:      &o.TopPorts,
			ZHash:         &o.ZHash,
			Zone:          &o.Zone,
		}
	}

	sp := &SparseBucketDestinationPort{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "date":
			sp.Date = &(o.Date)
		case "migrationsLog":
			sp.MigrationsLog = &(o.MigrationsLog)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "ports":
			sp.Ports = &(o.Ports)
		case "topPorts":
			sp.TopPorts = &(o.TopPorts)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseBucketDestinationPort to the object.
func (o *BucketDestinationPort) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseBucketDestinationPort)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Date != nil {
		o.Date = *so.Date
	}
	if so.MigrationsLog != nil {
		o.MigrationsLog = *so.MigrationsLog
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Ports != nil {
		o.Ports = *so.Ports
	}
	if so.TopPorts != nil {
		o.TopPorts = *so.TopPorts
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the BucketDestinationPort.
func (o *BucketDestinationPort) DeepCopy() *BucketDestinationPort {

	if o == nil {
		return nil
	}

	out := &BucketDestinationPort{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *BucketDestinationPort.
func (o *BucketDestinationPort) DeepCopyInto(out *BucketDestinationPort) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy BucketDestinationPort: %s", err))
	}

	*out = *target.(*BucketDestinationPort)
}

// Validate valides the current information stored into the structure.
func (o *BucketDestinationPort) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("date", o.Date); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.TopPorts {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*BucketDestinationPort) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := BucketDestinationPortAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return BucketDestinationPortLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*BucketDestinationPort) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return BucketDestinationPortAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *BucketDestinationPort) ValueForAttribute(name string) interface{} {

	switch name {
	case "ID":
		return o.ID
	case "date":
		return o.Date
	case "migrationsLog":
		return o.MigrationsLog
	case "namespace":
		return o.Namespace
	case "ports":
		return o.Ports
	case "topPorts":
		return o.TopPorts
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// BucketDestinationPortAttributesMap represents the map of attribute for BucketDestinationPort.
var BucketDestinationPortAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Date": {
		AllowedChoices: []string{},
		BSONFieldName:  "date",
		ConvertedName:  "Date",
		CreationOnly:   true,
		Description:    `The date that the bucket tracks.`,
		Exposed:        true,
		Name:           "date",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"MigrationsLog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Ports": {
		AllowedChoices: []string{},
		BSONFieldName:  "ports",
		ConvertedName:  "Ports",
		Description:    `Ports encountered and number of occurrences seen.`,
		Exposed:        true,
		Name:           "ports",
		Stored:         true,
		SubType:        "map[string][]bucketentry",
		Type:           "external",
	},
	"TopPorts": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "TopPorts",
		Description:    `List of most encountered ports, sorted by occurrences.`,
		Exposed:        true,
		Name:           "topPorts",
		ReadOnly:       true,
		SubType:        "buckettopentry",
		Type:           "refList",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// BucketDestinationPortLowerCaseAttributesMap represents the map of attribute for BucketDestinationPort.
var BucketDestinationPortLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"date": {
		AllowedChoices: []string{},
		BSONFieldName:  "date",
		ConvertedName:  "Date",
		CreationOnly:   true,
		Description:    `The date that the bucket tracks.`,
		Exposed:        true,
		Name:           "date",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"migrationslog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"ports": {
		AllowedChoices: []string{},
		BSONFieldName:  "ports",
		ConvertedName:  "Ports",
		Description:    `Ports encountered and number of occurrences seen.`,
		Exposed:        true,
		Name:           "ports",
		Stored:         true,
		SubType:        "map[string][]bucketentry",
		Type:           "external",
	},
	"topports": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "TopPorts",
		Description:    `List of most encountered ports, sorted by occurrences.`,
		Exposed:        true,
		Name:           "topPorts",
		ReadOnly:       true,
		SubType:        "buckettopentry",
		Type:           "refList",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseBucketDestinationPortsList represents a list of SparseBucketDestinationPorts
type SparseBucketDestinationPortsList []*SparseBucketDestinationPort

// Identity returns the identity of the objects in the list.
func (o SparseBucketDestinationPortsList) Identity() elemental.Identity {

	return BucketDestinationPortIdentity
}

// Copy returns a pointer to a copy the SparseBucketDestinationPortsList.
func (o SparseBucketDestinationPortsList) Copy() elemental.Identifiables {

	copy := append(SparseBucketDestinationPortsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseBucketDestinationPortsList.
func (o SparseBucketDestinationPortsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseBucketDestinationPortsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseBucketDestinationPort))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseBucketDestinationPortsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseBucketDestinationPortsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseBucketDestinationPortsList converted to BucketDestinationPortsList.
func (o SparseBucketDestinationPortsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseBucketDestinationPortsList) Version() int {

	return 1
}

// SparseBucketDestinationPort represents the sparse version of a bucketdestinationport.
type SparseBucketDestinationPort struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The date that the bucket tracks.
	Date *string `json:"date,omitempty" msgpack:"date,omitempty" bson:"date,omitempty" mapstructure:"date,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog *map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Ports encountered and number of occurrences seen.
	Ports *map[string][]*BucketEntry `json:"ports,omitempty" msgpack:"ports,omitempty" bson:"ports,omitempty" mapstructure:"ports,omitempty"`

	// List of most encountered ports, sorted by occurrences.
	TopPorts *[]*BucketTopEntry `json:"topPorts,omitempty" msgpack:"topPorts,omitempty" bson:"-" mapstructure:"topPorts,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseBucketDestinationPort returns a new  SparseBucketDestinationPort.
func NewSparseBucketDestinationPort() *SparseBucketDestinationPort {
	return &SparseBucketDestinationPort{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseBucketDestinationPort) Identity() elemental.Identity {

	return BucketDestinationPortIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseBucketDestinationPort) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseBucketDestinationPort) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseBucketDestinationPort) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseBucketDestinationPort{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Date != nil {
		s.Date = o.Date
	}
	if o.MigrationsLog != nil {
		s.MigrationsLog = o.MigrationsLog
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.Ports != nil {
		s.Ports = o.Ports
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseBucketDestinationPort) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseBucketDestinationPort{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Date != nil {
		o.Date = s.Date
	}
	if s.MigrationsLog != nil {
		o.MigrationsLog = s.MigrationsLog
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.Ports != nil {
		o.Ports = s.Ports
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseBucketDestinationPort) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseBucketDestinationPort) ToPlain() elemental.PlainIdentifiable {

	out := NewBucketDestinationPort()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Date != nil {
		out.Date = *o.Date
	}
	if o.MigrationsLog != nil {
		out.MigrationsLog = *o.MigrationsLog
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Ports != nil {
		out.Ports = *o.Ports
	}
	if o.TopPorts != nil {
		out.TopPorts = *o.TopPorts
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *SparseBucketDestinationPort) GetMigrationsLog() (out map[string]string) {

	if o.MigrationsLog == nil {
		return
	}

	return *o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the address of the given value.
func (o *SparseBucketDestinationPort) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = &migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseBucketDestinationPort) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseBucketDestinationPort) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseBucketDestinationPort) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseBucketDestinationPort) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseBucketDestinationPort) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseBucketDestinationPort) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseBucketDestinationPort.
func (o *SparseBucketDestinationPort) DeepCopy() *SparseBucketDestinationPort {

	if o == nil {
		return nil
	}

	out := &SparseBucketDestinationPort{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseBucketDestinationPort.
func (o *SparseBucketDestinationPort) DeepCopyInto(out *SparseBucketDestinationPort) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseBucketDestinationPort: %s", err))
	}

	*out = *target.(*SparseBucketDestinationPort)
}

type mongoAttributesBucketDestinationPort struct {
	ID            bson.ObjectId             `bson:"_id,omitempty"`
	Date          string                    `bson:"date"`
	MigrationsLog map[string]string         `bson:"migrationslog,omitempty"`
	Namespace     string                    `bson:"namespace"`
	Ports         map[string][]*BucketEntry `bson:"ports,omitempty"`
	ZHash         int                       `bson:"zhash"`
	Zone          int                       `bson:"zone"`
}
type mongoAttributesSparseBucketDestinationPort struct {
	ID            bson.ObjectId              `bson:"_id,omitempty"`
	Date          *string                    `bson:"date,omitempty"`
	MigrationsLog *map[string]string         `bson:"migrationslog,omitempty"`
	Namespace     *string                    `bson:"namespace,omitempty"`
	Ports         *map[string][]*BucketEntry `bson:"ports,omitempty"`
	ZHash         *int                       `bson:"zhash,omitempty"`
	Zone          *int                       `bson:"zone,omitempty"`
}
