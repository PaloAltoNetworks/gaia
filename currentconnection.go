package gaia

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// CurrentConnection represents the model of a currentconnection
type CurrentConnection struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// The duration of the tracked connection.
	Duration string `json:"duration,omitempty" msgpack:"duration,omitempty" bson:"-" mapstructure:"duration,omitempty"`

	// Was the connection existing when the enforcer started.
	Existing bool `json:"existing,omitempty" msgpack:"existing,omitempty" bson:"-" mapstructure:"existing,omitempty"`

	// The flow report for this connection.
	Flow *FlowReport `json:"flow,omitempty" msgpack:"flow,omitempty" bson:"-" mapstructure:"flow,omitempty"`

	// Port of the source.
	SourcePort int `json:"sourcePort,omitempty" msgpack:"sourcePort,omitempty" bson:"-" mapstructure:"sourcePort,omitempty"`

	// The time the enforcer started tracking the connection.
	StartTime time.Time `json:"startTime,omitempty" msgpack:"startTime,omitempty" bson:"-" mapstructure:"startTime,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewCurrentConnection returns a new *CurrentConnection
func NewCurrentConnection() *CurrentConnection {

	return &CurrentConnection{
		ModelVersion: 1,
		Flow:         NewFlowReport(),
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *CurrentConnection) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesCurrentConnection{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *CurrentConnection) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesCurrentConnection{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *CurrentConnection) BleveType() string {

	return "currentconnection"
}

// DeepCopy returns a deep copy if the CurrentConnection.
func (o *CurrentConnection) DeepCopy() *CurrentConnection {

	if o == nil {
		return nil
	}

	out := &CurrentConnection{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *CurrentConnection.
func (o *CurrentConnection) DeepCopyInto(out *CurrentConnection) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy CurrentConnection: %s", err))
	}

	*out = *target.(*CurrentConnection)
}

// Validate valides the current information stored into the structure.
func (o *CurrentConnection) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateTimeDuration("duration", o.Duration); err != nil {
		errors = errors.Append(err)
	}

	if o.Flow != nil {
		elemental.ResetDefaultForZeroValues(o.Flow)
		if err := o.Flow.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateMaximumInt("sourcePort", o.SourcePort, int(65536), false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*CurrentConnection) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := CurrentConnectionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return CurrentConnectionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*CurrentConnection) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return CurrentConnectionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *CurrentConnection) ValueForAttribute(name string) interface{} {

	switch name {
	case "ID":
		return o.ID
	case "duration":
		return o.Duration
	case "existing":
		return o.Existing
	case "flow":
		return o.Flow
	case "sourcePort":
		return o.SourcePort
	case "startTime":
		return o.StartTime
	}

	return nil
}

// CurrentConnectionAttributesMap represents the map of attribute for CurrentConnection.
var CurrentConnectionAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Duration": {
		AllowedChoices: []string{},
		ConvertedName:  "Duration",
		Description:    `The duration of the tracked connection.`,
		Exposed:        true,
		Name:           "duration",
		Type:           "string",
	},
	"Existing": {
		AllowedChoices: []string{},
		ConvertedName:  "Existing",
		Description:    `Was the connection existing when the enforcer started.`,
		Exposed:        true,
		Name:           "existing",
		Type:           "boolean",
	},
	"Flow": {
		AllowedChoices: []string{},
		ConvertedName:  "Flow",
		Description:    `The flow report for this connection.`,
		Exposed:        true,
		Name:           "flow",
		SubType:        "flowreport",
		Type:           "ref",
	},
	"SourcePort": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePort",
		Description:    `Port of the source.`,
		Exposed:        true,
		MaxValue:       65536,
		Name:           "sourcePort",
		Type:           "integer",
	},
	"StartTime": {
		AllowedChoices: []string{},
		ConvertedName:  "StartTime",
		Description:    `The time the enforcer started tracking the connection.`,
		Exposed:        true,
		Name:           "startTime",
		Type:           "time",
	},
}

// CurrentConnectionLowerCaseAttributesMap represents the map of attribute for CurrentConnection.
var CurrentConnectionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"duration": {
		AllowedChoices: []string{},
		ConvertedName:  "Duration",
		Description:    `The duration of the tracked connection.`,
		Exposed:        true,
		Name:           "duration",
		Type:           "string",
	},
	"existing": {
		AllowedChoices: []string{},
		ConvertedName:  "Existing",
		Description:    `Was the connection existing when the enforcer started.`,
		Exposed:        true,
		Name:           "existing",
		Type:           "boolean",
	},
	"flow": {
		AllowedChoices: []string{},
		ConvertedName:  "Flow",
		Description:    `The flow report for this connection.`,
		Exposed:        true,
		Name:           "flow",
		SubType:        "flowreport",
		Type:           "ref",
	},
	"sourceport": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePort",
		Description:    `Port of the source.`,
		Exposed:        true,
		MaxValue:       65536,
		Name:           "sourcePort",
		Type:           "integer",
	},
	"starttime": {
		AllowedChoices: []string{},
		ConvertedName:  "StartTime",
		Description:    `The time the enforcer started tracking the connection.`,
		Exposed:        true,
		Name:           "startTime",
		Type:           "time",
	},
}

type mongoAttributesCurrentConnection struct {
	ID bson.ObjectId `bson:"_id,omitempty"`
}
