// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// AWSResourceKindValue represents the possible values for attribute "kind".
type AWSResourceKindValue string

const (
	// AWSResourceKindFakeTarget represents the value FakeTarget.
	AWSResourceKindFakeTarget AWSResourceKindValue = "FakeTarget"

	// AWSResourceKindInstance represents the value Instance.
	AWSResourceKindInstance AWSResourceKindValue = "Instance"

	// AWSResourceKindInternetGateway represents the value InternetGateway.
	AWSResourceKindInternetGateway AWSResourceKindValue = "InternetGateway"

	// AWSResourceKindListenerApplication represents the value ListenerApplication.
	AWSResourceKindListenerApplication AWSResourceKindValue = "ListenerApplication"

	// AWSResourceKindListenerGateway represents the value ListenerGateway.
	AWSResourceKindListenerGateway AWSResourceKindValue = "ListenerGateway"

	// AWSResourceKindListenerNetwork represents the value ListenerNetwork.
	AWSResourceKindListenerNetwork AWSResourceKindValue = "ListenerNetwork"

	// AWSResourceKindLoadBalancerApplication represents the value LoadBalancerApplication.
	AWSResourceKindLoadBalancerApplication AWSResourceKindValue = "LoadBalancerApplication"

	// AWSResourceKindLoadBalancerClassic represents the value LoadBalancerClassic.
	AWSResourceKindLoadBalancerClassic AWSResourceKindValue = "LoadBalancerClassic"

	// AWSResourceKindLoadBalancerGateway represents the value LoadBalancerGateway.
	AWSResourceKindLoadBalancerGateway AWSResourceKindValue = "LoadBalancerGateway"

	// AWSResourceKindLoadBalancerNetwork represents the value LoadBalancerNetwork.
	AWSResourceKindLoadBalancerNetwork AWSResourceKindValue = "LoadBalancerNetwork"

	// AWSResourceKindNATGateway represents the value NATGateway.
	AWSResourceKindNATGateway AWSResourceKindValue = "NATGateway"

	// AWSResourceKindNetworkACL represents the value NetworkACL.
	AWSResourceKindNetworkACL AWSResourceKindValue = "NetworkACL"

	// AWSResourceKindNetworkInterface represents the value NetworkInterface.
	AWSResourceKindNetworkInterface AWSResourceKindValue = "NetworkInterface"

	// AWSResourceKindPending represents the value Pending.
	AWSResourceKindPending AWSResourceKindValue = "Pending"

	// AWSResourceKindRouteTable represents the value RouteTable.
	AWSResourceKindRouteTable AWSResourceKindValue = "RouteTable"

	// AWSResourceKindSecurityGroup represents the value SecurityGroup.
	AWSResourceKindSecurityGroup AWSResourceKindValue = "SecurityGroup"

	// AWSResourceKindSubnet represents the value Subnet.
	AWSResourceKindSubnet AWSResourceKindValue = "Subnet"

	// AWSResourceKindTargetGroup represents the value TargetGroup.
	AWSResourceKindTargetGroup AWSResourceKindValue = "TargetGroup"

	// AWSResourceKindVPC represents the value VPC.
	AWSResourceKindVPC AWSResourceKindValue = "VPC"
)

// AWSResourceIdentity represents the Identity of the object.
var AWSResourceIdentity = elemental.Identity{
	Name:     "awsresource",
	Category: "awsresources",
	Package:  "pandemona",
	Private:  true,
}

// AWSResourcesList represents a list of AWSResources
type AWSResourcesList []*AWSResource

// Identity returns the identity of the objects in the list.
func (o AWSResourcesList) Identity() elemental.Identity {

	return AWSResourceIdentity
}

// Copy returns a pointer to a copy the AWSResourcesList.
func (o AWSResourcesList) Copy() elemental.Identifiables {

	out := append(AWSResourcesList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the AWSResourcesList.
func (o AWSResourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(AWSResourcesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*AWSResource))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AWSResourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AWSResourcesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the AWSResourcesList converted to SparseAWSResourcesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AWSResourcesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAWSResourcesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseAWSResource)
	}

	return out
}

// Version returns the version of the content.
func (o AWSResourcesList) Version() int {

	return 1
}

// AWSResource represents the model of a awsresource
type AWSResource struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// The 12 digit ID of the AWS account the resource belongs.
	AccountID string `json:"accountID,omitempty" msgpack:"accountID,omitempty" bson:"accountid,omitempty" mapstructure:"accountID,omitempty"`

	// The ARN of the resource in AWS.
	Arn string `json:"arn" msgpack:"arn" bson:"arn" mapstructure:"arn,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The JSON-encoded data that represents the resource.
	Data []byte `json:"data" msgpack:"data" bson:"data" mapstructure:"data,omitempty"`

	// Contextual values that can be used to narrow searching of resources if the
	// arn or resourceID are not known. For instance, it could be used to store
	// a resource's Subnet or VPC ID.
	DenormedFields []string `json:"denormedFields" msgpack:"denormedFields" bson:"denormedfields" mapstructure:"denormedFields,omitempty"`

	// The specific kind of the resource.
	Kind AWSResourceKindValue `json:"kind" msgpack:"kind" bson:"kind" mapstructure:"kind,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// The name of the resource.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// The resource identifier in PrismaCloud.
	PrismaRRN string `json:"prismaRRN,omitempty" msgpack:"prismaRRN,omitempty" bson:"prismarrn,omitempty" mapstructure:"prismaRRN,omitempty"`

	// The region this resource exists in according to PrismaCloud. Note that the
	// resource may exists in a different region as described by AWS.
	PrismaRegion string `json:"prismaRegion" msgpack:"prismaRegion" bson:"prismaregion" mapstructure:"prismaRegion,omitempty"`

	// A resource ID that will mainly be used in RQL queries.
	ResourceID string `json:"resourceID" msgpack:"resourceID" bson:"resourceid" mapstructure:"resourceID,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAWSResource returns a new *AWSResource
func NewAWSResource() *AWSResource {

	return &AWSResource{
		ModelVersion:   1,
		Data:           []byte{},
		DenormedFields: []string{},
		Kind:           AWSResourceKindPending,
		MigrationsLog:  map[string]string{},
	}
}

// Identity returns the Identity of the object.
func (o *AWSResource) Identity() elemental.Identity {

	return AWSResourceIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AWSResource) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AWSResource) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AWSResource) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAWSResource{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.AccountID = o.AccountID
	s.Arn = o.Arn
	s.CreateTime = o.CreateTime
	s.Data = o.Data
	s.DenormedFields = o.DenormedFields
	s.Kind = o.Kind
	s.MigrationsLog = o.MigrationsLog
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.PrismaRRN = o.PrismaRRN
	s.PrismaRegion = o.PrismaRegion
	s.ResourceID = o.ResourceID
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AWSResource) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAWSResource{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.AccountID = s.AccountID
	o.Arn = s.Arn
	o.CreateTime = s.CreateTime
	o.Data = s.Data
	o.DenormedFields = s.DenormedFields
	o.Kind = s.Kind
	o.MigrationsLog = s.MigrationsLog
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.PrismaRRN = s.PrismaRRN
	o.PrismaRegion = s.PrismaRegion
	o.ResourceID = s.ResourceID
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AWSResource) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AWSResource) BleveType() string {

	return "awsresource"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AWSResource) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *AWSResource) Doc() string {

	return `Represents a AWS cloud resource such as a virtual machine.`
}

func (o *AWSResource) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *AWSResource) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *AWSResource) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *AWSResource) GetMigrationsLog() map[string]string {

	return o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the given value.
func (o *AWSResource) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *AWSResource) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *AWSResource) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *AWSResource) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *AWSResource) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *AWSResource) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *AWSResource) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *AWSResource) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *AWSResource) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AWSResource) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAWSResource{
			ID:             &o.ID,
			AccountID:      &o.AccountID,
			Arn:            &o.Arn,
			CreateTime:     &o.CreateTime,
			Data:           &o.Data,
			DenormedFields: &o.DenormedFields,
			Kind:           &o.Kind,
			MigrationsLog:  &o.MigrationsLog,
			Name:           &o.Name,
			Namespace:      &o.Namespace,
			PrismaRRN:      &o.PrismaRRN,
			PrismaRegion:   &o.PrismaRegion,
			ResourceID:     &o.ResourceID,
			UpdateTime:     &o.UpdateTime,
			ZHash:          &o.ZHash,
			Zone:           &o.Zone,
		}
	}

	sp := &SparseAWSResource{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "accountID":
			sp.AccountID = &(o.AccountID)
		case "arn":
			sp.Arn = &(o.Arn)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "data":
			sp.Data = &(o.Data)
		case "denormedFields":
			sp.DenormedFields = &(o.DenormedFields)
		case "kind":
			sp.Kind = &(o.Kind)
		case "migrationsLog":
			sp.MigrationsLog = &(o.MigrationsLog)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "prismaRRN":
			sp.PrismaRRN = &(o.PrismaRRN)
		case "prismaRegion":
			sp.PrismaRegion = &(o.PrismaRegion)
		case "resourceID":
			sp.ResourceID = &(o.ResourceID)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAWSResource to the object.
func (o *AWSResource) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAWSResource)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.AccountID != nil {
		o.AccountID = *so.AccountID
	}
	if so.Arn != nil {
		o.Arn = *so.Arn
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Data != nil {
		o.Data = *so.Data
	}
	if so.DenormedFields != nil {
		o.DenormedFields = *so.DenormedFields
	}
	if so.Kind != nil {
		o.Kind = *so.Kind
	}
	if so.MigrationsLog != nil {
		o.MigrationsLog = *so.MigrationsLog
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.PrismaRRN != nil {
		o.PrismaRRN = *so.PrismaRRN
	}
	if so.PrismaRegion != nil {
		o.PrismaRegion = *so.PrismaRegion
	}
	if so.ResourceID != nil {
		o.ResourceID = *so.ResourceID
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the AWSResource.
func (o *AWSResource) DeepCopy() *AWSResource {

	if o == nil {
		return nil
	}

	out := &AWSResource{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AWSResource.
func (o *AWSResource) DeepCopyInto(out *AWSResource) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AWSResource: %s", err))
	}

	*out = *target.(*AWSResource)
}

// Validate valides the current information stored into the structure.
func (o *AWSResource) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredExternal("data", o.Data); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("kind", string(o.Kind), []string{"Pending", "Instance", "NetworkInterface", "VPC", "Subnet", "NetworkACL", "InternetGateway", "SecurityGroup", "FakeTarget", "TargetGroup", "LoadBalancerApplication", "LoadBalancerNetwork", "LoadBalancerGateway", "LoadBalancerClassic", "ListenerApplication", "ListenerNetwork", "ListenerGateway", "RouteTable", "NATGateway"}, true); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AWSResource) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AWSResourceAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AWSResourceLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AWSResource) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AWSResourceAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AWSResource) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "accountID":
		return o.AccountID
	case "arn":
		return o.Arn
	case "createTime":
		return o.CreateTime
	case "data":
		return o.Data
	case "denormedFields":
		return o.DenormedFields
	case "kind":
		return o.Kind
	case "migrationsLog":
		return o.MigrationsLog
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "prismaRRN":
		return o.PrismaRRN
	case "prismaRegion":
		return o.PrismaRegion
	case "resourceID":
		return o.ResourceID
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AWSResourceAttributesMap represents the map of attribute for AWSResource.
var AWSResourceAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"AccountID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "accountid",
		ConvertedName:  "AccountID",
		Description:    `The 12 digit ID of the AWS account the resource belongs.`,
		Exposed:        true,
		Name:           "accountID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Arn": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "arn",
		ConvertedName:  "Arn",
		Description:    `The ARN of the resource in AWS.`,
		Exposed:        true,
		Name:           "arn",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Data": {
		AllowedChoices: []string{},
		BSONFieldName:  "data",
		ConvertedName:  "Data",
		Description:    `The JSON-encoded data that represents the resource.`,
		Exposed:        true,
		Name:           "data",
		Required:       true,
		Stored:         true,
		SubType:        "[]byte",
		Type:           "external",
	},
	"DenormedFields": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "denormedfields",
		ConvertedName:  "DenormedFields",
		Description: `Contextual values that can be used to narrow searching of resources if the
arn or resourceID are not known. For instance, it could be used to store
a resource's Subnet or VPC ID.`,
		Exposed:  true,
		Name:     "denormedFields",
		ReadOnly: true,
		Stored:   true,
		SubType:  "string",
		Type:     "list",
	},
	"Kind": {
		AllowedChoices: []string{"Pending", "Instance", "NetworkInterface", "VPC", "Subnet", "NetworkACL", "InternetGateway", "SecurityGroup", "FakeTarget", "TargetGroup", "LoadBalancerApplication", "LoadBalancerNetwork", "LoadBalancerGateway", "LoadBalancerClassic", "ListenerApplication", "ListenerNetwork", "ListenerGateway", "RouteTable", "NATGateway"},
		Autogenerated:  true,
		BSONFieldName:  "kind",
		ConvertedName:  "Kind",
		DefaultValue:   AWSResourceKindPending,
		Description:    `The specific kind of the resource.`,
		Exposed:        true,
		Name:           "kind",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"MigrationsLog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the resource.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"PrismaRRN": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismarrn",
		ConvertedName:  "PrismaRRN",
		Description:    `The resource identifier in PrismaCloud.`,
		Exposed:        true,
		Name:           "prismaRRN",
		Stored:         true,
		Type:           "string",
	},
	"PrismaRegion": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismaregion",
		ConvertedName:  "PrismaRegion",
		Description: `The region this resource exists in according to PrismaCloud. Note that the
resource may exists in a different region as described by AWS.`,
		Exposed: true,
		Name:    "prismaRegion",
		Stored:  true,
		Type:    "string",
	},
	"ResourceID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "resourceid",
		ConvertedName:  "ResourceID",
		Description:    `A resource ID that will mainly be used in RQL queries.`,
		Exposed:        true,
		Name:           "resourceID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// AWSResourceLowerCaseAttributesMap represents the map of attribute for AWSResource.
var AWSResourceLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"accountid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "accountid",
		ConvertedName:  "AccountID",
		Description:    `The 12 digit ID of the AWS account the resource belongs.`,
		Exposed:        true,
		Name:           "accountID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"arn": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "arn",
		ConvertedName:  "Arn",
		Description:    `The ARN of the resource in AWS.`,
		Exposed:        true,
		Name:           "arn",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"data": {
		AllowedChoices: []string{},
		BSONFieldName:  "data",
		ConvertedName:  "Data",
		Description:    `The JSON-encoded data that represents the resource.`,
		Exposed:        true,
		Name:           "data",
		Required:       true,
		Stored:         true,
		SubType:        "[]byte",
		Type:           "external",
	},
	"denormedfields": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "denormedfields",
		ConvertedName:  "DenormedFields",
		Description: `Contextual values that can be used to narrow searching of resources if the
arn or resourceID are not known. For instance, it could be used to store
a resource's Subnet or VPC ID.`,
		Exposed:  true,
		Name:     "denormedFields",
		ReadOnly: true,
		Stored:   true,
		SubType:  "string",
		Type:     "list",
	},
	"kind": {
		AllowedChoices: []string{"Pending", "Instance", "NetworkInterface", "VPC", "Subnet", "NetworkACL", "InternetGateway", "SecurityGroup", "FakeTarget", "TargetGroup", "LoadBalancerApplication", "LoadBalancerNetwork", "LoadBalancerGateway", "LoadBalancerClassic", "ListenerApplication", "ListenerNetwork", "ListenerGateway", "RouteTable", "NATGateway"},
		Autogenerated:  true,
		BSONFieldName:  "kind",
		ConvertedName:  "Kind",
		DefaultValue:   AWSResourceKindPending,
		Description:    `The specific kind of the resource.`,
		Exposed:        true,
		Name:           "kind",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"migrationslog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the resource.`,
		Exposed:        true,
		Name:           "name",
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"prismarrn": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismarrn",
		ConvertedName:  "PrismaRRN",
		Description:    `The resource identifier in PrismaCloud.`,
		Exposed:        true,
		Name:           "prismaRRN",
		Stored:         true,
		Type:           "string",
	},
	"prismaregion": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismaregion",
		ConvertedName:  "PrismaRegion",
		Description: `The region this resource exists in according to PrismaCloud. Note that the
resource may exists in a different region as described by AWS.`,
		Exposed: true,
		Name:    "prismaRegion",
		Stored:  true,
		Type:    "string",
	},
	"resourceid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "resourceid",
		ConvertedName:  "ResourceID",
		Description:    `A resource ID that will mainly be used in RQL queries.`,
		Exposed:        true,
		Name:           "resourceID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseAWSResourcesList represents a list of SparseAWSResources
type SparseAWSResourcesList []*SparseAWSResource

// Identity returns the identity of the objects in the list.
func (o SparseAWSResourcesList) Identity() elemental.Identity {

	return AWSResourceIdentity
}

// Copy returns a pointer to a copy the SparseAWSResourcesList.
func (o SparseAWSResourcesList) Copy() elemental.Identifiables {

	copy := append(SparseAWSResourcesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAWSResourcesList.
func (o SparseAWSResourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseAWSResourcesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAWSResource))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAWSResourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAWSResourcesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseAWSResourcesList converted to AWSResourcesList.
func (o SparseAWSResourcesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAWSResourcesList) Version() int {

	return 1
}

// SparseAWSResource represents the sparse version of a awsresource.
type SparseAWSResource struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The 12 digit ID of the AWS account the resource belongs.
	AccountID *string `json:"accountID,omitempty" msgpack:"accountID,omitempty" bson:"accountid,omitempty" mapstructure:"accountID,omitempty"`

	// The ARN of the resource in AWS.
	Arn *string `json:"arn,omitempty" msgpack:"arn,omitempty" bson:"arn,omitempty" mapstructure:"arn,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The JSON-encoded data that represents the resource.
	Data *[]byte `json:"data,omitempty" msgpack:"data,omitempty" bson:"data,omitempty" mapstructure:"data,omitempty"`

	// Contextual values that can be used to narrow searching of resources if the
	// arn or resourceID are not known. For instance, it could be used to store
	// a resource's Subnet or VPC ID.
	DenormedFields *[]string `json:"denormedFields,omitempty" msgpack:"denormedFields,omitempty" bson:"denormedfields,omitempty" mapstructure:"denormedFields,omitempty"`

	// The specific kind of the resource.
	Kind *AWSResourceKindValue `json:"kind,omitempty" msgpack:"kind,omitempty" bson:"kind,omitempty" mapstructure:"kind,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog *map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// The name of the resource.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The resource identifier in PrismaCloud.
	PrismaRRN *string `json:"prismaRRN,omitempty" msgpack:"prismaRRN,omitempty" bson:"prismarrn,omitempty" mapstructure:"prismaRRN,omitempty"`

	// The region this resource exists in according to PrismaCloud. Note that the
	// resource may exists in a different region as described by AWS.
	PrismaRegion *string `json:"prismaRegion,omitempty" msgpack:"prismaRegion,omitempty" bson:"prismaregion,omitempty" mapstructure:"prismaRegion,omitempty"`

	// A resource ID that will mainly be used in RQL queries.
	ResourceID *string `json:"resourceID,omitempty" msgpack:"resourceID,omitempty" bson:"resourceid,omitempty" mapstructure:"resourceID,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAWSResource returns a new  SparseAWSResource.
func NewSparseAWSResource() *SparseAWSResource {
	return &SparseAWSResource{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAWSResource) Identity() elemental.Identity {

	return AWSResourceIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAWSResource) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAWSResource) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAWSResource) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAWSResource{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.AccountID != nil {
		s.AccountID = o.AccountID
	}
	if o.Arn != nil {
		s.Arn = o.Arn
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Data != nil {
		s.Data = o.Data
	}
	if o.DenormedFields != nil {
		s.DenormedFields = o.DenormedFields
	}
	if o.Kind != nil {
		s.Kind = o.Kind
	}
	if o.MigrationsLog != nil {
		s.MigrationsLog = o.MigrationsLog
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.PrismaRRN != nil {
		s.PrismaRRN = o.PrismaRRN
	}
	if o.PrismaRegion != nil {
		s.PrismaRegion = o.PrismaRegion
	}
	if o.ResourceID != nil {
		s.ResourceID = o.ResourceID
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAWSResource) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAWSResource{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.AccountID != nil {
		o.AccountID = s.AccountID
	}
	if s.Arn != nil {
		o.Arn = s.Arn
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Data != nil {
		o.Data = s.Data
	}
	if s.DenormedFields != nil {
		o.DenormedFields = s.DenormedFields
	}
	if s.Kind != nil {
		o.Kind = s.Kind
	}
	if s.MigrationsLog != nil {
		o.MigrationsLog = s.MigrationsLog
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.PrismaRRN != nil {
		o.PrismaRRN = s.PrismaRRN
	}
	if s.PrismaRegion != nil {
		o.PrismaRegion = s.PrismaRegion
	}
	if s.ResourceID != nil {
		o.ResourceID = s.ResourceID
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAWSResource) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAWSResource) ToPlain() elemental.PlainIdentifiable {

	out := NewAWSResource()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.AccountID != nil {
		out.AccountID = *o.AccountID
	}
	if o.Arn != nil {
		out.Arn = *o.Arn
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Data != nil {
		out.Data = *o.Data
	}
	if o.DenormedFields != nil {
		out.DenormedFields = *o.DenormedFields
	}
	if o.Kind != nil {
		out.Kind = *o.Kind
	}
	if o.MigrationsLog != nil {
		out.MigrationsLog = *o.MigrationsLog
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.PrismaRRN != nil {
		out.PrismaRRN = *o.PrismaRRN
	}
	if o.PrismaRegion != nil {
		out.PrismaRegion = *o.PrismaRegion
	}
	if o.ResourceID != nil {
		out.ResourceID = *o.ResourceID
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAWSResource) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAWSResource) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *SparseAWSResource) GetMigrationsLog() (out map[string]string) {

	if o.MigrationsLog == nil {
		return
	}

	return *o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the address of the given value.
func (o *SparseAWSResource) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = &migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAWSResource) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAWSResource) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAWSResource) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAWSResource) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseAWSResource) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseAWSResource) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseAWSResource) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseAWSResource) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseAWSResource.
func (o *SparseAWSResource) DeepCopy() *SparseAWSResource {

	if o == nil {
		return nil
	}

	out := &SparseAWSResource{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAWSResource.
func (o *SparseAWSResource) DeepCopyInto(out *SparseAWSResource) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAWSResource: %s", err))
	}

	*out = *target.(*SparseAWSResource)
}

type mongoAttributesAWSResource struct {
	ID             bson.ObjectId        `bson:"_id,omitempty"`
	AccountID      string               `bson:"accountid,omitempty"`
	Arn            string               `bson:"arn"`
	CreateTime     time.Time            `bson:"createtime"`
	Data           []byte               `bson:"data"`
	DenormedFields []string             `bson:"denormedfields"`
	Kind           AWSResourceKindValue `bson:"kind"`
	MigrationsLog  map[string]string    `bson:"migrationslog,omitempty"`
	Name           string               `bson:"name"`
	Namespace      string               `bson:"namespace"`
	PrismaRRN      string               `bson:"prismarrn,omitempty"`
	PrismaRegion   string               `bson:"prismaregion"`
	ResourceID     string               `bson:"resourceid"`
	UpdateTime     time.Time            `bson:"updatetime"`
	ZHash          int                  `bson:"zhash"`
	Zone           int                  `bson:"zone"`
}
type mongoAttributesSparseAWSResource struct {
	ID             bson.ObjectId         `bson:"_id,omitempty"`
	AccountID      *string               `bson:"accountid,omitempty"`
	Arn            *string               `bson:"arn,omitempty"`
	CreateTime     *time.Time            `bson:"createtime,omitempty"`
	Data           *[]byte               `bson:"data,omitempty"`
	DenormedFields *[]string             `bson:"denormedfields,omitempty"`
	Kind           *AWSResourceKindValue `bson:"kind,omitempty"`
	MigrationsLog  *map[string]string    `bson:"migrationslog,omitempty"`
	Name           *string               `bson:"name,omitempty"`
	Namespace      *string               `bson:"namespace,omitempty"`
	PrismaRRN      *string               `bson:"prismarrn,omitempty"`
	PrismaRegion   *string               `bson:"prismaregion,omitempty"`
	ResourceID     *string               `bson:"resourceid,omitempty"`
	UpdateTime     *time.Time            `bson:"updatetime,omitempty"`
	ZHash          *int                  `bson:"zhash,omitempty"`
	Zone           *int                  `bson:"zone,omitempty"`
}
