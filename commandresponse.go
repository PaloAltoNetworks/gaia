// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// CommandResponseIdentity represents the Identity of the object.
var CommandResponseIdentity = elemental.Identity{
	Name:     "commandresponse",
	Category: "commandresponse",
	Package:  "guy",
	Private:  false,
}

// CommandResponsesList represents a list of CommandResponses
type CommandResponsesList []*CommandResponse

// Identity returns the identity of the objects in the list.
func (o CommandResponsesList) Identity() elemental.Identity {

	return CommandResponseIdentity
}

// Copy returns a pointer to a copy the CommandResponsesList.
func (o CommandResponsesList) Copy() elemental.Identifiables {

	copy := append(CommandResponsesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the CommandResponsesList.
func (o CommandResponsesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(CommandResponsesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*CommandResponse))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o CommandResponsesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o CommandResponsesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the CommandResponsesList converted to SparseCommandResponsesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o CommandResponsesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseCommandResponsesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseCommandResponse)
	}

	return out
}

// Version returns the version of the content.
func (o CommandResponsesList) Version() int {

	return 1
}

// CommandResponse represents the model of a commandresponse
type CommandResponse struct {
	// Is the response base64 encoded.
	Base64Encoded bool `json:"base64Encoded" msgpack:"base64Encoded" bson:"-" mapstructure:"base64Encoded,omitempty"`

	// Unique ID generated for each command.
	CommandID string `json:"commandID" msgpack:"commandID" bson:"-" mapstructure:"commandID,omitempty"`

	// Is the response compressed.
	Compressed bool `json:"compressed" msgpack:"compressed" bson:"-" mapstructure:"compressed,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// The response data.
	Response string `json:"response" msgpack:"response" bson:"-" mapstructure:"response,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewCommandResponse returns a new *CommandResponse
func NewCommandResponse() *CommandResponse {

	return &CommandResponse{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *CommandResponse) Identity() elemental.Identity {

	return CommandResponseIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *CommandResponse) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *CommandResponse) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *CommandResponse) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesCommandResponse{}

	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *CommandResponse) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesCommandResponse{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *CommandResponse) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *CommandResponse) BleveType() string {

	return "commandresponse"
}

// DefaultOrder returns the list of default ordering fields.
func (o *CommandResponse) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *CommandResponse) Doc() string {

	return `A result from a command request.`
}

func (o *CommandResponse) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *CommandResponse) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *CommandResponse) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *CommandResponse) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseCommandResponse{
			Base64Encoded: &o.Base64Encoded,
			CommandID:     &o.CommandID,
			Compressed:    &o.Compressed,
			Namespace:     &o.Namespace,
			Response:      &o.Response,
		}
	}

	sp := &SparseCommandResponse{}
	for _, f := range fields {
		switch f {
		case "base64Encoded":
			sp.Base64Encoded = &(o.Base64Encoded)
		case "commandID":
			sp.CommandID = &(o.CommandID)
		case "compressed":
			sp.Compressed = &(o.Compressed)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "response":
			sp.Response = &(o.Response)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseCommandResponse to the object.
func (o *CommandResponse) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseCommandResponse)
	if so.Base64Encoded != nil {
		o.Base64Encoded = *so.Base64Encoded
	}
	if so.CommandID != nil {
		o.CommandID = *so.CommandID
	}
	if so.Compressed != nil {
		o.Compressed = *so.Compressed
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.Response != nil {
		o.Response = *so.Response
	}
}

// DeepCopy returns a deep copy if the CommandResponse.
func (o *CommandResponse) DeepCopy() *CommandResponse {

	if o == nil {
		return nil
	}

	out := &CommandResponse{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *CommandResponse.
func (o *CommandResponse) DeepCopyInto(out *CommandResponse) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy CommandResponse: %s", err))
	}

	*out = *target.(*CommandResponse)
}

// Validate valides the current information stored into the structure.
func (o *CommandResponse) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*CommandResponse) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := CommandResponseAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return CommandResponseLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*CommandResponse) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return CommandResponseAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *CommandResponse) ValueForAttribute(name string) interface{} {

	switch name {
	case "base64Encoded":
		return o.Base64Encoded
	case "commandID":
		return o.CommandID
	case "compressed":
		return o.Compressed
	case "namespace":
		return o.Namespace
	case "response":
		return o.Response
	}

	return nil
}

// CommandResponseAttributesMap represents the map of attribute for CommandResponse.
var CommandResponseAttributesMap = map[string]elemental.AttributeSpecification{
	"Base64Encoded": {
		AllowedChoices: []string{},
		ConvertedName:  "Base64Encoded",
		Description:    `Is the response base64 encoded.`,
		Exposed:        true,
		Name:           "base64Encoded",
		Type:           "boolean",
	},
	"CommandID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CommandID",
		Description:    `Unique ID generated for each command.`,
		Exposed:        true,
		Name:           "commandID",
		ReadOnly:       true,
		Type:           "string",
	},
	"Compressed": {
		AllowedChoices: []string{},
		ConvertedName:  "Compressed",
		Description:    `Is the response compressed.`,
		Exposed:        true,
		Name:           "compressed",
		Type:           "boolean",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Response": {
		AllowedChoices: []string{},
		ConvertedName:  "Response",
		Description:    `The response data.`,
		Exposed:        true,
		Name:           "response",
		Type:           "string",
	},
}

// CommandResponseLowerCaseAttributesMap represents the map of attribute for CommandResponse.
var CommandResponseLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"base64encoded": {
		AllowedChoices: []string{},
		ConvertedName:  "Base64Encoded",
		Description:    `Is the response base64 encoded.`,
		Exposed:        true,
		Name:           "base64Encoded",
		Type:           "boolean",
	},
	"commandid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "CommandID",
		Description:    `Unique ID generated for each command.`,
		Exposed:        true,
		Name:           "commandID",
		ReadOnly:       true,
		Type:           "string",
	},
	"compressed": {
		AllowedChoices: []string{},
		ConvertedName:  "Compressed",
		Description:    `Is the response compressed.`,
		Exposed:        true,
		Name:           "compressed",
		Type:           "boolean",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"response": {
		AllowedChoices: []string{},
		ConvertedName:  "Response",
		Description:    `The response data.`,
		Exposed:        true,
		Name:           "response",
		Type:           "string",
	},
}

// SparseCommandResponsesList represents a list of SparseCommandResponses
type SparseCommandResponsesList []*SparseCommandResponse

// Identity returns the identity of the objects in the list.
func (o SparseCommandResponsesList) Identity() elemental.Identity {

	return CommandResponseIdentity
}

// Copy returns a pointer to a copy the SparseCommandResponsesList.
func (o SparseCommandResponsesList) Copy() elemental.Identifiables {

	copy := append(SparseCommandResponsesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseCommandResponsesList.
func (o SparseCommandResponsesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseCommandResponsesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseCommandResponse))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseCommandResponsesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseCommandResponsesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseCommandResponsesList converted to CommandResponsesList.
func (o SparseCommandResponsesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseCommandResponsesList) Version() int {

	return 1
}

// SparseCommandResponse represents the sparse version of a commandresponse.
type SparseCommandResponse struct {
	// Is the response base64 encoded.
	Base64Encoded *bool `json:"base64Encoded,omitempty" msgpack:"base64Encoded,omitempty" bson:"-" mapstructure:"base64Encoded,omitempty"`

	// Unique ID generated for each command.
	CommandID *string `json:"commandID,omitempty" msgpack:"commandID,omitempty" bson:"-" mapstructure:"commandID,omitempty"`

	// Is the response compressed.
	Compressed *bool `json:"compressed,omitempty" msgpack:"compressed,omitempty" bson:"-" mapstructure:"compressed,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The response data.
	Response *string `json:"response,omitempty" msgpack:"response,omitempty" bson:"-" mapstructure:"response,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseCommandResponse returns a new  SparseCommandResponse.
func NewSparseCommandResponse() *SparseCommandResponse {
	return &SparseCommandResponse{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseCommandResponse) Identity() elemental.Identity {

	return CommandResponseIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseCommandResponse) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseCommandResponse) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseCommandResponse) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseCommandResponse{}

	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseCommandResponse) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseCommandResponse{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseCommandResponse) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseCommandResponse) ToPlain() elemental.PlainIdentifiable {

	out := NewCommandResponse()
	if o.Base64Encoded != nil {
		out.Base64Encoded = *o.Base64Encoded
	}
	if o.CommandID != nil {
		out.CommandID = *o.CommandID
	}
	if o.Compressed != nil {
		out.Compressed = *o.Compressed
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.Response != nil {
		out.Response = *o.Response
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseCommandResponse) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseCommandResponse) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseCommandResponse.
func (o *SparseCommandResponse) DeepCopy() *SparseCommandResponse {

	if o == nil {
		return nil
	}

	out := &SparseCommandResponse{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseCommandResponse.
func (o *SparseCommandResponse) DeepCopyInto(out *SparseCommandResponse) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseCommandResponse: %s", err))
	}

	*out = *target.(*SparseCommandResponse)
}

type mongoAttributesCommandResponse struct {
	Namespace string `bson:"namespace"`
}
type mongoAttributesSparseCommandResponse struct {
	Namespace *string `bson:"namespace,omitempty"`
}
