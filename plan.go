package gaia

import (
	"fmt"
	"sync"

	"go.aporeto.io/elemental"
)

// PlanIdentity represents the Identity of the object.
var PlanIdentity = elemental.Identity{
	Name:     "plan",
	Category: "plans",
	Package:  "vince",
	Private:  false,
}

// PlansList represents a list of Plans
type PlansList []*Plan

// Identity returns the identity of the objects in the list.
func (o PlansList) Identity() elemental.Identity {

	return PlanIdentity
}

// Copy returns a pointer to a copy the PlansList.
func (o PlansList) Copy() elemental.Identifiables {

	copy := append(PlansList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the PlansList.
func (o PlansList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PlansList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*Plan))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PlansList) List() elemental.IdentifiablesList {

	out := elemental.IdentifiablesList{}
	for _, item := range o {
		out = append(out, item)
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PlansList) DefaultOrder() []string {

	return []string{}
}

// Version returns the version of the content.
func (o PlansList) Version() int {

	return 1
}

// Plan represents the model of a plan
type Plan struct {
	// Description contains the description of the Plan.
	Description string `json:"description" bson:"description" mapstructure:"description,omitempty"`

	// EnforcerQuota contains the maximum number of enforcers available in the Plan.
	EnforcersQuota int `json:"enforcersQuota" bson:"enforcersquota" mapstructure:"enforcersQuota,omitempty"`

	// Key contains the key identifier of the Plan.
	Key string `json:"key" bson:"key" mapstructure:"key,omitempty"`

	// Name contains the name of the Plan.
	Name string `json:"name" bson:"name" mapstructure:"name,omitempty"`

	// PoliciesQuota contains the maximum number of policies available in the Plan.
	PoliciesQuota int `json:"policiesQuota" bson:"policiesquota" mapstructure:"policiesQuota,omitempty"`

	// ProcessingUnitsQuota contains the maximum PUs available in the Plan.
	ProcessingUnitsQuota int `json:"processingUnitsQuota" bson:"processingunitsquota" mapstructure:"processingUnitsQuota,omitempty"`

	ModelVersion int `json:"-" bson:"_modelversion"`

	sync.Mutex `json:"-" bson:"-"`
}

// NewPlan returns a new *Plan
func NewPlan() *Plan {

	return &Plan{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *Plan) Identity() elemental.Identity {

	return PlanIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Plan) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Plan) SetIdentifier(id string) {

}

// Version returns the hardcoded version of the model.
func (o *Plan) Version() int {

	return 1
}

// DefaultOrder returns the list of default ordering fields.
func (o *Plan) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Plan) Doc() string {
	return `Plan contains the various billing plans available.`
}

func (o *Plan) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// Validate valides the current information stored into the structure.
func (o *Plan) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Plan) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PlanAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PlanLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Plan) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PlanAttributesMap
}

// PlanAttributesMap represents the map of attribute for Plan.
var PlanAttributesMap = map[string]elemental.AttributeSpecification{
	"Description": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Description",
		Description:    `Description contains the description of the Plan.`,
		Exposed:        true,
		Name:           "description",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"EnforcersQuota": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "EnforcersQuota",
		Description:    `EnforcerQuota contains the maximum number of enforcers available in the Plan.`,
		Exposed:        true,
		Name:           "enforcersQuota",
		ReadOnly:       true,
		Stored:         true,
		Type:           "integer",
	},
	"Key": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Key",
		Description:    `Key contains the key identifier of the Plan.`,
		Exposed:        true,
		Name:           "key",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Name": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Name",
		Description:    `Name contains the name of the Plan.`,
		Exposed:        true,
		Name:           "name",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"PoliciesQuota": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "PoliciesQuota",
		Description:    `PoliciesQuota contains the maximum number of policies available in the Plan.`,
		Exposed:        true,
		Name:           "policiesQuota",
		ReadOnly:       true,
		Stored:         true,
		Type:           "integer",
	},
	"ProcessingUnitsQuota": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "ProcessingUnitsQuota",
		Description:    `ProcessingUnitsQuota contains the maximum PUs available in the Plan.`,
		Exposed:        true,
		Name:           "processingUnitsQuota",
		ReadOnly:       true,
		Stored:         true,
		Type:           "integer",
	},
}

// PlanLowerCaseAttributesMap represents the map of attribute for Plan.
var PlanLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"description": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Description",
		Description:    `Description contains the description of the Plan.`,
		Exposed:        true,
		Name:           "description",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"enforcersquota": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "EnforcersQuota",
		Description:    `EnforcerQuota contains the maximum number of enforcers available in the Plan.`,
		Exposed:        true,
		Name:           "enforcersQuota",
		ReadOnly:       true,
		Stored:         true,
		Type:           "integer",
	},
	"key": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Key",
		Description:    `Key contains the key identifier of the Plan.`,
		Exposed:        true,
		Name:           "key",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"name": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Name",
		Description:    `Name contains the name of the Plan.`,
		Exposed:        true,
		Name:           "name",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"policiesquota": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "PoliciesQuota",
		Description:    `PoliciesQuota contains the maximum number of policies available in the Plan.`,
		Exposed:        true,
		Name:           "policiesQuota",
		ReadOnly:       true,
		Stored:         true,
		Type:           "integer",
	},
	"processingunitsquota": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "ProcessingUnitsQuota",
		Description:    `ProcessingUnitsQuota contains the maximum PUs available in the Plan.`,
		Exposed:        true,
		Name:           "processingUnitsQuota",
		ReadOnly:       true,
		Stored:         true,
		Type:           "integer",
	},
}
