// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// NGFWRiskAssessmentDashboardDateRangeFilterValue represents the possible values for attribute "dateRangeFilter".
type NGFWRiskAssessmentDashboardDateRangeFilterValue string

const (
	// NGFWRiskAssessmentDashboardDateRangeFilterCustomDate represents the value CustomDate.
	NGFWRiskAssessmentDashboardDateRangeFilterCustomDate NGFWRiskAssessmentDashboardDateRangeFilterValue = "CustomDate"

	// NGFWRiskAssessmentDashboardDateRangeFilterLast24Hours represents the value Last24Hours.
	NGFWRiskAssessmentDashboardDateRangeFilterLast24Hours NGFWRiskAssessmentDashboardDateRangeFilterValue = "Last24Hours"

	// NGFWRiskAssessmentDashboardDateRangeFilterLast90Days represents the value Last90Days.
	NGFWRiskAssessmentDashboardDateRangeFilterLast90Days NGFWRiskAssessmentDashboardDateRangeFilterValue = "Last90Days"

	// NGFWRiskAssessmentDashboardDateRangeFilterLastMonth represents the value LastMonth.
	NGFWRiskAssessmentDashboardDateRangeFilterLastMonth NGFWRiskAssessmentDashboardDateRangeFilterValue = "LastMonth"

	// NGFWRiskAssessmentDashboardDateRangeFilterLastWeek represents the value LastWeek.
	NGFWRiskAssessmentDashboardDateRangeFilterLastWeek NGFWRiskAssessmentDashboardDateRangeFilterValue = "LastWeek"
)

// NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelValue represents the possible values for attribute "riskScoreConfidenceLevel".
type NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelValue string

const (
	// NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelHighConfidence represents the value HighConfidence.
	NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelHighConfidence NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelValue = "HighConfidence"

	// NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelLowConfidence represents the value LowConfidence.
	NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelLowConfidence NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelValue = "LowConfidence"

	// NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelMediumConfidence represents the value MediumConfidence.
	NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelMediumConfidence NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelValue = "MediumConfidence"

	// NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelVeryHighConfidence represents the value VeryHighConfidence.
	NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelVeryHighConfidence NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelValue = "VeryHighConfidence"
)

// NGFWRiskAssessmentDashboardIdentity represents the Identity of the object.
var NGFWRiskAssessmentDashboardIdentity = elemental.Identity{
	Name:     "ngfwriskassessmentdashboard",
	Category: "ngfwriskassessmentdashboards",
	Package:  "placeholder",
	Private:  false,
}

// NGFWRiskAssessmentDashboardsList represents a list of NGFWRiskAssessmentDashboards
type NGFWRiskAssessmentDashboardsList []*NGFWRiskAssessmentDashboard

// Identity returns the identity of the objects in the list.
func (o NGFWRiskAssessmentDashboardsList) Identity() elemental.Identity {

	return NGFWRiskAssessmentDashboardIdentity
}

// Copy returns a pointer to a copy the NGFWRiskAssessmentDashboardsList.
func (o NGFWRiskAssessmentDashboardsList) Copy() elemental.Identifiables {

	copy := append(NGFWRiskAssessmentDashboardsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the NGFWRiskAssessmentDashboardsList.
func (o NGFWRiskAssessmentDashboardsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(NGFWRiskAssessmentDashboardsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*NGFWRiskAssessmentDashboard))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o NGFWRiskAssessmentDashboardsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o NGFWRiskAssessmentDashboardsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the NGFWRiskAssessmentDashboardsList converted to SparseNGFWRiskAssessmentDashboardsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o NGFWRiskAssessmentDashboardsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseNGFWRiskAssessmentDashboardsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseNGFWRiskAssessmentDashboard)
	}

	return out
}

// Version returns the version of the content.
func (o NGFWRiskAssessmentDashboardsList) Version() int {

	return 1
}

// NGFWRiskAssessmentDashboard represents the model of a ngfwriskassessmentdashboard
type NGFWRiskAssessmentDashboard struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Array of number of workloads contacting suspicious domains, involved in
	// anomalous activities,
	// or internet facing with high / critical vulnerabilities detected in provided
	// range.
	AssetsAtRiskTrendline []int `json:"assetsAtRiskTrendline" msgpack:"assetsAtRiskTrendline" bson:"-" mapstructure:"assetsAtRiskTrendline,omitempty"`

	// The specified cloud account to provide risk asssessment metrics for.
	CloudAccountID string `json:"cloudAccountID" msgpack:"cloudAccountID" bson:"cloudaccountid" mapstructure:"cloudAccountID,omitempty"`

	// The end of the custom date range when CustomDate is used for dateRangeFilter.
	CustomDateFilterEnd time.Time `json:"-" msgpack:"-" bson:"-" mapstructure:"-,omitempty"`

	// The start of the custom date range when CustomDate is used for dateRangeFilter.
	CustomDateFilterStart time.Time `json:"-" msgpack:"-" bson:"-" mapstructure:"-,omitempty"`

	// The specified date range filter type.
	DateRangeFilter NGFWRiskAssessmentDashboardDateRangeFilterValue `json:"-" msgpack:"-" bson:"-" mapstructure:"-,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Array of number of recommended firewall deployments in provided range.
	RecommendedFirewallDeploymentsTrendline []int `json:"recommendedFirewallDeploymentsTrendline" msgpack:"recommendedFirewallDeploymentsTrendline" bson:"-" mapstructure:"recommendedFirewallDeploymentsTrendline,omitempty"`

	// Latest risk score confidence level in provided range.
	RiskScoreConfidenceLevel NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelValue `json:"riskScoreConfidenceLevel" msgpack:"riskScoreConfidenceLevel" bson:"-" mapstructure:"riskScoreConfidenceLevel,omitempty"`

	// Array of risk score values over provided range.
	RiskScoreTrendLine []int `json:"riskScoreTrendLine" msgpack:"riskScoreTrendLine" bson:"-" mapstructure:"riskScoreTrendLine,omitempty"`

	// Array of number of CVEs on internet exposed assets detected in provided range.
	ThreatsTrendline []int `json:"threatsTrendline" msgpack:"threatsTrendline" bson:"-" mapstructure:"threatsTrendline,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewNGFWRiskAssessmentDashboard returns a new *NGFWRiskAssessmentDashboard
func NewNGFWRiskAssessmentDashboard() *NGFWRiskAssessmentDashboard {

	return &NGFWRiskAssessmentDashboard{
		ModelVersion:                            1,
		AssetsAtRiskTrendline:                   []int{},
		DateRangeFilter:                         NGFWRiskAssessmentDashboardDateRangeFilterLast24Hours,
		MigrationsLog:                           map[string]string{},
		RecommendedFirewallDeploymentsTrendline: []int{},
		RiskScoreConfidenceLevel:                NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelLowConfidence,
		RiskScoreTrendLine:                      []int{},
		ThreatsTrendline:                        []int{},
	}
}

// Identity returns the Identity of the object.
func (o *NGFWRiskAssessmentDashboard) Identity() elemental.Identity {

	return NGFWRiskAssessmentDashboardIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *NGFWRiskAssessmentDashboard) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *NGFWRiskAssessmentDashboard) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *NGFWRiskAssessmentDashboard) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesNGFWRiskAssessmentDashboard{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.CloudAccountID = o.CloudAccountID
	s.MigrationsLog = o.MigrationsLog
	s.Namespace = o.Namespace
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *NGFWRiskAssessmentDashboard) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesNGFWRiskAssessmentDashboard{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.CloudAccountID = s.CloudAccountID
	o.MigrationsLog = s.MigrationsLog
	o.Namespace = s.Namespace
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *NGFWRiskAssessmentDashboard) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *NGFWRiskAssessmentDashboard) BleveType() string {

	return "ngfwriskassessmentdashboard"
}

// DefaultOrder returns the list of default ordering fields.
func (o *NGFWRiskAssessmentDashboard) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *NGFWRiskAssessmentDashboard) Doc() string {

	return `Defines Next-Generation Firewall (NGFW) risk asssessment dashboard metrics.`
}

func (o *NGFWRiskAssessmentDashboard) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *NGFWRiskAssessmentDashboard) GetMigrationsLog() map[string]string {

	return o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the given value.
func (o *NGFWRiskAssessmentDashboard) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *NGFWRiskAssessmentDashboard) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *NGFWRiskAssessmentDashboard) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetZHash returns the ZHash of the receiver.
func (o *NGFWRiskAssessmentDashboard) GetZHash() int {

	return o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the given value.
func (o *NGFWRiskAssessmentDashboard) SetZHash(zHash int) {

	o.ZHash = zHash
}

// GetZone returns the Zone of the receiver.
func (o *NGFWRiskAssessmentDashboard) GetZone() int {

	return o.Zone
}

// SetZone sets the property Zone of the receiver using the given value.
func (o *NGFWRiskAssessmentDashboard) SetZone(zone int) {

	o.Zone = zone
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *NGFWRiskAssessmentDashboard) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseNGFWRiskAssessmentDashboard{
			ID:                                      &o.ID,
			AssetsAtRiskTrendline:                   &o.AssetsAtRiskTrendline,
			CloudAccountID:                          &o.CloudAccountID,
			CustomDateFilterEnd:                     &o.CustomDateFilterEnd,
			CustomDateFilterStart:                   &o.CustomDateFilterStart,
			DateRangeFilter:                         &o.DateRangeFilter,
			MigrationsLog:                           &o.MigrationsLog,
			Namespace:                               &o.Namespace,
			RecommendedFirewallDeploymentsTrendline: &o.RecommendedFirewallDeploymentsTrendline,
			RiskScoreConfidenceLevel:                &o.RiskScoreConfidenceLevel,
			RiskScoreTrendLine:                      &o.RiskScoreTrendLine,
			ThreatsTrendline:                        &o.ThreatsTrendline,
			ZHash:                                   &o.ZHash,
			Zone:                                    &o.Zone,
		}
	}

	sp := &SparseNGFWRiskAssessmentDashboard{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "assetsAtRiskTrendline":
			sp.AssetsAtRiskTrendline = &(o.AssetsAtRiskTrendline)
		case "cloudAccountID":
			sp.CloudAccountID = &(o.CloudAccountID)
		case "customDateFilterEnd":
			sp.CustomDateFilterEnd = &(o.CustomDateFilterEnd)
		case "customDateFilterStart":
			sp.CustomDateFilterStart = &(o.CustomDateFilterStart)
		case "dateRangeFilter":
			sp.DateRangeFilter = &(o.DateRangeFilter)
		case "migrationsLog":
			sp.MigrationsLog = &(o.MigrationsLog)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "recommendedFirewallDeploymentsTrendline":
			sp.RecommendedFirewallDeploymentsTrendline = &(o.RecommendedFirewallDeploymentsTrendline)
		case "riskScoreConfidenceLevel":
			sp.RiskScoreConfidenceLevel = &(o.RiskScoreConfidenceLevel)
		case "riskScoreTrendLine":
			sp.RiskScoreTrendLine = &(o.RiskScoreTrendLine)
		case "threatsTrendline":
			sp.ThreatsTrendline = &(o.ThreatsTrendline)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseNGFWRiskAssessmentDashboard to the object.
func (o *NGFWRiskAssessmentDashboard) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseNGFWRiskAssessmentDashboard)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.AssetsAtRiskTrendline != nil {
		o.AssetsAtRiskTrendline = *so.AssetsAtRiskTrendline
	}
	if so.CloudAccountID != nil {
		o.CloudAccountID = *so.CloudAccountID
	}
	if so.CustomDateFilterEnd != nil {
		o.CustomDateFilterEnd = *so.CustomDateFilterEnd
	}
	if so.CustomDateFilterStart != nil {
		o.CustomDateFilterStart = *so.CustomDateFilterStart
	}
	if so.DateRangeFilter != nil {
		o.DateRangeFilter = *so.DateRangeFilter
	}
	if so.MigrationsLog != nil {
		o.MigrationsLog = *so.MigrationsLog
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.RecommendedFirewallDeploymentsTrendline != nil {
		o.RecommendedFirewallDeploymentsTrendline = *so.RecommendedFirewallDeploymentsTrendline
	}
	if so.RiskScoreConfidenceLevel != nil {
		o.RiskScoreConfidenceLevel = *so.RiskScoreConfidenceLevel
	}
	if so.RiskScoreTrendLine != nil {
		o.RiskScoreTrendLine = *so.RiskScoreTrendLine
	}
	if so.ThreatsTrendline != nil {
		o.ThreatsTrendline = *so.ThreatsTrendline
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the NGFWRiskAssessmentDashboard.
func (o *NGFWRiskAssessmentDashboard) DeepCopy() *NGFWRiskAssessmentDashboard {

	if o == nil {
		return nil
	}

	out := &NGFWRiskAssessmentDashboard{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *NGFWRiskAssessmentDashboard.
func (o *NGFWRiskAssessmentDashboard) DeepCopyInto(out *NGFWRiskAssessmentDashboard) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy NGFWRiskAssessmentDashboard: %s", err))
	}

	*out = *target.(*NGFWRiskAssessmentDashboard)
}

// Validate valides the current information stored into the structure.
func (o *NGFWRiskAssessmentDashboard) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("cloudAccountID", o.CloudAccountID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("riskScoreConfidenceLevel", string(o.RiskScoreConfidenceLevel), []string{"LowConfidence", "MediumConfidence", "HighConfidence", "VeryHighConfidence"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*NGFWRiskAssessmentDashboard) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := NGFWRiskAssessmentDashboardAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return NGFWRiskAssessmentDashboardLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*NGFWRiskAssessmentDashboard) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return NGFWRiskAssessmentDashboardAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *NGFWRiskAssessmentDashboard) ValueForAttribute(name string) interface{} {

	switch name {
	case "ID":
		return o.ID
	case "assetsAtRiskTrendline":
		return o.AssetsAtRiskTrendline
	case "cloudAccountID":
		return o.CloudAccountID
	case "customDateFilterEnd":
		return o.CustomDateFilterEnd
	case "customDateFilterStart":
		return o.CustomDateFilterStart
	case "dateRangeFilter":
		return o.DateRangeFilter
	case "migrationsLog":
		return o.MigrationsLog
	case "namespace":
		return o.Namespace
	case "recommendedFirewallDeploymentsTrendline":
		return o.RecommendedFirewallDeploymentsTrendline
	case "riskScoreConfidenceLevel":
		return o.RiskScoreConfidenceLevel
	case "riskScoreTrendLine":
		return o.RiskScoreTrendLine
	case "threatsTrendline":
		return o.ThreatsTrendline
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// NGFWRiskAssessmentDashboardAttributesMap represents the map of attribute for NGFWRiskAssessmentDashboard.
var NGFWRiskAssessmentDashboardAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"AssetsAtRiskTrendline": {
		AllowedChoices: []string{},
		ConvertedName:  "AssetsAtRiskTrendline",
		Description: `Array of number of workloads contacting suspicious domains, involved in
anomalous activities, 
or internet facing with high / critical vulnerabilities detected in provided
range.`,
		Exposed: true,
		Name:    "assetsAtRiskTrendline",
		SubType: "integer",
		Type:    "list",
	},
	"CloudAccountID": {
		AllowedChoices: []string{},
		BSONFieldName:  "cloudaccountid",
		ConvertedName:  "CloudAccountID",
		Description:    `The specified cloud account to provide risk asssessment metrics for.`,
		Exposed:        true,
		Name:           "cloudAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"CustomDateFilterEnd": {
		AllowedChoices: []string{},
		ConvertedName:  "CustomDateFilterEnd",
		Description:    `The end of the custom date range when CustomDate is used for dateRangeFilter.`,
		Name:           "customDateFilterEnd",
		Type:           "time",
	},
	"CustomDateFilterStart": {
		AllowedChoices: []string{},
		ConvertedName:  "CustomDateFilterStart",
		Description:    `The start of the custom date range when CustomDate is used for dateRangeFilter.`,
		Name:           "customDateFilterStart",
		Type:           "time",
	},
	"DateRangeFilter": {
		AllowedChoices: []string{"Last24Hours", "LastWeek", "LastMonth", "Last90Days", "CustomDate"},
		ConvertedName:  "DateRangeFilter",
		DefaultValue:   NGFWRiskAssessmentDashboardDateRangeFilterLast24Hours,
		Description:    `The specified date range filter type.`,
		Name:           "dateRangeFilter",
		Required:       true,
		Type:           "enum",
	},
	"MigrationsLog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"RecommendedFirewallDeploymentsTrendline": {
		AllowedChoices: []string{},
		ConvertedName:  "RecommendedFirewallDeploymentsTrendline",
		Description:    `Array of number of recommended firewall deployments in provided range.`,
		Exposed:        true,
		Name:           "recommendedFirewallDeploymentsTrendline",
		SubType:        "integer",
		Type:           "list",
	},
	"RiskScoreConfidenceLevel": {
		AllowedChoices: []string{"LowConfidence", "MediumConfidence", "HighConfidence", "VeryHighConfidence"},
		ConvertedName:  "RiskScoreConfidenceLevel",
		DefaultValue:   NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelLowConfidence,
		Description:    `Latest risk score confidence level in provided range.`,
		Exposed:        true,
		Name:           "riskScoreConfidenceLevel",
		Type:           "enum",
	},
	"RiskScoreTrendLine": {
		AllowedChoices: []string{},
		ConvertedName:  "RiskScoreTrendLine",
		Description:    `Array of risk score values over provided range.`,
		Exposed:        true,
		Name:           "riskScoreTrendLine",
		SubType:        "integer",
		Type:           "list",
	},
	"ThreatsTrendline": {
		AllowedChoices: []string{},
		ConvertedName:  "ThreatsTrendline",
		Description:    `Array of number of CVEs on internet exposed assets detected in provided range.`,
		Exposed:        true,
		Name:           "threatsTrendline",
		SubType:        "integer",
		Type:           "list",
	},
	"ZHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"Zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// NGFWRiskAssessmentDashboardLowerCaseAttributesMap represents the map of attribute for NGFWRiskAssessmentDashboard.
var NGFWRiskAssessmentDashboardLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"assetsatrisktrendline": {
		AllowedChoices: []string{},
		ConvertedName:  "AssetsAtRiskTrendline",
		Description: `Array of number of workloads contacting suspicious domains, involved in
anomalous activities, 
or internet facing with high / critical vulnerabilities detected in provided
range.`,
		Exposed: true,
		Name:    "assetsAtRiskTrendline",
		SubType: "integer",
		Type:    "list",
	},
	"cloudaccountid": {
		AllowedChoices: []string{},
		BSONFieldName:  "cloudaccountid",
		ConvertedName:  "CloudAccountID",
		Description:    `The specified cloud account to provide risk asssessment metrics for.`,
		Exposed:        true,
		Name:           "cloudAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"customdatefilterend": {
		AllowedChoices: []string{},
		ConvertedName:  "CustomDateFilterEnd",
		Description:    `The end of the custom date range when CustomDate is used for dateRangeFilter.`,
		Name:           "customDateFilterEnd",
		Type:           "time",
	},
	"customdatefilterstart": {
		AllowedChoices: []string{},
		ConvertedName:  "CustomDateFilterStart",
		Description:    `The start of the custom date range when CustomDate is used for dateRangeFilter.`,
		Name:           "customDateFilterStart",
		Type:           "time",
	},
	"daterangefilter": {
		AllowedChoices: []string{"Last24Hours", "LastWeek", "LastMonth", "Last90Days", "CustomDate"},
		ConvertedName:  "DateRangeFilter",
		DefaultValue:   NGFWRiskAssessmentDashboardDateRangeFilterLast24Hours,
		Description:    `The specified date range filter type.`,
		Name:           "dateRangeFilter",
		Required:       true,
		Type:           "enum",
	},
	"migrationslog": {
		AllowedChoices: []string{},
		BSONFieldName:  "migrationslog",
		ConvertedName:  "MigrationsLog",
		Description:    `Internal property maintaining migrations information.`,
		Getter:         true,
		Name:           "migrationsLog",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string]string",
		Type:           "external",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"recommendedfirewalldeploymentstrendline": {
		AllowedChoices: []string{},
		ConvertedName:  "RecommendedFirewallDeploymentsTrendline",
		Description:    `Array of number of recommended firewall deployments in provided range.`,
		Exposed:        true,
		Name:           "recommendedFirewallDeploymentsTrendline",
		SubType:        "integer",
		Type:           "list",
	},
	"riskscoreconfidencelevel": {
		AllowedChoices: []string{"LowConfidence", "MediumConfidence", "HighConfidence", "VeryHighConfidence"},
		ConvertedName:  "RiskScoreConfidenceLevel",
		DefaultValue:   NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelLowConfidence,
		Description:    `Latest risk score confidence level in provided range.`,
		Exposed:        true,
		Name:           "riskScoreConfidenceLevel",
		Type:           "enum",
	},
	"riskscoretrendline": {
		AllowedChoices: []string{},
		ConvertedName:  "RiskScoreTrendLine",
		Description:    `Array of risk score values over provided range.`,
		Exposed:        true,
		Name:           "riskScoreTrendLine",
		SubType:        "integer",
		Type:           "list",
	},
	"threatstrendline": {
		AllowedChoices: []string{},
		ConvertedName:  "ThreatsTrendline",
		Description:    `Array of number of CVEs on internet exposed assets detected in provided range.`,
		Exposed:        true,
		Name:           "threatsTrendline",
		SubType:        "integer",
		Type:           "list",
	},
	"zhash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zhash",
		ConvertedName:  "ZHash",
		Description: `geographical hash of the data. This is used for sharding and
georedundancy.`,
		Getter:   true,
		Name:     "zHash",
		ReadOnly: true,
		Setter:   true,
		Stored:   true,
		Type:     "integer",
	},
	"zone": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "zone",
		ConvertedName:  "Zone",
		Description:    `Logical storage zone. Used for sharding.`,
		Getter:         true,
		Name:           "zone",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Transient:      true,
		Type:           "integer",
	},
}

// SparseNGFWRiskAssessmentDashboardsList represents a list of SparseNGFWRiskAssessmentDashboards
type SparseNGFWRiskAssessmentDashboardsList []*SparseNGFWRiskAssessmentDashboard

// Identity returns the identity of the objects in the list.
func (o SparseNGFWRiskAssessmentDashboardsList) Identity() elemental.Identity {

	return NGFWRiskAssessmentDashboardIdentity
}

// Copy returns a pointer to a copy the SparseNGFWRiskAssessmentDashboardsList.
func (o SparseNGFWRiskAssessmentDashboardsList) Copy() elemental.Identifiables {

	copy := append(SparseNGFWRiskAssessmentDashboardsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseNGFWRiskAssessmentDashboardsList.
func (o SparseNGFWRiskAssessmentDashboardsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseNGFWRiskAssessmentDashboardsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseNGFWRiskAssessmentDashboard))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseNGFWRiskAssessmentDashboardsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseNGFWRiskAssessmentDashboardsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseNGFWRiskAssessmentDashboardsList converted to NGFWRiskAssessmentDashboardsList.
func (o SparseNGFWRiskAssessmentDashboardsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseNGFWRiskAssessmentDashboardsList) Version() int {

	return 1
}

// SparseNGFWRiskAssessmentDashboard represents the sparse version of a ngfwriskassessmentdashboard.
type SparseNGFWRiskAssessmentDashboard struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Array of number of workloads contacting suspicious domains, involved in
	// anomalous activities,
	// or internet facing with high / critical vulnerabilities detected in provided
	// range.
	AssetsAtRiskTrendline *[]int `json:"assetsAtRiskTrendline,omitempty" msgpack:"assetsAtRiskTrendline,omitempty" bson:"-" mapstructure:"assetsAtRiskTrendline,omitempty"`

	// The specified cloud account to provide risk asssessment metrics for.
	CloudAccountID *string `json:"cloudAccountID,omitempty" msgpack:"cloudAccountID,omitempty" bson:"cloudaccountid,omitempty" mapstructure:"cloudAccountID,omitempty"`

	// The end of the custom date range when CustomDate is used for dateRangeFilter.
	CustomDateFilterEnd *time.Time `json:"-" msgpack:"-" bson:"-" mapstructure:"-,omitempty"`

	// The start of the custom date range when CustomDate is used for dateRangeFilter.
	CustomDateFilterStart *time.Time `json:"-" msgpack:"-" bson:"-" mapstructure:"-,omitempty"`

	// The specified date range filter type.
	DateRangeFilter *NGFWRiskAssessmentDashboardDateRangeFilterValue `json:"-" msgpack:"-" bson:"-" mapstructure:"-,omitempty"`

	// Internal property maintaining migrations information.
	MigrationsLog *map[string]string `json:"-" msgpack:"-" bson:"migrationslog,omitempty" mapstructure:"-,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Array of number of recommended firewall deployments in provided range.
	RecommendedFirewallDeploymentsTrendline *[]int `json:"recommendedFirewallDeploymentsTrendline,omitempty" msgpack:"recommendedFirewallDeploymentsTrendline,omitempty" bson:"-" mapstructure:"recommendedFirewallDeploymentsTrendline,omitempty"`

	// Latest risk score confidence level in provided range.
	RiskScoreConfidenceLevel *NGFWRiskAssessmentDashboardRiskScoreConfidenceLevelValue `json:"riskScoreConfidenceLevel,omitempty" msgpack:"riskScoreConfidenceLevel,omitempty" bson:"-" mapstructure:"riskScoreConfidenceLevel,omitempty"`

	// Array of risk score values over provided range.
	RiskScoreTrendLine *[]int `json:"riskScoreTrendLine,omitempty" msgpack:"riskScoreTrendLine,omitempty" bson:"-" mapstructure:"riskScoreTrendLine,omitempty"`

	// Array of number of CVEs on internet exposed assets detected in provided range.
	ThreatsTrendline *[]int `json:"threatsTrendline,omitempty" msgpack:"threatsTrendline,omitempty" bson:"-" mapstructure:"threatsTrendline,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseNGFWRiskAssessmentDashboard returns a new  SparseNGFWRiskAssessmentDashboard.
func NewSparseNGFWRiskAssessmentDashboard() *SparseNGFWRiskAssessmentDashboard {
	return &SparseNGFWRiskAssessmentDashboard{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseNGFWRiskAssessmentDashboard) Identity() elemental.Identity {

	return NGFWRiskAssessmentDashboardIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseNGFWRiskAssessmentDashboard) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseNGFWRiskAssessmentDashboard) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseNGFWRiskAssessmentDashboard) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseNGFWRiskAssessmentDashboard{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.CloudAccountID != nil {
		s.CloudAccountID = o.CloudAccountID
	}
	if o.MigrationsLog != nil {
		s.MigrationsLog = o.MigrationsLog
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseNGFWRiskAssessmentDashboard) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseNGFWRiskAssessmentDashboard{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.CloudAccountID != nil {
		o.CloudAccountID = s.CloudAccountID
	}
	if s.MigrationsLog != nil {
		o.MigrationsLog = s.MigrationsLog
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseNGFWRiskAssessmentDashboard) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseNGFWRiskAssessmentDashboard) ToPlain() elemental.PlainIdentifiable {

	out := NewNGFWRiskAssessmentDashboard()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.AssetsAtRiskTrendline != nil {
		out.AssetsAtRiskTrendline = *o.AssetsAtRiskTrendline
	}
	if o.CloudAccountID != nil {
		out.CloudAccountID = *o.CloudAccountID
	}
	if o.CustomDateFilterEnd != nil {
		out.CustomDateFilterEnd = *o.CustomDateFilterEnd
	}
	if o.CustomDateFilterStart != nil {
		out.CustomDateFilterStart = *o.CustomDateFilterStart
	}
	if o.DateRangeFilter != nil {
		out.DateRangeFilter = *o.DateRangeFilter
	}
	if o.MigrationsLog != nil {
		out.MigrationsLog = *o.MigrationsLog
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.RecommendedFirewallDeploymentsTrendline != nil {
		out.RecommendedFirewallDeploymentsTrendline = *o.RecommendedFirewallDeploymentsTrendline
	}
	if o.RiskScoreConfidenceLevel != nil {
		out.RiskScoreConfidenceLevel = *o.RiskScoreConfidenceLevel
	}
	if o.RiskScoreTrendLine != nil {
		out.RiskScoreTrendLine = *o.RiskScoreTrendLine
	}
	if o.ThreatsTrendline != nil {
		out.ThreatsTrendline = *o.ThreatsTrendline
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetMigrationsLog returns the MigrationsLog of the receiver.
func (o *SparseNGFWRiskAssessmentDashboard) GetMigrationsLog() (out map[string]string) {

	if o.MigrationsLog == nil {
		return
	}

	return *o.MigrationsLog
}

// SetMigrationsLog sets the property MigrationsLog of the receiver using the address of the given value.
func (o *SparseNGFWRiskAssessmentDashboard) SetMigrationsLog(migrationsLog map[string]string) {

	o.MigrationsLog = &migrationsLog
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseNGFWRiskAssessmentDashboard) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseNGFWRiskAssessmentDashboard) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetZHash returns the ZHash of the receiver.
func (o *SparseNGFWRiskAssessmentDashboard) GetZHash() (out int) {

	if o.ZHash == nil {
		return
	}

	return *o.ZHash
}

// SetZHash sets the property ZHash of the receiver using the address of the given value.
func (o *SparseNGFWRiskAssessmentDashboard) SetZHash(zHash int) {

	o.ZHash = &zHash
}

// GetZone returns the Zone of the receiver.
func (o *SparseNGFWRiskAssessmentDashboard) GetZone() (out int) {

	if o.Zone == nil {
		return
	}

	return *o.Zone
}

// SetZone sets the property Zone of the receiver using the address of the given value.
func (o *SparseNGFWRiskAssessmentDashboard) SetZone(zone int) {

	o.Zone = &zone
}

// DeepCopy returns a deep copy if the SparseNGFWRiskAssessmentDashboard.
func (o *SparseNGFWRiskAssessmentDashboard) DeepCopy() *SparseNGFWRiskAssessmentDashboard {

	if o == nil {
		return nil
	}

	out := &SparseNGFWRiskAssessmentDashboard{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseNGFWRiskAssessmentDashboard.
func (o *SparseNGFWRiskAssessmentDashboard) DeepCopyInto(out *SparseNGFWRiskAssessmentDashboard) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseNGFWRiskAssessmentDashboard: %s", err))
	}

	*out = *target.(*SparseNGFWRiskAssessmentDashboard)
}

type mongoAttributesNGFWRiskAssessmentDashboard struct {
	ID             bson.ObjectId     `bson:"_id,omitempty"`
	CloudAccountID string            `bson:"cloudaccountid"`
	MigrationsLog  map[string]string `bson:"migrationslog,omitempty"`
	Namespace      string            `bson:"namespace"`
	ZHash          int               `bson:"zhash"`
	Zone           int               `bson:"zone"`
}
type mongoAttributesSparseNGFWRiskAssessmentDashboard struct {
	ID             bson.ObjectId      `bson:"_id,omitempty"`
	CloudAccountID *string            `bson:"cloudaccountid,omitempty"`
	MigrationsLog  *map[string]string `bson:"migrationslog,omitempty"`
	Namespace      *string            `bson:"namespace,omitempty"`
	ZHash          *int               `bson:"zhash,omitempty"`
	Zone           *int               `bson:"zone,omitempty"`
}
