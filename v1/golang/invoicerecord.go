package gaia

import (
	"fmt"
	"sync"

	"github.com/aporeto-inc/elemental"
	"github.com/aporeto-inc/gaia/v1/golang/types"
)

// InvoiceRecordIdentity represents the Identity of the object.
var InvoiceRecordIdentity = elemental.Identity{
	Name:     "invoicerecord",
	Category: "invoicerecords",
	Private:  false,
}

// InvoiceRecordsList represents a list of InvoiceRecords
type InvoiceRecordsList []*InvoiceRecord

// ContentIdentity returns the identity of the objects in the list.
func (o InvoiceRecordsList) ContentIdentity() elemental.Identity {

	return InvoiceRecordIdentity
}

// Copy returns a pointer to a copy the InvoiceRecordsList.
func (o InvoiceRecordsList) Copy() elemental.ContentIdentifiable {

	copy := append(InvoiceRecordsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the InvoiceRecordsList.
func (o InvoiceRecordsList) Append(objects ...elemental.Identifiable) elemental.ContentIdentifiable {

	out := append(InvoiceRecordsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*InvoiceRecord))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o InvoiceRecordsList) List() elemental.IdentifiablesList {

	out := elemental.IdentifiablesList{}
	for _, item := range o {
		out = append(out, item)
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o InvoiceRecordsList) DefaultOrder() []string {

	return []string{}
}

// Version returns the version of the content.
func (o InvoiceRecordsList) Version() int {

	return 1
}

// InvoiceRecord represents the model of a invoicerecord
type InvoiceRecord struct {
	// EnforcerID specifies the identity of the enforcer that reported the billing units.
	EnforcerID string `json:"enforcerID" bson:"enforcerid" mapstructure:"enforcerID,omitempty"`

	// MachineType specifies the machine information that is used to find the number of units of compute used.
	MachineType string `json:"machineType" bson:"machinetype" mapstructure:"machineType,omitempty"`

	// MachineUnits specifies the units of processing used for this compute platform.
	MachineUnits int `json:"machineUnits" bson:"machineunits" mapstructure:"machineUnits,omitempty"`

	// Records stores time stamps when the enforcer was active.
	Records []*types.InvoiceRecordDetails `json:"records" bson:"records" mapstructure:"records,omitempty"`

	ModelVersion int `json:"-" bson:"_modelversion"`

	sync.Mutex
}

// NewInvoiceRecord returns a new *InvoiceRecord
func NewInvoiceRecord() *InvoiceRecord {

	return &InvoiceRecord{
		ModelVersion: 1,
		Records:      []*types.InvoiceRecordDetails{},
	}
}

// Identity returns the Identity of the object.
func (o *InvoiceRecord) Identity() elemental.Identity {

	return InvoiceRecordIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *InvoiceRecord) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *InvoiceRecord) SetIdentifier(id string) {

}

// Version returns the hardcoded version of the model.
func (o *InvoiceRecord) Version() int {

	return 1
}

// DefaultOrder returns the list of default ordering fields.
func (o *InvoiceRecord) DefaultOrder() []string {

	return []string{}
}

func (o *InvoiceRecord) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// Validate valides the current information stored into the structure.
func (o *InvoiceRecord) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*InvoiceRecord) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := InvoiceRecordAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return InvoiceRecordLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*InvoiceRecord) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return InvoiceRecordAttributesMap
}

// InvoiceRecordAttributesMap represents the map of attribute for InvoiceRecord.
var InvoiceRecordAttributesMap = map[string]elemental.AttributeSpecification{
	"EnforcerID": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "EnforcerID",
		Description:    `EnforcerID specifies the identity of the enforcer that reported the billing units.`,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "enforcerID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"MachineType": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "MachineType",
		Description:    `MachineType specifies the machine information that is used to find the number of units of compute used.`,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "machineType",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"MachineUnits": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "MachineUnits",
		Description:    `MachineUnits specifies the units of processing used for this compute platform.`,
		Exposed:        true,
		Filterable:     true,
		Name:           "machineUnits",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "integer",
	},
	"Records": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Records",
		Description:    `Records stores time stamps when the enforcer was active.`,
		Exposed:        true,
		Name:           "records",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		SubType:        "invoicerecorddetails_list",
		Type:           "external",
	},
}

// InvoiceRecordLowerCaseAttributesMap represents the map of attribute for InvoiceRecord.
var InvoiceRecordLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"enforcerid": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "EnforcerID",
		Description:    `EnforcerID specifies the identity of the enforcer that reported the billing units.`,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "enforcerID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"machinetype": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "MachineType",
		Description:    `MachineType specifies the machine information that is used to find the number of units of compute used.`,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "machineType",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"machineunits": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "MachineUnits",
		Description:    `MachineUnits specifies the units of processing used for this compute platform.`,
		Exposed:        true,
		Filterable:     true,
		Name:           "machineUnits",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "integer",
	},
	"records": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Records",
		Description:    `Records stores time stamps when the enforcer was active.`,
		Exposed:        true,
		Name:           "records",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		SubType:        "invoicerecorddetails_list",
		Type:           "external",
	},
}
