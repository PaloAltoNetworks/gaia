// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// SignhashIdentity represents the Identity of the object.
var SignhashIdentity = elemental.Identity{
	Name:     "signhash",
	Category: "signhashes",
	Package:  "barret",
	Private:  true,
}

// SignhashsList represents a list of Signhashs
type SignhashsList []*Signhash

// Identity returns the identity of the objects in the list.
func (o SignhashsList) Identity() elemental.Identity {

	return SignhashIdentity
}

// Copy returns a pointer to a copy the SignhashsList.
func (o SignhashsList) Copy() elemental.Identifiables {

	copy := append(SignhashsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SignhashsList.
func (o SignhashsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SignhashsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*Signhash))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SignhashsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SignhashsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the SignhashsList converted to SparseSignhashsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o SignhashsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseSignhashsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseSignhash)
	}

	return out
}

// Version returns the version of the content.
func (o SignhashsList) Version() int {

	return 1
}

// Signhash represents the model of a signhash
type Signhash struct {
	// hash string that needs to be signed.
	HashString string `json:"hashString" msgpack:"hashString" bson:"-" mapstructure:"hashString,omitempty"`

	// Contains the signature of the hashed string.
	SignedHashString string `json:"signedHashString" msgpack:"signedHashString" bson:"-" mapstructure:"signedHashString,omitempty"`

	// SigningKeyID holds the ID of the custom CA to use to sign the hash.
	SigningKeyID string `json:"signingKeyID" msgpack:"signingKeyID" bson:"-" mapstructure:"signingKeyID,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSignhash returns a new *Signhash
func NewSignhash() *Signhash {

	return &Signhash{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *Signhash) Identity() elemental.Identity {

	return SignhashIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *Signhash) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *Signhash) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Signhash) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSignhash{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Signhash) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSignhash{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *Signhash) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *Signhash) BleveType() string {

	return "signhash"
}

// DefaultOrder returns the list of default ordering fields.
func (o *Signhash) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *Signhash) Doc() string {

	return `Signs the hash string using the ecdsa algorithm.`
}

func (o *Signhash) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *Signhash) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseSignhash{
			HashString:       &o.HashString,
			SignedHashString: &o.SignedHashString,
			SigningKeyID:     &o.SigningKeyID,
		}
	}

	sp := &SparseSignhash{}
	for _, f := range fields {
		switch f {
		case "hashString":
			sp.HashString = &(o.HashString)
		case "signedHashString":
			sp.SignedHashString = &(o.SignedHashString)
		case "signingKeyID":
			sp.SigningKeyID = &(o.SigningKeyID)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseSignhash to the object.
func (o *Signhash) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseSignhash)
	if so.HashString != nil {
		o.HashString = *so.HashString
	}
	if so.SignedHashString != nil {
		o.SignedHashString = *so.SignedHashString
	}
	if so.SigningKeyID != nil {
		o.SigningKeyID = *so.SigningKeyID
	}
}

// DeepCopy returns a deep copy if the Signhash.
func (o *Signhash) DeepCopy() *Signhash {

	if o == nil {
		return nil
	}

	out := &Signhash{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Signhash.
func (o *Signhash) DeepCopyInto(out *Signhash) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Signhash: %s", err))
	}

	*out = *target.(*Signhash)
}

// Validate valides the current information stored into the structure.
func (o *Signhash) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Signhash) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := SignhashAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return SignhashLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Signhash) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return SignhashAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Signhash) ValueForAttribute(name string) interface{} {

	switch name {
	case "hashString":
		return o.HashString
	case "signedHashString":
		return o.SignedHashString
	case "signingKeyID":
		return o.SigningKeyID
	}

	return nil
}

// SignhashAttributesMap represents the map of attribute for Signhash.
var SignhashAttributesMap = map[string]elemental.AttributeSpecification{
	"HashString": {
		AllowedChoices: []string{},
		ConvertedName:  "HashString",
		CreationOnly:   true,
		Description:    `hash string that needs to be signed.`,
		Exposed:        true,
		Name:           "hashString",
		Type:           "string",
	},
	"SignedHashString": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "SignedHashString",
		Description:    `Contains the signature of the hashed string.`,
		Exposed:        true,
		Name:           "signedHashString",
		ReadOnly:       true,
		Type:           "string",
	},
	"SigningKeyID": {
		AllowedChoices: []string{},
		ConvertedName:  "SigningKeyID",
		Description:    `SigningKeyID holds the ID of the custom CA to use to sign the hash.`,
		Exposed:        true,
		Name:           "signingKeyID",
		Type:           "string",
	},
}

// SignhashLowerCaseAttributesMap represents the map of attribute for Signhash.
var SignhashLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"hashstring": {
		AllowedChoices: []string{},
		ConvertedName:  "HashString",
		CreationOnly:   true,
		Description:    `hash string that needs to be signed.`,
		Exposed:        true,
		Name:           "hashString",
		Type:           "string",
	},
	"signedhashstring": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "SignedHashString",
		Description:    `Contains the signature of the hashed string.`,
		Exposed:        true,
		Name:           "signedHashString",
		ReadOnly:       true,
		Type:           "string",
	},
	"signingkeyid": {
		AllowedChoices: []string{},
		ConvertedName:  "SigningKeyID",
		Description:    `SigningKeyID holds the ID of the custom CA to use to sign the hash.`,
		Exposed:        true,
		Name:           "signingKeyID",
		Type:           "string",
	},
}

// SparseSignhashsList represents a list of SparseSignhashs
type SparseSignhashsList []*SparseSignhash

// Identity returns the identity of the objects in the list.
func (o SparseSignhashsList) Identity() elemental.Identity {

	return SignhashIdentity
}

// Copy returns a pointer to a copy the SparseSignhashsList.
func (o SparseSignhashsList) Copy() elemental.Identifiables {

	copy := append(SparseSignhashsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseSignhashsList.
func (o SparseSignhashsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseSignhashsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseSignhash))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseSignhashsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseSignhashsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseSignhashsList converted to SignhashsList.
func (o SparseSignhashsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseSignhashsList) Version() int {

	return 1
}

// SparseSignhash represents the sparse version of a signhash.
type SparseSignhash struct {
	// hash string that needs to be signed.
	HashString *string `json:"hashString,omitempty" msgpack:"hashString,omitempty" bson:"-" mapstructure:"hashString,omitempty"`

	// Contains the signature of the hashed string.
	SignedHashString *string `json:"signedHashString,omitempty" msgpack:"signedHashString,omitempty" bson:"-" mapstructure:"signedHashString,omitempty"`

	// SigningKeyID holds the ID of the custom CA to use to sign the hash.
	SigningKeyID *string `json:"signingKeyID,omitempty" msgpack:"signingKeyID,omitempty" bson:"-" mapstructure:"signingKeyID,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseSignhash returns a new  SparseSignhash.
func NewSparseSignhash() *SparseSignhash {
	return &SparseSignhash{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseSignhash) Identity() elemental.Identity {

	return SignhashIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseSignhash) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseSignhash) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSignhash) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseSignhash{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseSignhash) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseSignhash{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseSignhash) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseSignhash) ToPlain() elemental.PlainIdentifiable {

	out := NewSignhash()
	if o.HashString != nil {
		out.HashString = *o.HashString
	}
	if o.SignedHashString != nil {
		out.SignedHashString = *o.SignedHashString
	}
	if o.SigningKeyID != nil {
		out.SigningKeyID = *o.SigningKeyID
	}

	return out
}

// DeepCopy returns a deep copy if the SparseSignhash.
func (o *SparseSignhash) DeepCopy() *SparseSignhash {

	if o == nil {
		return nil
	}

	out := &SparseSignhash{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseSignhash.
func (o *SparseSignhash) DeepCopyInto(out *SparseSignhash) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseSignhash: %s", err))
	}

	*out = *target.(*SparseSignhash)
}

type mongoAttributesSignhash struct {
}
type mongoAttributesSparseSignhash struct {
}
