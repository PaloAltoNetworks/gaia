// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallLog represents the model of a firewalllog
type FirewallLog struct {
	// Firewall log lines.
	LogLines []*FirewallLogLine `json:"logLines" msgpack:"logLines" bson:"-" mapstructure:"logLines,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallLog returns a new *FirewallLog
func NewFirewallLog() *FirewallLog {

	return &FirewallLog{
		ModelVersion: 1,
		LogLines:     []*FirewallLogLine{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallLog) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallLog{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallLog) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallLog{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallLog) BleveType() string {

	return "firewalllog"
}

// DeepCopy returns a deep copy if the FirewallLog.
func (o *FirewallLog) DeepCopy() *FirewallLog {

	if o == nil {
		return nil
	}

	out := &FirewallLog{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallLog.
func (o *FirewallLog) DeepCopyInto(out *FirewallLog) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallLog: %s", err))
	}

	*out = *target.(*FirewallLog)
}

// Validate valides the current information stored into the structure.
func (o *FirewallLog) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.LogLines {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallLog) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallLogAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallLogLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallLog) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallLogAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallLog) ValueForAttribute(name string) interface{} {

	switch name {
	case "logLines":
		return o.LogLines
	}

	return nil
}

// FirewallLogAttributesMap represents the map of attribute for FirewallLog.
var FirewallLogAttributesMap = map[string]elemental.AttributeSpecification{
	"LogLines": {
		AllowedChoices: []string{},
		ConvertedName:  "LogLines",
		Description:    `Firewall log lines.`,
		Exposed:        true,
		Name:           "logLines",
		SubType:        "firewalllogline",
		Type:           "refList",
	},
}

// FirewallLogLowerCaseAttributesMap represents the map of attribute for FirewallLog.
var FirewallLogLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"loglines": {
		AllowedChoices: []string{},
		ConvertedName:  "LogLines",
		Description:    `Firewall log lines.`,
		Exposed:        true,
		Name:           "logLines",
		SubType:        "firewalllogline",
		Type:           "refList",
	},
}

type mongoAttributesFirewallLog struct {
}
