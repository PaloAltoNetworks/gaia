package gaia

import "fmt"
import "github.com/aporeto-inc/elemental"

const (
	RenderedPoliciesAttributeNameID               elemental.AttributeSpecificationNameKey = "renderedpolicies/ID"
	RenderedPoliciesAttributeNameEgressPolicies   elemental.AttributeSpecificationNameKey = "renderedpolicies/egressPolicies"
	RenderedPoliciesAttributeNameIngressPolicies  elemental.AttributeSpecificationNameKey = "renderedpolicies/ingressPolicies"
	RenderedPoliciesAttributeNameProcessingUnitID elemental.AttributeSpecificationNameKey = "renderedpolicies/processingUnitID"
)

// RenderedPoliciesIdentity represents the Identity of the object
var RenderedPoliciesIdentity = elemental.Identity{
	Name:     "renderedpolicies",
	Category: "renderedpolicies",
}

// RenderedPoliciesList represents a list of RenderedPolicies
type RenderedPoliciesList []*RenderedPolicies

// RenderedPolicies represents the model of a renderedpolicies
type RenderedPolicies struct {
	ID               string                  `json:"ID,omitempty" cql:"-"`
	EgressPolicies   map[string][]PolicyRule `json:"egressPolicies,omitempty" cql:"-"`
	IngressPolicies  map[string][]PolicyRule `json:"ingressPolicies,omitempty" cql:"-"`
	ProcessingUnitID string                  `json:"processingUnitID,omitempty" cql:"-"`
}

// NewRenderedPolicies returns a new *RenderedPolicies
func NewRenderedPolicies() *RenderedPolicies {

	return &RenderedPolicies{}
}

// Identity returns the Identity of the object.
func (o *RenderedPolicies) Identity() elemental.Identity {

	return RenderedPoliciesIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *RenderedPolicies) Identifier() string {

	return o.ProcessingUnitID
}

func (o *RenderedPolicies) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *RenderedPolicies) SetIdentifier(ID string) {

	o.ProcessingUnitID = ID
}

// Validate valides the current information stored into the structure.
func (o *RenderedPolicies) Validate() elemental.Errors {

	errors := elemental.Errors{}

	return errors
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (o RenderedPolicies) SpecificationForAttribute(name elemental.AttributeSpecificationNameKey) elemental.AttributeSpecification {

	return RenderedPoliciesAttributesMap[name]
}

var RenderedPoliciesAttributesMap = map[elemental.AttributeSpecificationNameKey]elemental.AttributeSpecification{
	RenderedPoliciesAttributeNameID: elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		Type:           "string",
		Unique:         true,
	},
	RenderedPoliciesAttributeNameEgressPolicies: elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "egressPolicies",
		Orderable:      true,
		SubType:        "rendered_policy",
		Type:           "external",
	},
	RenderedPoliciesAttributeNameIngressPolicies: elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Name:           "ingressPolicies",
		Orderable:      true,
		SubType:        "rendered_policy",
		Type:           "external",
	},
	RenderedPoliciesAttributeNameProcessingUnitID: elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		CreationOnly:   true,
		Exposed:        true,
		Format:         "free",
		Identifier:     true,
		Name:           "processingUnitID",
		Type:           "string",
		Unique:         true,
	},
}
