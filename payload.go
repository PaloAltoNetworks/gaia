// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// Payload represents the model of a payload
type Payload struct {
	// The raw content of the payload.
	Content string `json:"Content,omitempty" msgpack:"Content,omitempty" bson:"-" mapstructure:"Content,omitempty"`

	// The end of the destination port range.
	DestinationPortEnd int `json:"DestinationPortEnd,omitempty" msgpack:"DestinationPortEnd,omitempty" bson:"-" mapstructure:"DestinationPortEnd,omitempty"`

	// The start of the destination port range.
	DestinationPortStart int `json:"DestinationPortStart,omitempty" msgpack:"DestinationPortStart,omitempty" bson:"-" mapstructure:"DestinationPortStart,omitempty"`

	// The end of the source port range.
	SourcePortEnd int `json:"SourcePortEnd,omitempty" msgpack:"SourcePortEnd,omitempty" bson:"-" mapstructure:"SourcePortEnd,omitempty"`

	// The start of the source port range.
	SourcePortStart int `json:"SourcePortStart,omitempty" msgpack:"SourcePortStart,omitempty" bson:"-" mapstructure:"SourcePortStart,omitempty"`

	// The protocol that is used for flooding.
	Protocol string `json:"protocol,omitempty" msgpack:"protocol,omitempty" bson:"-" mapstructure:"protocol,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPayload returns a new *Payload
func NewPayload() *Payload {

	return &Payload{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Payload) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPayload{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *Payload) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPayload{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *Payload) BleveType() string {

	return "payload"
}

// DeepCopy returns a deep copy if the Payload.
func (o *Payload) DeepCopy() *Payload {

	if o == nil {
		return nil
	}

	out := &Payload{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *Payload.
func (o *Payload) DeepCopyInto(out *Payload) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy Payload: %s", err))
	}

	*out = *target.(*Payload)
}

// Validate valides the current information stored into the structure.
func (o *Payload) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*Payload) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PayloadAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PayloadLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*Payload) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PayloadAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *Payload) ValueForAttribute(name string) any {

	switch name {
	case "Content":
		return o.Content
	case "DestinationPortEnd":
		return o.DestinationPortEnd
	case "DestinationPortStart":
		return o.DestinationPortStart
	case "SourcePortEnd":
		return o.SourcePortEnd
	case "SourcePortStart":
		return o.SourcePortStart
	case "protocol":
		return o.Protocol
	}

	return nil
}

// PayloadAttributesMap represents the map of attribute for Payload.
var PayloadAttributesMap = map[string]elemental.AttributeSpecification{
	"Content": {
		AllowedChoices: []string{},
		ConvertedName:  "Content",
		Description:    `The raw content of the payload.`,
		Exposed:        true,
		Name:           "Content",
		Type:           "string",
	},
	"DestinationPortEnd": {
		AllowedChoices: []string{},
		ConvertedName:  "DestinationPortEnd",
		Description:    `The end of the destination port range.`,
		Exposed:        true,
		Name:           "DestinationPortEnd",
		Type:           "integer",
	},
	"DestinationPortStart": {
		AllowedChoices: []string{},
		ConvertedName:  "DestinationPortStart",
		Description:    `The start of the destination port range.`,
		Exposed:        true,
		Name:           "DestinationPortStart",
		Type:           "integer",
	},
	"SourcePortEnd": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePortEnd",
		Description:    `The end of the source port range.`,
		Exposed:        true,
		Name:           "SourcePortEnd",
		Type:           "integer",
	},
	"SourcePortStart": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePortStart",
		Description:    `The start of the source port range.`,
		Exposed:        true,
		Name:           "SourcePortStart",
		Type:           "integer",
	},
	"Protocol": {
		AllowedChoices: []string{},
		ConvertedName:  "Protocol",
		Description:    `The protocol that is used for flooding.`,
		Exposed:        true,
		Name:           "protocol",
		Type:           "string",
	},
}

// PayloadLowerCaseAttributesMap represents the map of attribute for Payload.
var PayloadLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"content": {
		AllowedChoices: []string{},
		ConvertedName:  "Content",
		Description:    `The raw content of the payload.`,
		Exposed:        true,
		Name:           "Content",
		Type:           "string",
	},
	"destinationportend": {
		AllowedChoices: []string{},
		ConvertedName:  "DestinationPortEnd",
		Description:    `The end of the destination port range.`,
		Exposed:        true,
		Name:           "DestinationPortEnd",
		Type:           "integer",
	},
	"destinationportstart": {
		AllowedChoices: []string{},
		ConvertedName:  "DestinationPortStart",
		Description:    `The start of the destination port range.`,
		Exposed:        true,
		Name:           "DestinationPortStart",
		Type:           "integer",
	},
	"sourceportend": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePortEnd",
		Description:    `The end of the source port range.`,
		Exposed:        true,
		Name:           "SourcePortEnd",
		Type:           "integer",
	},
	"sourceportstart": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePortStart",
		Description:    `The start of the source port range.`,
		Exposed:        true,
		Name:           "SourcePortStart",
		Type:           "integer",
	},
	"protocol": {
		AllowedChoices: []string{},
		ConvertedName:  "Protocol",
		Description:    `The protocol that is used for flooding.`,
		Exposed:        true,
		Name:           "protocol",
		Type:           "string",
	},
}

type mongoAttributesPayload struct {
}
