// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FloodPayload represents the model of a floodpayload
type FloodPayload struct {
	// The raw content of the payload.
	Content string `json:"content,omitempty" msgpack:"content,omitempty" bson:"-" mapstructure:"content,omitempty"`

	// The end of the destination port range.
	DestinationPortEnd int `json:"destinationPortEnd,omitempty" msgpack:"destinationPortEnd,omitempty" bson:"-" mapstructure:"destinationPortEnd,omitempty"`

	// The start of the destination port range.
	DestinationPortStart int `json:"destinationPortStart,omitempty" msgpack:"destinationPortStart,omitempty" bson:"-" mapstructure:"destinationPortStart,omitempty"`

	// The protocol that is used for flooding.
	Protocol string `json:"protocol,omitempty" msgpack:"protocol,omitempty" bson:"-" mapstructure:"protocol,omitempty"`

	// The end of the source port range.
	SourcePortEnd int `json:"sourcePortEnd,omitempty" msgpack:"sourcePortEnd,omitempty" bson:"-" mapstructure:"sourcePortEnd,omitempty"`

	// The start of the source port range.
	SourcePortStart int `json:"sourcePortStart,omitempty" msgpack:"sourcePortStart,omitempty" bson:"-" mapstructure:"sourcePortStart,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFloodPayload returns a new *FloodPayload
func NewFloodPayload() *FloodPayload {

	return &FloodPayload{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FloodPayload) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFloodPayload{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FloodPayload) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFloodPayload{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FloodPayload) BleveType() string {

	return "floodpayload"
}

// DeepCopy returns a deep copy if the FloodPayload.
func (o *FloodPayload) DeepCopy() *FloodPayload {

	if o == nil {
		return nil
	}

	out := &FloodPayload{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FloodPayload.
func (o *FloodPayload) DeepCopyInto(out *FloodPayload) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FloodPayload: %s", err))
	}

	*out = *target.(*FloodPayload)
}

// Validate valides the current information stored into the structure.
func (o *FloodPayload) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FloodPayload) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FloodPayloadAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FloodPayloadLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FloodPayload) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FloodPayloadAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FloodPayload) ValueForAttribute(name string) any {

	switch name {
	case "content":
		return o.Content
	case "destinationPortEnd":
		return o.DestinationPortEnd
	case "destinationPortStart":
		return o.DestinationPortStart
	case "protocol":
		return o.Protocol
	case "sourcePortEnd":
		return o.SourcePortEnd
	case "sourcePortStart":
		return o.SourcePortStart
	}

	return nil
}

// FloodPayloadAttributesMap represents the map of attribute for FloodPayload.
var FloodPayloadAttributesMap = map[string]elemental.AttributeSpecification{
	"Content": {
		AllowedChoices: []string{},
		ConvertedName:  "Content",
		Description:    `The raw content of the payload.`,
		Exposed:        true,
		Name:           "content",
		Type:           "string",
	},
	"DestinationPortEnd": {
		AllowedChoices: []string{},
		ConvertedName:  "DestinationPortEnd",
		Description:    `The end of the destination port range.`,
		Exposed:        true,
		Name:           "destinationPortEnd",
		Type:           "integer",
	},
	"DestinationPortStart": {
		AllowedChoices: []string{},
		ConvertedName:  "DestinationPortStart",
		Description:    `The start of the destination port range.`,
		Exposed:        true,
		Name:           "destinationPortStart",
		Type:           "integer",
	},
	"Protocol": {
		AllowedChoices: []string{},
		ConvertedName:  "Protocol",
		Description:    `The protocol that is used for flooding.`,
		Exposed:        true,
		Name:           "protocol",
		Type:           "string",
	},
	"SourcePortEnd": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePortEnd",
		Description:    `The end of the source port range.`,
		Exposed:        true,
		Name:           "sourcePortEnd",
		Type:           "integer",
	},
	"SourcePortStart": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePortStart",
		Description:    `The start of the source port range.`,
		Exposed:        true,
		Name:           "sourcePortStart",
		Type:           "integer",
	},
}

// FloodPayloadLowerCaseAttributesMap represents the map of attribute for FloodPayload.
var FloodPayloadLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"content": {
		AllowedChoices: []string{},
		ConvertedName:  "Content",
		Description:    `The raw content of the payload.`,
		Exposed:        true,
		Name:           "content",
		Type:           "string",
	},
	"destinationportend": {
		AllowedChoices: []string{},
		ConvertedName:  "DestinationPortEnd",
		Description:    `The end of the destination port range.`,
		Exposed:        true,
		Name:           "destinationPortEnd",
		Type:           "integer",
	},
	"destinationportstart": {
		AllowedChoices: []string{},
		ConvertedName:  "DestinationPortStart",
		Description:    `The start of the destination port range.`,
		Exposed:        true,
		Name:           "destinationPortStart",
		Type:           "integer",
	},
	"protocol": {
		AllowedChoices: []string{},
		ConvertedName:  "Protocol",
		Description:    `The protocol that is used for flooding.`,
		Exposed:        true,
		Name:           "protocol",
		Type:           "string",
	},
	"sourceportend": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePortEnd",
		Description:    `The end of the source port range.`,
		Exposed:        true,
		Name:           "sourcePortEnd",
		Type:           "integer",
	},
	"sourceportstart": {
		AllowedChoices: []string{},
		ConvertedName:  "SourcePortStart",
		Description:    `The start of the source port range.`,
		Exposed:        true,
		Name:           "sourcePortStart",
		Type:           "integer",
	},
}

type mongoAttributesFloodPayload struct {
}
