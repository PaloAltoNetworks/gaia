package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
	"go.aporeto.io/gaia/constants"
)

// VulnerabilityTagIdentity represents the Identity of the object.
var VulnerabilityTagIdentity = elemental.Identity{
	Name:     "vulnerabilitytag",
	Category: "vulnerabilitytags",
	Package:  "aki",
	Private:  false,
}

// VulnerabilityTagsList represents a list of VulnerabilityTags
type VulnerabilityTagsList []*VulnerabilityTag

// Identity returns the identity of the objects in the list.
func (o VulnerabilityTagsList) Identity() elemental.Identity {

	return VulnerabilityTagIdentity
}

// Copy returns a pointer to a copy the VulnerabilityTagsList.
func (o VulnerabilityTagsList) Copy() elemental.Identifiables {

	copy := append(VulnerabilityTagsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the VulnerabilityTagsList.
func (o VulnerabilityTagsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(VulnerabilityTagsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*VulnerabilityTag))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o VulnerabilityTagsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o VulnerabilityTagsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the VulnerabilityTagsList converted to SparseVulnerabilityTagsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o VulnerabilityTagsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseVulnerabilityTagsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseVulnerabilityTag)
	}

	return out
}

// Version returns the version of the content.
func (o VulnerabilityTagsList) Version() int {

	return 1
}

// VulnerabilityTag represents the model of a vulnerabilitytag
type VulnerabilityTag struct {
	// Image name.
	Image string `json:"image" msgpack:"image" bson:"-" mapstructure:"image,omitempty"`

	// Internal property for optmization.
	Severity constants.Vulnerability `json:"severity" msgpack:"severity" bson:"-" mapstructure:"severity,omitempty"`

	// List of vulnerability tags associated to the give images.
	Vulnerabilities []string `json:"vulnerabilities" msgpack:"vulnerabilities" bson:"-" mapstructure:"vulnerabilities,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewVulnerabilityTag returns a new *VulnerabilityTag
func NewVulnerabilityTag() *VulnerabilityTag {

	return &VulnerabilityTag{
		ModelVersion:    1,
		Severity:        constants.VulnerabilityUnknown,
		Vulnerabilities: []string{},
	}
}

// Identity returns the Identity of the object.
func (o *VulnerabilityTag) Identity() elemental.Identity {

	return VulnerabilityTagIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *VulnerabilityTag) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *VulnerabilityTag) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *VulnerabilityTag) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesVulnerabilityTag{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *VulnerabilityTag) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesVulnerabilityTag{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *VulnerabilityTag) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *VulnerabilityTag) BleveType() string {

	return "vulnerabilitytag"
}

// DefaultOrder returns the list of default ordering fields.
func (o *VulnerabilityTag) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *VulnerabilityTag) Doc() string {

	return `Private API returning the tags related to eventual vulnerabilities.`
}

func (o *VulnerabilityTag) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *VulnerabilityTag) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseVulnerabilityTag{
			Image:           &o.Image,
			Severity:        &o.Severity,
			Vulnerabilities: &o.Vulnerabilities,
		}
	}

	sp := &SparseVulnerabilityTag{}
	for _, f := range fields {
		switch f {
		case "image":
			sp.Image = &(o.Image)
		case "severity":
			sp.Severity = &(o.Severity)
		case "vulnerabilities":
			sp.Vulnerabilities = &(o.Vulnerabilities)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseVulnerabilityTag to the object.
func (o *VulnerabilityTag) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseVulnerabilityTag)
	if so.Image != nil {
		o.Image = *so.Image
	}
	if so.Severity != nil {
		o.Severity = *so.Severity
	}
	if so.Vulnerabilities != nil {
		o.Vulnerabilities = *so.Vulnerabilities
	}
}

// DeepCopy returns a deep copy if the VulnerabilityTag.
func (o *VulnerabilityTag) DeepCopy() *VulnerabilityTag {

	if o == nil {
		return nil
	}

	out := &VulnerabilityTag{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *VulnerabilityTag.
func (o *VulnerabilityTag) DeepCopyInto(out *VulnerabilityTag) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy VulnerabilityTag: %s", err))
	}

	*out = *target.(*VulnerabilityTag)
}

// Validate valides the current information stored into the structure.
func (o *VulnerabilityTag) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*VulnerabilityTag) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := VulnerabilityTagAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return VulnerabilityTagLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*VulnerabilityTag) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return VulnerabilityTagAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *VulnerabilityTag) ValueForAttribute(name string) interface{} {

	switch name {
	case "image":
		return o.Image
	case "severity":
		return o.Severity
	case "vulnerabilities":
		return o.Vulnerabilities
	}

	return nil
}

// VulnerabilityTagAttributesMap represents the map of attribute for VulnerabilityTag.
var VulnerabilityTagAttributesMap = map[string]elemental.AttributeSpecification{
	"Image": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Image",
		Description:    `Image name.`,
		Exposed:        true,
		Name:           "image",
		ReadOnly:       true,
		Type:           "string",
	},
	"Severity": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		ConvertedName:  "Severity",
		Description:    `Internal property for optmization.`,
		Exposed:        true,
		Name:           "severity",
		SubType:        "_vulnerability_level",
		Type:           "external",
	},
	"Vulnerabilities": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Vulnerabilities",
		Description:    `List of vulnerability tags associated to the give images.`,
		Exposed:        true,
		Name:           "vulnerabilities",
		ReadOnly:       true,
		SubType:        "string",
		Type:           "list",
	},
}

// VulnerabilityTagLowerCaseAttributesMap represents the map of attribute for VulnerabilityTag.
var VulnerabilityTagLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"image": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Image",
		Description:    `Image name.`,
		Exposed:        true,
		Name:           "image",
		ReadOnly:       true,
		Type:           "string",
	},
	"severity": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		ConvertedName:  "Severity",
		Description:    `Internal property for optmization.`,
		Exposed:        true,
		Name:           "severity",
		SubType:        "_vulnerability_level",
		Type:           "external",
	},
	"vulnerabilities": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Vulnerabilities",
		Description:    `List of vulnerability tags associated to the give images.`,
		Exposed:        true,
		Name:           "vulnerabilities",
		ReadOnly:       true,
		SubType:        "string",
		Type:           "list",
	},
}

// SparseVulnerabilityTagsList represents a list of SparseVulnerabilityTags
type SparseVulnerabilityTagsList []*SparseVulnerabilityTag

// Identity returns the identity of the objects in the list.
func (o SparseVulnerabilityTagsList) Identity() elemental.Identity {

	return VulnerabilityTagIdentity
}

// Copy returns a pointer to a copy the SparseVulnerabilityTagsList.
func (o SparseVulnerabilityTagsList) Copy() elemental.Identifiables {

	copy := append(SparseVulnerabilityTagsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseVulnerabilityTagsList.
func (o SparseVulnerabilityTagsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseVulnerabilityTagsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseVulnerabilityTag))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseVulnerabilityTagsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseVulnerabilityTagsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseVulnerabilityTagsList converted to VulnerabilityTagsList.
func (o SparseVulnerabilityTagsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseVulnerabilityTagsList) Version() int {

	return 1
}

// SparseVulnerabilityTag represents the sparse version of a vulnerabilitytag.
type SparseVulnerabilityTag struct {
	// Image name.
	Image *string `json:"image,omitempty" msgpack:"image,omitempty" bson:"-" mapstructure:"image,omitempty"`

	// Internal property for optmization.
	Severity *constants.Vulnerability `json:"severity,omitempty" msgpack:"severity,omitempty" bson:"-" mapstructure:"severity,omitempty"`

	// List of vulnerability tags associated to the give images.
	Vulnerabilities *[]string `json:"vulnerabilities,omitempty" msgpack:"vulnerabilities,omitempty" bson:"-" mapstructure:"vulnerabilities,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseVulnerabilityTag returns a new  SparseVulnerabilityTag.
func NewSparseVulnerabilityTag() *SparseVulnerabilityTag {
	return &SparseVulnerabilityTag{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseVulnerabilityTag) Identity() elemental.Identity {

	return VulnerabilityTagIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseVulnerabilityTag) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseVulnerabilityTag) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseVulnerabilityTag) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseVulnerabilityTag{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseVulnerabilityTag) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseVulnerabilityTag{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseVulnerabilityTag) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseVulnerabilityTag) ToPlain() elemental.PlainIdentifiable {

	out := NewVulnerabilityTag()
	if o.Image != nil {
		out.Image = *o.Image
	}
	if o.Severity != nil {
		out.Severity = *o.Severity
	}
	if o.Vulnerabilities != nil {
		out.Vulnerabilities = *o.Vulnerabilities
	}

	return out
}

// DeepCopy returns a deep copy if the SparseVulnerabilityTag.
func (o *SparseVulnerabilityTag) DeepCopy() *SparseVulnerabilityTag {

	if o == nil {
		return nil
	}

	out := &SparseVulnerabilityTag{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseVulnerabilityTag.
func (o *SparseVulnerabilityTag) DeepCopyInto(out *SparseVulnerabilityTag) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseVulnerabilityTag: %s", err))
	}

	*out = *target.(*SparseVulnerabilityTag)
}

type mongoAttributesVulnerabilityTag struct {
}
type mongoAttributesSparseVulnerabilityTag struct {
}
