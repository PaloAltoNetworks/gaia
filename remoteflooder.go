// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// RemoteFlooderIdentity represents the Identity of the object.
var RemoteFlooderIdentity = elemental.Identity{
	Name:     "remoteflooder",
	Category: "remoteflooders",
	Package:  "yeul",
	Private:  false,
}

// RemoteFloodersList represents a list of RemoteFlooders
type RemoteFloodersList []*RemoteFlooder

// Identity returns the identity of the objects in the list.
func (o RemoteFloodersList) Identity() elemental.Identity {

	return RemoteFlooderIdentity
}

// Copy returns a pointer to a copy the RemoteFloodersList.
func (o RemoteFloodersList) Copy() elemental.Identifiables {

	copy := append(RemoteFloodersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the RemoteFloodersList.
func (o RemoteFloodersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(RemoteFloodersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*RemoteFlooder))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o RemoteFloodersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o RemoteFloodersList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the RemoteFloodersList converted to SparseRemoteFloodersList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o RemoteFloodersList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseRemoteFloodersList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseRemoteFlooder)
	}

	return out
}

// Version returns the version of the content.
func (o RemoteFloodersList) Version() int {

	return 1
}

// RemoteFlooder represents the model of a remoteflooder
type RemoteFlooder struct {
	// The parameters needed to create and start a flooder.
	FloodParams *FloodParam `json:"FloodParams" msgpack:"FloodParams" bson:"-" mapstructure:"FloodParams,omitempty"`

	// The options needed to create nodemakers that are registered with a cached mux.
	NodeMakerConfigs *FloodNodeMakerConfig `json:"NodeMakerConfigs" msgpack:"NodeMakerConfigs" bson:"-" mapstructure:"NodeMakerConfigs,omitempty"`

	// The flooding results.
	Results *FloodResult `json:"Results" msgpack:"Results" bson:"-" mapstructure:"Results,omitempty"`

	// If set, trails will be omitted from the results.
	OptionResultOmitTrails bool `json:"optionResultOmitTrails" msgpack:"optionResultOmitTrails" bson:"-" mapstructure:"optionResultOmitTrails,omitempty"`

	// a unique random string that is used to associate a cached mux nodemaker with
	// successive requests.
	SessionID string `json:"sessionID" msgpack:"sessionID" bson:"-" mapstructure:"sessionID,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewRemoteFlooder returns a new *RemoteFlooder
func NewRemoteFlooder() *RemoteFlooder {

	return &RemoteFlooder{
		ModelVersion:     1,
		FloodParams:      NewFloodParam(),
		NodeMakerConfigs: NewFloodNodeMakerConfig(),
		Results:          NewFloodResult(),
	}
}

// Identity returns the Identity of the object.
func (o *RemoteFlooder) Identity() elemental.Identity {

	return RemoteFlooderIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *RemoteFlooder) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *RemoteFlooder) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *RemoteFlooder) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesRemoteFlooder{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *RemoteFlooder) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesRemoteFlooder{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *RemoteFlooder) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *RemoteFlooder) BleveType() string {

	return "remoteflooder"
}

// DefaultOrder returns the list of default ordering fields.
func (o *RemoteFlooder) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *RemoteFlooder) Doc() string {

	return `Starts a flooder for a given source/destination/payload triplet.`
}

func (o *RemoteFlooder) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *RemoteFlooder) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseRemoteFlooder{
			FloodParams:            o.FloodParams,
			NodeMakerConfigs:       o.NodeMakerConfigs,
			Results:                o.Results,
			OptionResultOmitTrails: &o.OptionResultOmitTrails,
			SessionID:              &o.SessionID,
		}
	}

	sp := &SparseRemoteFlooder{}
	for _, f := range fields {
		switch f {
		case "FloodParams":
			sp.FloodParams = o.FloodParams
		case "NodeMakerConfigs":
			sp.NodeMakerConfigs = o.NodeMakerConfigs
		case "Results":
			sp.Results = o.Results
		case "optionResultOmitTrails":
			sp.OptionResultOmitTrails = &(o.OptionResultOmitTrails)
		case "sessionID":
			sp.SessionID = &(o.SessionID)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseRemoteFlooder to the object.
func (o *RemoteFlooder) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseRemoteFlooder)
	if so.FloodParams != nil {
		o.FloodParams = so.FloodParams
	}
	if so.NodeMakerConfigs != nil {
		o.NodeMakerConfigs = so.NodeMakerConfigs
	}
	if so.Results != nil {
		o.Results = so.Results
	}
	if so.OptionResultOmitTrails != nil {
		o.OptionResultOmitTrails = *so.OptionResultOmitTrails
	}
	if so.SessionID != nil {
		o.SessionID = *so.SessionID
	}
}

// DeepCopy returns a deep copy if the RemoteFlooder.
func (o *RemoteFlooder) DeepCopy() *RemoteFlooder {

	if o == nil {
		return nil
	}

	out := &RemoteFlooder{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *RemoteFlooder.
func (o *RemoteFlooder) DeepCopyInto(out *RemoteFlooder) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy RemoteFlooder: %s", err))
	}

	*out = *target.(*RemoteFlooder)
}

// Validate valides the current information stored into the structure.
func (o *RemoteFlooder) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.FloodParams != nil {
		elemental.ResetDefaultForZeroValues(o.FloodParams)
		if err := o.FloodParams.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.NodeMakerConfigs != nil {
		elemental.ResetDefaultForZeroValues(o.NodeMakerConfigs)
		if err := o.NodeMakerConfigs.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Results != nil {
		elemental.ResetDefaultForZeroValues(o.Results)
		if err := o.Results.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("sessionID", o.SessionID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*RemoteFlooder) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := RemoteFlooderAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return RemoteFlooderLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*RemoteFlooder) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return RemoteFlooderAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *RemoteFlooder) ValueForAttribute(name string) interface{} {

	switch name {
	case "FloodParams":
		return o.FloodParams
	case "NodeMakerConfigs":
		return o.NodeMakerConfigs
	case "Results":
		return o.Results
	case "optionResultOmitTrails":
		return o.OptionResultOmitTrails
	case "sessionID":
		return o.SessionID
	}

	return nil
}

// RemoteFlooderAttributesMap represents the map of attribute for RemoteFlooder.
var RemoteFlooderAttributesMap = map[string]elemental.AttributeSpecification{
	"FloodParams": {
		AllowedChoices: []string{},
		ConvertedName:  "FloodParams",
		Description:    `The parameters needed to create and start a flooder.`,
		Exposed:        true,
		Name:           "FloodParams",
		SubType:        "floodparam",
		Type:           "ref",
	},
	"NodeMakerConfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "NodeMakerConfigs",
		Description:    `The options needed to create nodemakers that are registered with a cached mux.`,
		Exposed:        true,
		Name:           "NodeMakerConfigs",
		SubType:        "floodnodemakerconfig",
		Type:           "ref",
	},
	"Results": {
		AllowedChoices: []string{},
		ConvertedName:  "Results",
		Description:    `The flooding results.`,
		Exposed:        true,
		Name:           "Results",
		SubType:        "floodresult",
		Type:           "ref",
	},
	"OptionResultOmitTrails": {
		AllowedChoices: []string{},
		ConvertedName:  "OptionResultOmitTrails",
		Description:    `If set, trails will be omitted from the results.`,
		Exposed:        true,
		Name:           "optionResultOmitTrails",
		Type:           "boolean",
	},
	"SessionID": {
		AllowedChoices: []string{},
		ConvertedName:  "SessionID",
		Description: `a unique random string that is used to associate a cached mux nodemaker with
successive requests.`,
		Exposed:  true,
		Name:     "sessionID",
		Required: true,
		Type:     "string",
	},
}

// RemoteFlooderLowerCaseAttributesMap represents the map of attribute for RemoteFlooder.
var RemoteFlooderLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"floodparams": {
		AllowedChoices: []string{},
		ConvertedName:  "FloodParams",
		Description:    `The parameters needed to create and start a flooder.`,
		Exposed:        true,
		Name:           "FloodParams",
		SubType:        "floodparam",
		Type:           "ref",
	},
	"nodemakerconfigs": {
		AllowedChoices: []string{},
		ConvertedName:  "NodeMakerConfigs",
		Description:    `The options needed to create nodemakers that are registered with a cached mux.`,
		Exposed:        true,
		Name:           "NodeMakerConfigs",
		SubType:        "floodnodemakerconfig",
		Type:           "ref",
	},
	"results": {
		AllowedChoices: []string{},
		ConvertedName:  "Results",
		Description:    `The flooding results.`,
		Exposed:        true,
		Name:           "Results",
		SubType:        "floodresult",
		Type:           "ref",
	},
	"optionresultomittrails": {
		AllowedChoices: []string{},
		ConvertedName:  "OptionResultOmitTrails",
		Description:    `If set, trails will be omitted from the results.`,
		Exposed:        true,
		Name:           "optionResultOmitTrails",
		Type:           "boolean",
	},
	"sessionid": {
		AllowedChoices: []string{},
		ConvertedName:  "SessionID",
		Description: `a unique random string that is used to associate a cached mux nodemaker with
successive requests.`,
		Exposed:  true,
		Name:     "sessionID",
		Required: true,
		Type:     "string",
	},
}

// SparseRemoteFloodersList represents a list of SparseRemoteFlooders
type SparseRemoteFloodersList []*SparseRemoteFlooder

// Identity returns the identity of the objects in the list.
func (o SparseRemoteFloodersList) Identity() elemental.Identity {

	return RemoteFlooderIdentity
}

// Copy returns a pointer to a copy the SparseRemoteFloodersList.
func (o SparseRemoteFloodersList) Copy() elemental.Identifiables {

	copy := append(SparseRemoteFloodersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseRemoteFloodersList.
func (o SparseRemoteFloodersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseRemoteFloodersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseRemoteFlooder))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseRemoteFloodersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseRemoteFloodersList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseRemoteFloodersList converted to RemoteFloodersList.
func (o SparseRemoteFloodersList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseRemoteFloodersList) Version() int {

	return 1
}

// SparseRemoteFlooder represents the sparse version of a remoteflooder.
type SparseRemoteFlooder struct {
	// The parameters needed to create and start a flooder.
	FloodParams *FloodParam `json:"FloodParams,omitempty" msgpack:"FloodParams,omitempty" bson:"-" mapstructure:"FloodParams,omitempty"`

	// The options needed to create nodemakers that are registered with a cached mux.
	NodeMakerConfigs *FloodNodeMakerConfig `json:"NodeMakerConfigs,omitempty" msgpack:"NodeMakerConfigs,omitempty" bson:"-" mapstructure:"NodeMakerConfigs,omitempty"`

	// The flooding results.
	Results *FloodResult `json:"Results,omitempty" msgpack:"Results,omitempty" bson:"-" mapstructure:"Results,omitempty"`

	// If set, trails will be omitted from the results.
	OptionResultOmitTrails *bool `json:"optionResultOmitTrails,omitempty" msgpack:"optionResultOmitTrails,omitempty" bson:"-" mapstructure:"optionResultOmitTrails,omitempty"`

	// a unique random string that is used to associate a cached mux nodemaker with
	// successive requests.
	SessionID *string `json:"sessionID,omitempty" msgpack:"sessionID,omitempty" bson:"-" mapstructure:"sessionID,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseRemoteFlooder returns a new  SparseRemoteFlooder.
func NewSparseRemoteFlooder() *SparseRemoteFlooder {
	return &SparseRemoteFlooder{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseRemoteFlooder) Identity() elemental.Identity {

	return RemoteFlooderIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseRemoteFlooder) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseRemoteFlooder) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseRemoteFlooder) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseRemoteFlooder{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseRemoteFlooder) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseRemoteFlooder{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseRemoteFlooder) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseRemoteFlooder) ToPlain() elemental.PlainIdentifiable {

	out := NewRemoteFlooder()
	if o.FloodParams != nil {
		out.FloodParams = o.FloodParams
	}
	if o.NodeMakerConfigs != nil {
		out.NodeMakerConfigs = o.NodeMakerConfigs
	}
	if o.Results != nil {
		out.Results = o.Results
	}
	if o.OptionResultOmitTrails != nil {
		out.OptionResultOmitTrails = *o.OptionResultOmitTrails
	}
	if o.SessionID != nil {
		out.SessionID = *o.SessionID
	}

	return out
}

// DeepCopy returns a deep copy if the SparseRemoteFlooder.
func (o *SparseRemoteFlooder) DeepCopy() *SparseRemoteFlooder {

	if o == nil {
		return nil
	}

	out := &SparseRemoteFlooder{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseRemoteFlooder.
func (o *SparseRemoteFlooder) DeepCopyInto(out *SparseRemoteFlooder) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseRemoteFlooder: %s", err))
	}

	*out = *target.(*SparseRemoteFlooder)
}

type mongoAttributesRemoteFlooder struct {
}
type mongoAttributesSparseRemoteFlooder struct {
}
