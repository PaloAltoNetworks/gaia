package gaia

import "fmt"
import "github.com/aporeto-inc/elemental"

// ServerConfigurationIdentity represents the Identity of the object
var ServerConfigurationIdentity = elemental.Identity{
	Name:     "serverconfiguration",
	Category: "serverconfigurations",
}

// ServerConfigurationsList represents a list of ServerConfigurations
type ServerConfigurationsList []*ServerConfiguration

// ServerConfiguration represents the model of a serverconfiguration
type ServerConfiguration struct {
	// ID is the identifier of the object.
	ID string `json:"ID" cql:"-" bson:"-"`

	// Parameters is the list of configuration parameters.
	Parameters map[string]PolicyRulesList `json:"parameters" cql:"-" bson:"-"`
}

// NewServerConfiguration returns a new *ServerConfiguration
func NewServerConfiguration() *ServerConfiguration {

	return &ServerConfiguration{}
}

// Identity returns the Identity of the object.
func (o *ServerConfiguration) Identity() elemental.Identity {

	return ServerConfigurationIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *ServerConfiguration) Identifier() string {

	return o.ID
}

func (o *ServerConfiguration) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *ServerConfiguration) SetIdentifier(ID string) {

	o.ID = ID
}

// Validate valides the current information stored into the structure.
func (o *ServerConfiguration) Validate() error {

	errors := elemental.Errors{}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (ServerConfiguration) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	return ServerConfigurationAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (ServerConfiguration) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return ServerConfigurationAttributesMap
}

// ServerConfigurationAttributesMap represents the map of attribute for ServerConfiguration.
var ServerConfigurationAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
		Unique:         true,
	},
	"Parameters": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Name:           "parameters",
		Orderable:      true,
		ReadOnly:       true,
		SubType:        "rendered_policy",
		Type:           "external",
	},
}
