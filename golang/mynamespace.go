package gaia

import "fmt"
import "github.com/aporeto-inc/elemental"

// MyNamespaceIdentity represents the Identity of the object
var MyNamespaceIdentity = elemental.Identity{
	Name:     "mynamespace",
	Category: "mynamespaces",
}

// MyNamespacesList represents a list of MyNamespaces
type MyNamespacesList []*MyNamespace

// MyNamespace represents the model of a mynamespace
type MyNamespace struct {
	// ID is the identifier of the object.
	ID string `json:"ID" cql:"-" bson:"-"`

	// List of namespaces that an user is authorized to use
	Namespaces []interface{} `json:"namespaces" cql:"-" bson:"-"`
}

// NewMyNamespace returns a new *MyNamespace
func NewMyNamespace() *MyNamespace {

	return &MyNamespace{}
}

// Identity returns the Identity of the object.
func (o *MyNamespace) Identity() elemental.Identity {

	return MyNamespaceIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *MyNamespace) Identifier() string {

	return o.ID
}

func (o *MyNamespace) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *MyNamespace) SetIdentifier(ID string) {

	o.ID = ID
}

// Validate valides the current information stored into the structure.
func (o *MyNamespace) Validate() error {

	errors := elemental.Errors{}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (o MyNamespace) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	return MyNamespaceAttributesMap[name]
}

// MyNamespaceAttributesMap represents the map of attribute for MyNamespace.
var MyNamespaceAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Format:         "free",
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Type:           "string",
		Unique:         true,
	},
	"Namespaces": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Exposed:        true,
		Filterable:     true,
		Name:           "namespaces",
		Orderable:      true,
		ReadOnly:       true,
		SubType:        "namespaces_list",
		Type:           "external",
	},
}
