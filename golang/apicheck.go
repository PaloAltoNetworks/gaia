package gaia

import "fmt"
import "github.com/aporeto-inc/elemental"

// APICheckOperationValue represents the possible values for attribute "operation".
type APICheckOperationValue string

const (
	// APICheckOperationCreate represents the value Create.
	APICheckOperationCreate APICheckOperationValue = "Create"

	// APICheckOperationDelete represents the value Delete.
	APICheckOperationDelete APICheckOperationValue = "Delete"

	// APICheckOperationInfo represents the value Info.
	APICheckOperationInfo APICheckOperationValue = "Info"

	// APICheckOperationPatch represents the value Patch.
	APICheckOperationPatch APICheckOperationValue = "Patch"

	// APICheckOperationRetrieve represents the value Retrieve.
	APICheckOperationRetrieve APICheckOperationValue = "Retrieve"

	// APICheckOperationRetrievemany represents the value RetrieveMany.
	APICheckOperationRetrievemany APICheckOperationValue = "RetrieveMany"

	// APICheckOperationUpdate represents the value Update.
	APICheckOperationUpdate APICheckOperationValue = "Update"
)

// APICheckIdentity represents the Identity of the object
var APICheckIdentity = elemental.Identity{
	Name:     "apicheck",
	Category: "apichecks",
}

// APIChecksList represents a list of APIChecks
type APIChecksList []*APICheck

// APICheck represents the model of a apicheck
type APICheck struct {
	// Authorized contains the results of the check.
	Authorized map[string]bool `json:"authorized" cql:"-" bson:"-"`

	// Namespace is the namespace to use to check the api authentication.
	Namespace string `json:"namespace" cql:"-" bson:"-"`

	// Operation is the operation you want to check.
	Operation APICheckOperationValue `json:"operation" cql:"operation,omitempty" bson:"operation"`

	// TargetIdentities contains the list of identities you want to check the authorization.
	TargetIdentities []string `json:"targetIdentities" cql:"-" bson:"-"`

	// Token is the token to use to check api authentication
	Token string `json:"token" cql:"-" bson:"-"`
}

// NewAPICheck returns a new *APICheck
func NewAPICheck() *APICheck {

	return &APICheck{
		Authorized:       map[string]bool{},
		TargetIdentities: []string{},
	}
}

// Identity returns the Identity of the object.
func (o *APICheck) Identity() elemental.Identity {

	return APICheckIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *APICheck) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *APICheck) SetIdentifier(ID string) {

}

func (o *APICheck) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// Validate valides the current information stored into the structure.
func (o *APICheck) Validate() error {

	errors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("namespace", o.Namespace); err != nil {
		errors = append(errors, err)
	}

	if err := elemental.ValidateStringInList("operation", string(o.Operation), []string{"Create", "Delete", "Info", "Patch", "Retrieve", "RetrieveMany", "Update"}, false); err != nil {
		errors = append(errors, err)
	}

	if err := elemental.ValidateRequiredExternal("targetIdentities", o.TargetIdentities); err != nil {
		errors = append(errors, err)
	}

	if err := elemental.ValidateRequiredString("token", o.Token); err != nil {
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (APICheck) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	return APICheckAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (APICheck) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return APICheckAttributesMap
}

// APICheckAttributesMap represents the map of attribute for APICheck.
var APICheckAttributesMap = map[string]elemental.AttributeSpecification{
	"Authorized": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Autogenerated:  true,
		Description:    `Authorized contains the results of the check.`,
		Exposed:        true,
		Name:           "authorized",
		ReadOnly:       true,
		SubType:        "authorized_identities",
		Type:           "external",
	},
	"Namespace": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `Namespace is the namespace to use to check the api authentication.`,
		Exposed:        true,
		Format:         "free",
		Name:           "namespace",
		Required:       true,
		Type:           "string",
	},
	"Operation": elemental.AttributeSpecification{
		AllowedChoices: []string{"Create", "Delete", "Info", "Patch", "Retrieve", "RetrieveMany", "Update"},
		Description:    `Operation is the operation you want to check.`,
		Exposed:        true,
		Filterable:     true,
		Name:           "operation",
		Orderable:      true,
		Stored:         true,
		Type:           "enum",
	},
	"TargetIdentities": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `TargetIdentities contains the list of identities you want to check the authorization.`,
		Exposed:        true,
		Name:           "targetIdentities",
		Required:       true,
		SubType:        "identity_list",
		Type:           "external",
	},
	"Token": elemental.AttributeSpecification{
		AllowedChoices: []string{},
		Description:    `Token is the token to use to check api authentication`,
		Exposed:        true,
		Format:         "free",
		Name:           "token",
		Required:       true,
		Type:           "string",
	},
}
