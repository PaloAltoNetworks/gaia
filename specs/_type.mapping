elemental:

  actions_list:
    type: map[string]map[string]interface{}

  annotations:
    type: map[string][]string
    init: map[string][]string{}

  authorized_identities:
    type: map[string]bool
    init: map[string]bool{}

  selectors_list:
    type: map[string]string

  datapoints_list:
    type: '[]map[string]interface{}'
    init: '[]map[string]interface{}{}'

  processingunit_transient_tags_map:
    type: map[string][]string

  file_entities:
    type: FilePathsList
    init: FilePathsList{}

  go_time:
    type: int64

  identity_list:
    type: '[]string'
    init: '[]string{}'

  ignore_list:
    type: '[]string'
    init: '[]string{}'

  metadata_list:
    type: '[]string'
    init: '[]string{}'

  namespace_entities:
    type:  NamespacesList
    init: NamespacesList{}

  namespaces_list:
    type: '[]interface{}'

  network_entities:
    type: ExternalServicesList
    init: ExternalServicesList{}

  policies_list:
    type: '[][]string'

  network_access_policies_list:
    type: '[]*NetworkAccessPolicy'

  raw_data:
    type: interface{}

  relations_list:
    type: '[]string'

  policy_rules_list:
    type: PolicyRulesList
    init: PolicyRulesList{}

  rendered_policy:
    type: map[string]PolicyRulesList
    init: |-
      map[string]PolicyRulesList{
        string(constants.RenderedPolicyTypeNetwork): PolicyRulesList{},
        string(constants.RenderedPolicyTypeFile): PolicyRulesList{},
        string(constants.RenderedPolicyTypeIsolation): PolicyRulesList{},
      }
    import: go.aporeto.io/gaia/constants

  enforcerprofiles_list:
    type: EnforcerProfilesList
    init: EnforcerProfilesList{}

  policy_status:
    type: constants.PolicyStatus
    init: constants.PolicyStatusEnabled
    import: go.aporeto.io/gaia/constants

  subjects_list:
    type: '[]string'

  syscall_entities:
    type: SystemCallsList
    init: SystemCallsList{}

  tags_list:
    type: '[]string'
    init: '[]string{}'

  target_networks_list:
    type: '[]string'

  excluded_networks_list:
    type: '[]string'

  excluded_interfaces_list:
    type: '[]string'

  target_tags:
    type: '[][]string'

  trust_profile:
    type: map[string]string

  collected_info:
    type: map[string]string

  ports_list:
    type: '[]string'
    init: '[]string{}'

  vulnerabilities:
    type: '[]*Vulnerability'

  vulnerability_level:
    type: constants.Vulnerability
    init: constants.VulnerabilityUnknown
    import: go.aporeto.io/gaia/constants

  graphedges_map:
    type: types.GraphEdgeMap
    init: types.GraphEdgeMap{}
    import: go.aporeto.io/gaia/types

  graphnodes_map:
    type: types.GraphNodeMap
    init: types.GraphNodeMap{}
    import: go.aporeto.io/gaia/types

  graphgroups_map:
    type: types.GraphGroupMap
    init: types.GraphGroupMap{}
    import: go.aporeto.io/gaia/types

  graphclaims_map:
    type: map[string][]string
    init: map[string][]string{}

  view_suggestions:
    type: '[]string'
    init: '[]string{}'

  flowstatistic_origin_list:
    type: '[]string'
    init: '[]string{}'

  authorization_map:
    type: map[string][]string
    init: map[string][]string{}

  limited_identity_list:
    type: '[]string'
    init: '[]string{}'

  tabulated_data:
    type: '[][]interface{}'
    init: '[][]interface{}{}'

  ip_records:
    type: '[]*types.IPRecord'
    init: '[]*types.IPRecord{}'
    import: go.aporeto.io/gaia/types

  cron_expression:
    type: string

  processingunit:
    type: '*ProcessingUnit'

  trusted_cas_list:
    type: '[]string'
    init: '[]string{}'

  system_call_list:
    type: '[]types.AuditSystemCallType'
    init: '[]types.AuditSystemCallType{}'
    import: go.aporeto.io/gaia/types

  audit_profile_rule_list:
    type: types.AuditProfileRuleList
    init: types.AuditProfileRuleList{}
    import: go.aporeto.io/gaia/types

  audit_profile_selector:
    type: '[]string'

  audit_profiles:
    type: AuditProfilesList

  time_series_results:
    type: '[]*types.TimeSeriesQueryResults'
    init: '[]*types.TimeSeriesQueryResults{}'
    import: go.aporeto.io/gaia/types

  syscall_rules:
    type: types.SyscallEnforcementRulesMap
    init: types.SyscallEnforcementRulesMap{}
    import: go.aporeto.io/gaia/types

  cap_map:
    type: types.CapabilitiesTypeMap
    init: types.CapabilitiesTypeMap{}
    import: go.aporeto.io/gaia/types

  arch_list:
    type: types.ArchitecturesTypeList
    init: types.ArchitecturesTypeList{}
    import: go.aporeto.io/gaia/types

  isolation_profile_entities:
    type: IsolationProfilesList
    init: IsolationProfilesList{}

  syscall_action:
    type: types.SyscallEnforcementAction
    import: go.aporeto.io/gaia/types

  exported_data:
    type: '*Export'
    init: NewExport()

  exported_data_content:
    type: 'map[string][]map[string]interface{}'
    init: 'map[string][]map[string]interface{}{}'

  processing_unit_services_list:
    type: types.ProcessingUnitServicesList
    init: types.ProcessingUnitServicesList{}
    import: go.aporeto.io/gaia/types

  host_services_list:
    type: types.HostServicesList
    init: types.HostServicesList{}
    import: go.aporeto.io/gaia/types

  app_parameters:
    type: '[]*types.AppParameter'
    init: '[]*types.AppParameter{}'
    import: go.aporeto.io/gaia/types

  app_relatedobjects:
    type: '[]*types.AppRelatedObject'
    init: '[]*types.AppRelatedObject{}'
    import: go.aporeto.io/gaia/types

  logs:
    type: map[string]string
    init: map[string]string{}

  claims:
    type: '*claims.MidgardClaims'
    init: claims.NewMidgardClaims()
    import: go.aporeto.io/midgard-lib/claims

  metadata:
    type: map[string]interface{}
    init: map[string]interface{}{}

  raw_json:
    type: json.RawMessage
    import: encoding/json

  elemental_identitifable:
    type:  elemental.Identifiable

  elemental_operation:
    type: elemental.Operation

  associated_policies:
    type: map[string]string
    init: map[string]string{}

  list_emails:
    type: '[]string'

  list_attachments:
    type: map[string]string

  tags_map:
    type: map[string]string
    init: map[string]string{}

  int64:
    type: int64

  tsdb_fields:
    type: map[string]interface{}
    init: map[string]interface{}{}

  ip_list:
    type: types.IPList
    init: types.IPList{}
    import: go.aporeto.io/gaia/types

  exposed_api_list:
    type: types.ExposedAPIList
    init: types.ExposedAPIList{}
    import: go.aporeto.io/gaia/types

  api_services_entities:
    type: ServicesList
    init: ServicesList{}

  addresses_list:
    type: '[]string'
    init: '[]string{}'

  portmapping_list:
    type: '[]*types.PortMapping'
    init: '[]*types.PortMapping{}'
    import: go.aporeto.io/gaia/types

  jaeger_batch:
    type: '*jaeger.Batch'
    init: '&jaeger.Batch{}'
    import: github.com/uber/jaeger-client-go/thrift-gen/jaeger

  automation_parameters:
    type: map[string]interface{}
    init: map[string]interface{}{}

  automation_events:
    type: map[string][]elemental.EventType
    init: map[string][]elemental.EventType{}

  automation_entitlements:
    type: map[string][]elemental.Operation
    init: map[string][]elemental.Operation{}

  automation_template_parameters:
    type: map[string]types.AutomationTemplateParameter
    init: map[string]types.AutomationTemplateParameter{}
    import: go.aporeto.io/gaia/types

  alarm_data:
    type: '[]map[string]string'
    init: '[]map[string]string{}'

  alarm_occurrences:
    type: '[]time.Time'
    init: '[]time.Time{}'

  scopes_list:
    type: '[]string'
    init: '[]string{}'

  extensions_list:
    type: '[]string'
    init: '[]string{}'

  app_versionparameters:
    type: 'map[string][]*types.AppParameter'
    init: 'map[string][]*types.AppParameter{}'
    import: go.aporeto.io/gaia/types

  service_data:
    type: 'interface{}'
    init: 'nil'
