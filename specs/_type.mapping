actions_list:
  elemental:
    type: map[string]map[string]interface{}

alarm_data:
  elemental:
    type: '[]map[string]string'
    init: '[]map[string]string{}'

alarm_occurrences:
  elemental:
    type: '[]time.Time'
    init: '[]time.Time{}'

annotations:
  elemental:
    type: map[string][]string
    init: map[string][]string{}

api_services_entities:
  elemental:
    type: ServicesList
    init: ServicesList{}

app_parameters:
  elemental:
    type: '[]*types.AppParameter'
    init: '[]*types.AppParameter{}'
    import: go.aporeto.io/gaia/types

app_relatedobjects:
  elemental:
    type: '[]*types.AppRelatedObject'
    init: '[]*types.AppRelatedObject{}'
    import: go.aporeto.io/gaia/types

app_versionparameters:
  elemental:
    type: map[string][]*types.AppParameter
    init: map[string][]*types.AppParameter{}
    import: go.aporeto.io/gaia/types

arch_list:
  elemental:
    type: types.ArchitecturesTypeList
    init: types.ArchitecturesTypeList{}
    import: go.aporeto.io/gaia/types

associated_policies:
  elemental:
    type: map[string]string
    init: map[string]string{}

audit_profile_rule_list:
  elemental:
    type: types.AuditProfileRuleList
    init: types.AuditProfileRuleList{}
    import: go.aporeto.io/gaia/types

audit_profile_selector:
  elemental:
    type: '[]string'

audit_profiles:
  elemental:
    type: AuditProfilesList

authorization_map:
  elemental:
    type: map[string][]string
    init: map[string][]string{}

authorized_identities:
  elemental:
    type: map[string]bool
    init: map[string]bool{}

automation_entitlements:
  elemental:
    type: map[string][]elemental.Operation
    init: map[string][]elemental.Operation{}

automation_events:
  elemental:
    type: map[string][]elemental.EventType
    init: map[string][]elemental.EventType{}

automation_parameters:
  elemental:
    type: map[string]interface{}
    init: map[string]interface{}{}

automation_template_parameters:
  elemental:
    type: map[string]types.AutomationTemplateParameter
    init: map[string]types.AutomationTemplateParameter{}
    import: go.aporeto.io/gaia/types

cap_map:
  elemental:
    type: types.CapabilitiesTypeMap
    init: types.CapabilitiesTypeMap{}
    import: go.aporeto.io/gaia/types

claims:
  elemental:
    type: '*claims.MidgardClaims'
    init: claims.NewMidgardClaims()
    import: go.aporeto.io/midgard-lib/claims

collected_info:
  elemental:
    type: map[string]string

cron_expression:
  elemental:
    type: string

datapoints_list:
  elemental:
    type: '[]map[string]interface{}'
    init: '[]map[string]interface{}{}'

deprecated_network_entities:
  elemental:
    type: ExternalServicesList
    init: ExternalServicesList{}

elemental_identitifable:
  elemental:
    type: elemental.Identifiable

elemental_operation:
  elemental:
    type: elemental.Operation

enforcerprofiles_list:
  elemental:
    type: EnforcerProfilesList
    init: EnforcerProfilesList{}

excluded_interfaces_list:
  elemental:
    type: '[]string'

excluded_networks_list:
  elemental:
    type: '[]string'

exported_data:
  elemental:
    type: '*Export'
    init: NewExport()

exported_data_content:
  elemental:
    type: map[string][]map[string]interface{}
    init: map[string][]map[string]interface{}{}

exposed_api_list:
  elemental:
    type: types.ExposedAPIList
    init: types.ExposedAPIList{}
    import: go.aporeto.io/gaia/types

extensions_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

file_entities:
  elemental:
    type: FilePathsList
    init: FilePathsList{}

flowstatistic_origin_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

graphclaims_map:
  elemental:
    type: map[string][]string
    init: map[string][]string{}

hashed_tags:
  elemental:
    type: map[string]string
    init: map[string]string{}

host_services_list:
  elemental:
    type: types.HostServicesList
    init: types.HostServicesList{}
    import: go.aporeto.io/gaia/types

identity_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

ignore_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

int64:
  elemental:
    type: int64

invoicerecord_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

ip_list:
  elemental:
    type: types.IPList
    init: types.IPList{}
    import: go.aporeto.io/gaia/types

isolation_profile_entities:
  elemental:
    type: IsolationProfilesList
    init: IsolationProfilesList{}

jaeger_batch:
  elemental:
    type: '*jaeger.Batch'
    init: '&jaeger.Batch{}'
    import: github.com/uber/jaeger-client-go/thrift-gen/jaeger

list_attachments:
  elemental:
    type: map[string]string

list_emails:
  elemental:
    type: '[]string'

list_list_string:
  elemental:
    type: '[][]string'
    init: '[][]string{}'

logs:
  elemental:
    type: map[string]string
    init: map[string]string{}

map_string_int:
  elemental:
    type: map[string]int
    init: map[string]int{}

metadata:
  elemental:
    type: map[string]interface{}
    init: map[string]interface{}{}

metadata_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

namespace_entities:
  elemental:
    type: NamespacesList
    init: NamespacesList{}

network_access_policies_list:
  elemental:
    type: '[]*NetworkAccessPolicy'

network_entities:
  elemental:
    type: ExternalNetworksList
    init: ExternalNetworksList{}

policies_list:
  elemental:
    type: '[][]string'

policy_rules_list:
  elemental:
    type: PolicyRulesList
    init: PolicyRulesList{}

ports_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

processing_unit_services_list:
  elemental:
    type: types.ProcessingUnitServicesList
    init: types.ProcessingUnitServicesList{}
    import: go.aporeto.io/gaia/types

processingunit:
  elemental:
    type: '*ProcessingUnit'

processingunit_transient_tags_map:
  elemental:
    type: map[string][]string

raw_data:
  elemental:
    type: interface{}

raw_json:
  elemental:
    type: json.RawMessage
    import: encoding/json

relations_list:
  elemental:
    type: '[]string'

rendered_policy:
  elemental:
    type: map[string]PolicyRulesList
    init: |-
      map[string]PolicyRulesList{
        string(constants.RenderedPolicyTypeNetwork): PolicyRulesList{},
        string(constants.RenderedPolicyTypeFile): PolicyRulesList{},
        string(constants.RenderedPolicyTypeIsolation): PolicyRulesList{},
      }
    import: go.aporeto.io/gaia/constants

scopes_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

selectors_list:
  elemental:
    type: map[string]string

service_data:
  elemental:
    type: interface{}
    init: nil

syscall_action:
  elemental:
    type: types.SyscallEnforcementAction
    import: go.aporeto.io/gaia/types

syscall_rules:
  elemental:
    type: types.SyscallEnforcementRulesMap
    init: types.SyscallEnforcementRulesMap{}
    import: go.aporeto.io/gaia/types

system_call_list:
  elemental:
    type: '[]types.AuditSystemCallType'
    init: '[]types.AuditSystemCallType{}'
    import: go.aporeto.io/gaia/types

tabulated_data:
  elemental:
    type: '[][]interface{}'
    init: '[][]interface{}{}'

tags_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

tags_map:
  elemental:
    type: map[string]string
    init: map[string]string{}

target_networks_list:
  elemental:
    type: '[]string'

target_tags:
  elemental:
    type: '[][]string'

time_series_results:
  elemental:
    type: '[]*types.TimeSeriesQueryResults'
    init: '[]*types.TimeSeriesQueryResults{}'
    import: go.aporeto.io/gaia/types

trust_profile:
  elemental:
    type: map[string]string

trusted_cas_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

tsdb_fields:
  elemental:
    type: map[string]interface{}
    init: map[string]interface{}{}

view_suggestions:
  elemental:
    type: '[]string'
    init: '[]string{}'

vulnerabilities:
  elemental:
    type: '[]*Vulnerability'

vulnerability_level:
  elemental:
    type: constants.Vulnerability
    init: constants.VulnerabilityUnknown
    import: go.aporeto.io/gaia/constants
