
actions_list:
  elemental:
    type: map[string]map[string]interface{}

annotations:
  elemental:
    type: map[string][]string
    init: map[string][]string{}

authorized_identities:
  elemental:
    type: map[string]bool
    init: map[string]bool{}

selectors_list:
  elemental:
    type: map[string]string

datapoints_list:
  elemental:
    type: '[]map[string]interface{}'
    init: '[]map[string]interface{}{}'

processingunit_transient_tags_map:
  elemental:
    type: map[string][]string

file_entities:
  elemental:
    type: FilePathsList
    init: FilePathsList{}

hashed_tags:
  elemental:
    type: 'map[string]string'
    init: 'map[string]string{}'

identity_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

ignore_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

invoicerecord_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

metadata_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

namespace_entities:
  elemental:
    type:  NamespacesList
    init: NamespacesList{}

network_entities:
  elemental:
    type: ExternalServicesList
    init: ExternalServicesList{}

policies_list:
  elemental:
    type: '[][]string'

network_access_policies_list:
  elemental:
    type: '[]*NetworkAccessPolicy'

raw_data:
  elemental:
    type: interface{}

relations_list:
  elemental:
    type: '[]string'

policy_rules_list:
  elemental:
    type: PolicyRulesList
    init: PolicyRulesList{}

rendered_policy:
  elemental:
    type: map[string]PolicyRulesList
    init: |-
      map[string]PolicyRulesList{
        string(constants.RenderedPolicyTypeNetwork): PolicyRulesList{},
        string(constants.RenderedPolicyTypeFile): PolicyRulesList{},
        string(constants.RenderedPolicyTypeIsolation): PolicyRulesList{},
      }
    import: go.aporeto.io/gaia/constants

enforcerprofiles_list:
  elemental:
    type: EnforcerProfilesList
    init: EnforcerProfilesList{}

tags_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

target_networks_list:
  elemental:
    type: '[]string'

excluded_networks_list:
  elemental:
    type: '[]string'

excluded_interfaces_list:
  elemental:
    type: '[]string'

target_tags:
  elemental:
    type: '[][]string'

trust_profile:
  elemental:
    type: map[string]string

collected_info:
  elemental:
    type: map[string]string

ports_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

vulnerabilities:
  elemental:
    type: '[]*Vulnerability'

vulnerability_level:
  elemental:
    type: constants.Vulnerability
    init: constants.VulnerabilityUnknown
    import: go.aporeto.io/gaia/constants

graphedges_map:
  elemental:
    type: types.GraphEdgeMap
    init: types.GraphEdgeMap{}
    import: go.aporeto.io/gaia/types

graphnodes_map:
  elemental:
    type: types.GraphNodeMap
    init: types.GraphNodeMap{}
    import: go.aporeto.io/gaia/types

graphgroups_map:
  elemental:
    type: types.GraphGroupMap
    init: types.GraphGroupMap{}
    import: go.aporeto.io/gaia/types

graphclaims_map:
  elemental:
    type: map[string][]string
    init: map[string][]string{}

view_suggestions:
  elemental:
    type: '[]string'
    init: '[]string{}'

flowstatistic_origin_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

authorization_map:
  elemental:
    type: map[string][]string
    init: map[string][]string{}

tabulated_data:
  elemental:
    type: '[][]interface{}'
    init: '[][]interface{}{}'

ip_records:
  elemental:
    type: '[]*types.IPRecord'
    init: '[]*types.IPRecord{}'
    import: go.aporeto.io/gaia/types

cron_expression:
  elemental:
    type: string

processingunit:
  elemental:
    type: '*ProcessingUnit'

trusted_cas_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

system_call_list:
  elemental:
    type: '[]types.AuditSystemCallType'
    init: '[]types.AuditSystemCallType{}'
    import: go.aporeto.io/gaia/types

audit_profile_rule_list:
  elemental:
    type: types.AuditProfileRuleList
    init: types.AuditProfileRuleList{}
    import: go.aporeto.io/gaia/types

audit_profile_selector:
  elemental:
    type: '[]string'

audit_profiles:
  elemental:
    type: AuditProfilesList

time_series_results:
  elemental:
    type: '[]*types.TimeSeriesQueryResults'
    init: '[]*types.TimeSeriesQueryResults{}'
    import: go.aporeto.io/gaia/types

syscall_rules:
  elemental:
    type: types.SyscallEnforcementRulesMap
    init: types.SyscallEnforcementRulesMap{}
    import: go.aporeto.io/gaia/types

cap_map:
  elemental:
    type: types.CapabilitiesTypeMap
    init: types.CapabilitiesTypeMap{}
    import: go.aporeto.io/gaia/types

arch_list:
  elemental:
    type: types.ArchitecturesTypeList
    init: types.ArchitecturesTypeList{}
    import: go.aporeto.io/gaia/types

isolation_profile_entities:
  elemental:
    type: IsolationProfilesList
    init: IsolationProfilesList{}

syscall_action:
  elemental:
    type: types.SyscallEnforcementAction
    import: go.aporeto.io/gaia/types

exported_data:
  elemental:
    type: '*Export'
    init: NewExport()

exported_data_content:
  elemental:
    type: 'map[string][]map[string]interface{}'
    init: 'map[string][]map[string]interface{}{}'

processing_unit_services_list:
  elemental:
    type: types.ProcessingUnitServicesList
    init: types.ProcessingUnitServicesList{}
    import: go.aporeto.io/gaia/types

host_services_list:
  elemental:
    type: types.HostServicesList
    init: types.HostServicesList{}
    import: go.aporeto.io/gaia/types

app_parameters:
  elemental:
    type: '[]*types.AppParameter'
    init: '[]*types.AppParameter{}'
    import: go.aporeto.io/gaia/types

app_relatedobjects:
  elemental:
    type: '[]*types.AppRelatedObject'
    init: '[]*types.AppRelatedObject{}'
    import: go.aporeto.io/gaia/types

logs:
  elemental:
    type: map[string]string
    init: map[string]string{}

claims:
  elemental:
    type: '*claims.MidgardClaims'
    init: claims.NewMidgardClaims()
    import: go.aporeto.io/midgard-lib/claims

metadata:
  elemental:
    type: map[string]interface{}
    init: map[string]interface{}{}

raw_json:
  elemental:
    type: json.RawMessage
    import: encoding/json

elemental_identitifable:
  elemental:
    type:  elemental.Identifiable

elemental_operation:
  elemental:
    type: elemental.Operation

associated_policies:
  elemental:
    type: map[string]string
    init: map[string]string{}

list_emails:
  elemental:
    type: '[]string'

list_attachments:
  elemental:
    type: map[string]string

tags_map:
  elemental:
    type: map[string]string
    init: map[string]string{}

int64:
  elemental:
    type: int64

tsdb_fields:
  elemental:
    type: map[string]interface{}
    init: map[string]interface{}{}

ip_list:
  elemental:
    type: types.IPList
    init: types.IPList{}
    import: go.aporeto.io/gaia/types

exposed_api_list:
  elemental:
    type: types.ExposedAPIList
    init: types.ExposedAPIList{}
    import: go.aporeto.io/gaia/types

api_services_entities:
  elemental:
    type: ServicesList
    init: ServicesList{}

addresses_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

portmapping_list:
  elemental:
    type: '[]*types.PortMapping'
    init: '[]*types.PortMapping{}'
    import: go.aporeto.io/gaia/types

jaeger_batch:
  elemental:
    type: '*jaeger.Batch'
    init: '&jaeger.Batch{}'
    import: github.com/uber/jaeger-client-go/thrift-gen/jaeger

automation_parameters:
  elemental:
    type: map[string]interface{}
    init: map[string]interface{}{}

automation_events:
  elemental:
    type: map[string][]elemental.EventType
    init: map[string][]elemental.EventType{}

automation_entitlements:
  elemental:
    type: map[string][]elemental.Operation
    init: map[string][]elemental.Operation{}

automation_template_parameters:
  elemental:
    type: map[string]types.AutomationTemplateParameter
    init: map[string]types.AutomationTemplateParameter{}
    import: go.aporeto.io/gaia/types

alarm_data:
  elemental:
    type: '[]map[string]string'
    init: '[]map[string]string{}'

alarm_occurrences:
  elemental:
    type: '[]time.Time'
    init: '[]time.Time{}'

scopes_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

extensions_list:
  elemental:
    type: '[]string'
    init: '[]string{}'

app_versionparameters:
  elemental:
    type: 'map[string][]*types.AppParameter'
    init: 'map[string][]*types.AppParameter{}'
    import: go.aporeto.io/gaia/types

service_data:
  elemental:
    type: 'interface{}'
    init: 'nil'
