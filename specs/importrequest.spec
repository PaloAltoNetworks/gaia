# Model
model:
  rest_name: importrequest
  resource_name: importrequests
  entity_name: ImportRequest
  package: vivi
  group: core
  description: |-
    Allows you to send an import request to create objects to a namespace where
    the requester doesn't normally have the permission to do so (other than creating
    import requests).

    The requester must have the permission to create the request in their namespace
    and the target namespace.

    When the request is created, the status is set to `Draft`. The requester can
    edit the content as much as desired.
    When ready to send the request, update the status to `Submitted`.
    The request will then be moved to the target namespace.
    At that point nobody can edit the content of the requests other than adding
    comments.

    The requestee will now see the request, and will either

    - Set the status as `Approved`. This will create the objects in the target
      namespace.

    - Set the status as `Rejected`. The request cannot be edited anymore and can be
      deleted.

    - Set the status back as `Draft`. The request will go back to the requester
      namespace so that the requester can make changes. Once the change are ready,
    the requester
      will set back the status as `Submitted`.

    The `data` format is the same as `Export`.
  aliases:
  - req
  - reqs
  - ireq
  - ireqs
  get:
    description: Retrieve a single existing import request.
  update:
    description: Update an existing import request.
  delete:
    description: Delete an existing import request.
  extends:
  - '@zoned'
  - '@migratable'
  - '@base'
  - '@namespaced'
  - '@described'
  - '@timeable'
  - '@identifiable-stored'
  - '@timeable'

# Attributes
attributes:
  v1:
  - name: comment
    description: A new comment that will be added to `commentFeed`.
    type: string
    exposed: true
    transient: true

  - name: commentFeed
    description: List of comments that have been added to that request.
    type: refList
    exposed: true
    subtype: comment
    stored: true
    read_only: true
    autogenerated: true
    transient: true
    extensions:
      refMode: pointer

  - name: data
    description: Data to import.
    type: external
    exposed: true
    subtype: map[string][]map[string]interface{}
    stored: true
    required: true
    example_value:
      networkaccesspolicies:
      - action: Allow
        description: Allows Acme to access service A
        logsEnabled: true
        name: allow-acme
        object:
        - - $identity=processingunit
          - $namespace=/acme/prod
          - app=query
        subject:
        - - $identity=processingunit
          - app=partner-data

  - name: requesterClaims
    description: The identity claims of the requester; populated by the control plane.
    type: list
    exposed: true
    subtype: string
    stored: true
    read_only: true
    autogenerated: true
    example_value:
    - '@auth:realm=vince'
    - '@auth:account=acme'

  - name: requesterNamespace
    description: |-
      The namespace from which the request originated; populated by the
      control plane.
    type: string
    exposed: true
    stored: true
    read_only: true
    autogenerated: true

  - name: status
    description: |-
      Allows the content to be changed. `Submitted`: the request moves to the target
      namespace
      for approval. `Approved`: the data will be created immediately. `Rejected`: the
      request
      cannot be changed anymore and can be deleted.
    type: enum
    exposed: true
    stored: true
    allowed_choices:
    - Draft
    - Submitted
    - Approved
    - Rejected
    default_value: Draft

  - name: submittedOnce
    description: Internal field to know if the request has been submitted once.
    type: boolean
    stored: true

  - name: targetNamespace
    description: |-
      The namespace where the request will be sent. The requester can set any
      namespace but
      needs to have an authorization to post the request in that namespace.
    type: string
    exposed: true
    stored: true
    required: true
    creation_only: true
    example_value: /acme/prod
    transient: true
