# Model
model:
  rest_name: issue
  resource_name: issue
  entity_name: Issue
  package: midgard
  group: core/authentication
  description: Issues a new Aporeto token according to given data.

# Attributes
attributes:
  v1:
  - name: audience
    description: |-
      If given, the issued token will only be valid for the specified namespace.
      Refer to [JSON Web Token (JWT)RFC
      7519](https://tools.ietf.org/html/rfc7519#section-4.1.3).
      for further information.
    type: string
    exposed: true
    example_value: aud:*:*:/namespace
    validations:
    - $audience

  - name: authorizedIdentities
    description: |-
      Limits roles/permissions the token can be used for. This is only given to reduce
      the existing set of policies. For instance if you have administrative role, you
      can ask for a token that will tell the policy engine to reduce the permission to
      what it given here. Declaring a permission you don't initialy have according to
      the policy engine is a no op.
    type: list
    exposed: true
    subtype: string
    example_value:
    - '@auth:role=enforcer'

  - name: authorizedNamespace
    description: |-
      Limts the namespace the token can be used in. For instance if you have access to
      /ns1 and /ns2, you can ask for a token that will tell the policy engine to
      reduce the permission to what simply /ns2. Declaring a namespace you don't
      initialy have according to the policy engine is a no op.
    type: string
    exposed: true
    example_value: /namespace

  - name: claims
    description: The claims in the token. It is only set is the parameter `asCookie`
      is given.
    type: external
    exposed: true
    subtype: _claims
    read_only: true
    autogenerated: true
    omit_empty: true

  - name: data
    description: Contains additional data. The value depends on the issuer type.
    type: string
    exposed: true
    deprecated: true
    orderable: true

  - name: metadata
    description: Contains various additional information. Meaning depends on the `realm`.
    type: external
    exposed: true
    subtype: map[string]interface{}
    example_value:
      vinceAccount: acme
      vinceOTP: 665435
      vincePassword: s3cr3t
    orderable: true

  - name: opaque
    description: Opaque data that will be included in the issued token.
    type: external
    exposed: true
    subtype: map[string]string

  - name: quota
    description: Restricts the number of times the issued token can be used.
    type: integer
    exposed: true

  - name: realm
    description: |-
      The authentication realm. `AWSIdentityDocument`, `AWSSecurityToken`,
      `Certificate`,
      `Google`, `LDAP`, `Vince`, `GCPIdentityToken`, `AzureIdentityToken`, or `OIDC`.
    type: enum
    exposed: true
    required: true
    allowed_choices:
    - AWSSecurityToken
    - Certificate
    - Google
    - LDAP
    - Vince
    - GCPIdentityToken
    - AzureIdentityToken
    - OIDC
    - SAML
    - PCC
    - PCCIdentityToken
    example_value: Vince

  - name: token
    description: The token to use for the registration.
    type: string
    exposed: true
    read_only: true
    autogenerated: true

  - name: validity
    description: |-
      Configures the maximum length of validity for a token, using
      [Golang duration syntax](https://golang.org/pkg/time/#example_Duration). If it
      is
      bigger than the configured max validity, it will be capped. Default: `24h`.
    type: string
    exposed: true
    default_value: 24h
    orderable: true
    validations:
    - $timeDuration
