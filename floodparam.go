// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package gaia

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FloodParam represents the model of a floodparam
type FloodParam struct {
	// The destination NodeUID where the flooder should stop.
	Destination *FloodNodeUID `json:"destination" msgpack:"destination" bson:"-" mapstructure:"destination,omitempty"`

	// If set, the flooder will continue if a node returns ErrNotPermitted.
	OptionContinueOnErrNotPermitted bool `json:"optionContinueOnErrNotPermitted" msgpack:"optionContinueOnErrNotPermitted" bson:"-" mapstructure:"optionContinueOnErrNotPermitted,omitempty"`

	// If set, only denied paths will be reported. This will also force-set
	// optionContinueOnErrNotPermitted.
	OptionOnlyReportResultsWithErrNotPermitted bool `json:"optionOnlyReportResultsWithErrNotPermitted" msgpack:"optionOnlyReportResultsWithErrNotPermitted" bson:"-" mapstructure:"optionOnlyReportResultsWithErrNotPermitted,omitempty"`

	// The payload which the flooder should use.
	Payload *FloodPayload `json:"payload" msgpack:"payload" bson:"-" mapstructure:"payload,omitempty"`

	// The source NodeUID where the flooder should start.
	Source *FloodNodeUID `json:"source" msgpack:"source" bson:"-" mapstructure:"source,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFloodParam returns a new *FloodParam
func NewFloodParam() *FloodParam {

	return &FloodParam{
		ModelVersion: 1,
		Destination:  NewFloodNodeUID(),
		Payload:      NewFloodPayload(),
		Source:       NewFloodNodeUID(),
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FloodParam) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFloodParam{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FloodParam) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFloodParam{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FloodParam) BleveType() string {

	return "floodparam"
}

// DeepCopy returns a deep copy if the FloodParam.
func (o *FloodParam) DeepCopy() *FloodParam {

	if o == nil {
		return nil
	}

	out := &FloodParam{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FloodParam.
func (o *FloodParam) DeepCopyInto(out *FloodParam) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FloodParam: %s", err))
	}

	*out = *target.(*FloodParam)
}

// Validate valides the current information stored into the structure.
func (o *FloodParam) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if o.Destination != nil {
		elemental.ResetDefaultForZeroValues(o.Destination)
		if err := o.Destination.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Payload != nil {
		elemental.ResetDefaultForZeroValues(o.Payload)
		if err := o.Payload.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Source != nil {
		elemental.ResetDefaultForZeroValues(o.Source)
		if err := o.Source.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FloodParam) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FloodParamAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FloodParamLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FloodParam) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FloodParamAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FloodParam) ValueForAttribute(name string) any {

	switch name {
	case "destination":
		return o.Destination
	case "optionContinueOnErrNotPermitted":
		return o.OptionContinueOnErrNotPermitted
	case "optionOnlyReportResultsWithErrNotPermitted":
		return o.OptionOnlyReportResultsWithErrNotPermitted
	case "payload":
		return o.Payload
	case "source":
		return o.Source
	}

	return nil
}

// FloodParamAttributesMap represents the map of attribute for FloodParam.
var FloodParamAttributesMap = map[string]elemental.AttributeSpecification{
	"Destination": {
		AllowedChoices: []string{},
		ConvertedName:  "Destination",
		Description:    `The destination NodeUID where the flooder should stop.`,
		Exposed:        true,
		Name:           "destination",
		SubType:        "floodnodeuid",
		Type:           "ref",
	},
	"OptionContinueOnErrNotPermitted": {
		AllowedChoices: []string{},
		ConvertedName:  "OptionContinueOnErrNotPermitted",
		Description:    `If set, the flooder will continue if a node returns ErrNotPermitted.`,
		Exposed:        true,
		Name:           "optionContinueOnErrNotPermitted",
		Type:           "boolean",
	},
	"OptionOnlyReportResultsWithErrNotPermitted": {
		AllowedChoices: []string{},
		ConvertedName:  "OptionOnlyReportResultsWithErrNotPermitted",
		Description: `If set, only denied paths will be reported. This will also force-set
optionContinueOnErrNotPermitted.`,
		Exposed: true,
		Name:    "optionOnlyReportResultsWithErrNotPermitted",
		Type:    "boolean",
	},
	"Payload": {
		AllowedChoices: []string{},
		ConvertedName:  "Payload",
		Description:    `The payload which the flooder should use.`,
		Exposed:        true,
		Name:           "payload",
		SubType:        "floodpayload",
		Type:           "ref",
	},
	"Source": {
		AllowedChoices: []string{},
		ConvertedName:  "Source",
		Description:    `The source NodeUID where the flooder should start.`,
		Exposed:        true,
		Name:           "source",
		SubType:        "floodnodeuid",
		Type:           "ref",
	},
}

// FloodParamLowerCaseAttributesMap represents the map of attribute for FloodParam.
var FloodParamLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"destination": {
		AllowedChoices: []string{},
		ConvertedName:  "Destination",
		Description:    `The destination NodeUID where the flooder should stop.`,
		Exposed:        true,
		Name:           "destination",
		SubType:        "floodnodeuid",
		Type:           "ref",
	},
	"optioncontinueonerrnotpermitted": {
		AllowedChoices: []string{},
		ConvertedName:  "OptionContinueOnErrNotPermitted",
		Description:    `If set, the flooder will continue if a node returns ErrNotPermitted.`,
		Exposed:        true,
		Name:           "optionContinueOnErrNotPermitted",
		Type:           "boolean",
	},
	"optiononlyreportresultswitherrnotpermitted": {
		AllowedChoices: []string{},
		ConvertedName:  "OptionOnlyReportResultsWithErrNotPermitted",
		Description: `If set, only denied paths will be reported. This will also force-set
optionContinueOnErrNotPermitted.`,
		Exposed: true,
		Name:    "optionOnlyReportResultsWithErrNotPermitted",
		Type:    "boolean",
	},
	"payload": {
		AllowedChoices: []string{},
		ConvertedName:  "Payload",
		Description:    `The payload which the flooder should use.`,
		Exposed:        true,
		Name:           "payload",
		SubType:        "floodpayload",
		Type:           "ref",
	},
	"source": {
		AllowedChoices: []string{},
		ConvertedName:  "Source",
		Description:    `The source NodeUID where the flooder should start.`,
		Exposed:        true,
		Name:           "source",
		SubType:        "floodnodeuid",
		Type:           "ref",
	},
}

type mongoAttributesFloodParam struct {
}
